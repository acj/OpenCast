//
// unittest.pb.m
// 
// Generated by the objc protocol buffer compiler plugin.  DO NOT EDIT!
// source: google/protobuf/unittest.proto
//

#import "unittest.pb.h"

// @@protoc_insertion_point(imports)

@implementation UnittestRoot

static PBExtensionField* UnittestRoot_optionalInt32Extension = nil;
static PBExtensionField* UnittestRoot_optionalInt64Extension = nil;
static PBExtensionField* UnittestRoot_optionalUint32Extension = nil;
static PBExtensionField* UnittestRoot_optionalUint64Extension = nil;
static PBExtensionField* UnittestRoot_optionalSint32Extension = nil;
static PBExtensionField* UnittestRoot_optionalSint64Extension = nil;
static PBExtensionField* UnittestRoot_optionalFixed32Extension = nil;
static PBExtensionField* UnittestRoot_optionalFixed64Extension = nil;
static PBExtensionField* UnittestRoot_optionalSfixed32Extension = nil;
static PBExtensionField* UnittestRoot_optionalSfixed64Extension = nil;
static PBExtensionField* UnittestRoot_optionalFloatExtension = nil;
static PBExtensionField* UnittestRoot_optionalDoubleExtension = nil;
static PBExtensionField* UnittestRoot_optionalBoolExtension = nil;
static PBExtensionField* UnittestRoot_optionalStringExtension = nil;
static PBExtensionField* UnittestRoot_optionalBytesExtension = nil;
static PBExtensionField* UnittestRoot_OptionalGroupExtension = nil;
static PBExtensionField* UnittestRoot_optionalNestedMessageExtension = nil;
static PBExtensionField* UnittestRoot_optionalForeignMessageExtension = nil;
static PBExtensionField* UnittestRoot_optionalImportMessageExtension = nil;
static PBExtensionField* UnittestRoot_optionalNestedEnumExtension = nil;
static PBExtensionField* UnittestRoot_optionalForeignEnumExtension = nil;
static PBExtensionField* UnittestRoot_optionalImportEnumExtension = nil;
static PBExtensionField* UnittestRoot_optionalStringPieceExtension = nil;
static PBExtensionField* UnittestRoot_optionalCordExtension = nil;
static PBExtensionField* UnittestRoot_optionalPublicImportMessageExtension = nil;
static PBExtensionField* UnittestRoot_optionalLazyMessageExtension = nil;
static PBExtensionField* UnittestRoot_repeatedInt32Extension = nil;
static PBExtensionField* UnittestRoot_repeatedInt64Extension = nil;
static PBExtensionField* UnittestRoot_repeatedUint32Extension = nil;
static PBExtensionField* UnittestRoot_repeatedUint64Extension = nil;
static PBExtensionField* UnittestRoot_repeatedSint32Extension = nil;
static PBExtensionField* UnittestRoot_repeatedSint64Extension = nil;
static PBExtensionField* UnittestRoot_repeatedFixed32Extension = nil;
static PBExtensionField* UnittestRoot_repeatedFixed64Extension = nil;
static PBExtensionField* UnittestRoot_repeatedSfixed32Extension = nil;
static PBExtensionField* UnittestRoot_repeatedSfixed64Extension = nil;
static PBExtensionField* UnittestRoot_repeatedFloatExtension = nil;
static PBExtensionField* UnittestRoot_repeatedDoubleExtension = nil;
static PBExtensionField* UnittestRoot_repeatedBoolExtension = nil;
static PBExtensionField* UnittestRoot_repeatedStringExtension = nil;
static PBExtensionField* UnittestRoot_repeatedBytesExtension = nil;
static PBExtensionField* UnittestRoot_RepeatedGroupExtension = nil;
static PBExtensionField* UnittestRoot_repeatedNestedMessageExtension = nil;
static PBExtensionField* UnittestRoot_repeatedForeignMessageExtension = nil;
static PBExtensionField* UnittestRoot_repeatedImportMessageExtension = nil;
static PBExtensionField* UnittestRoot_repeatedNestedEnumExtension = nil;
static PBExtensionField* UnittestRoot_repeatedForeignEnumExtension = nil;
static PBExtensionField* UnittestRoot_repeatedImportEnumExtension = nil;
static PBExtensionField* UnittestRoot_repeatedStringPieceExtension = nil;
static PBExtensionField* UnittestRoot_repeatedCordExtension = nil;
static PBExtensionField* UnittestRoot_repeatedLazyMessageExtension = nil;
static PBExtensionField* UnittestRoot_defaultInt32Extension = nil;
static PBExtensionField* UnittestRoot_defaultInt64Extension = nil;
static PBExtensionField* UnittestRoot_defaultUint32Extension = nil;
static PBExtensionField* UnittestRoot_defaultUint64Extension = nil;
static PBExtensionField* UnittestRoot_defaultSint32Extension = nil;
static PBExtensionField* UnittestRoot_defaultSint64Extension = nil;
static PBExtensionField* UnittestRoot_defaultFixed32Extension = nil;
static PBExtensionField* UnittestRoot_defaultFixed64Extension = nil;
static PBExtensionField* UnittestRoot_defaultSfixed32Extension = nil;
static PBExtensionField* UnittestRoot_defaultSfixed64Extension = nil;
static PBExtensionField* UnittestRoot_defaultFloatExtension = nil;
static PBExtensionField* UnittestRoot_defaultDoubleExtension = nil;
static PBExtensionField* UnittestRoot_defaultBoolExtension = nil;
static PBExtensionField* UnittestRoot_defaultStringExtension = nil;
static PBExtensionField* UnittestRoot_defaultBytesExtension = nil;
static PBExtensionField* UnittestRoot_defaultNestedEnumExtension = nil;
static PBExtensionField* UnittestRoot_defaultForeignEnumExtension = nil;
static PBExtensionField* UnittestRoot_defaultImportEnumExtension = nil;
static PBExtensionField* UnittestRoot_defaultStringPieceExtension = nil;
static PBExtensionField* UnittestRoot_defaultCordExtension = nil;
static PBExtensionField* UnittestRoot_myExtensionString = nil;
static PBExtensionField* UnittestRoot_myExtensionInt = nil;
static PBExtensionField* UnittestRoot_packedInt32Extension = nil;
static PBExtensionField* UnittestRoot_packedInt64Extension = nil;
static PBExtensionField* UnittestRoot_packedUint32Extension = nil;
static PBExtensionField* UnittestRoot_packedUint64Extension = nil;
static PBExtensionField* UnittestRoot_packedSint32Extension = nil;
static PBExtensionField* UnittestRoot_packedSint64Extension = nil;
static PBExtensionField* UnittestRoot_packedFixed32Extension = nil;
static PBExtensionField* UnittestRoot_packedFixed64Extension = nil;
static PBExtensionField* UnittestRoot_packedSfixed32Extension = nil;
static PBExtensionField* UnittestRoot_packedSfixed64Extension = nil;
static PBExtensionField* UnittestRoot_packedFloatExtension = nil;
static PBExtensionField* UnittestRoot_packedDoubleExtension = nil;
static PBExtensionField* UnittestRoot_packedBoolExtension = nil;
static PBExtensionField* UnittestRoot_packedEnumExtension = nil;
static PBExtensionField* TestNestedExtension_test = nil;
static PBExtensionField* TestRequired_single = nil;
static PBExtensionField* TestRequired_multi = nil;
static PBExtensionField* TestParsingMerge_optionalExt = nil;
static PBExtensionField* TestParsingMerge_repeatedExt = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UnittestRoot class]) {
    UnittestRoot_optionalInt32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:1
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalInt64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:2
                             defaultValue:@(0L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:3
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalUint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:4
                             defaultValue:@(0L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:5
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalSint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:6
                             defaultValue:@(0L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:7
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalFixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:8
                             defaultValue:@(0L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:9
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalSfixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:10
                             defaultValue:@(0L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalFloatExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeFloat
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:11
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalDoubleExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeDouble
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:12
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalBoolExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBool
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:13
                             defaultValue:@(NO)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:14
                             defaultValue:@""
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalBytesExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBytes
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:15
                             defaultValue:[NSData data]
                      messageOrGroupClass:[NSData class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_OptionalGroupExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeGroup
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:16
                             defaultValue:[OptionalGroup_extension defaultInstance]
                      messageOrGroupClass:[OptionalGroup_extension class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:18
                             defaultValue:[TestAllTypes_NestedMessage defaultInstance]
                      messageOrGroupClass:[TestAllTypes_NestedMessage class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:19
                             defaultValue:[ForeignMessage defaultInstance]
                      messageOrGroupClass:[ForeignMessage class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:20
                             defaultValue:[ImportMessage defaultInstance]
                      messageOrGroupClass:[ImportMessage class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalNestedEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:21
                             defaultValue:@(TestAllTypes_NestedEnumFOO)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalForeignEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:22
                             defaultValue:@(ForeignEnumFOREIGNFOO)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalImportEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:23
                             defaultValue:@(ImportEnumIMPORTFOO)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalStringPieceExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:24
                             defaultValue:@""
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalCordExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:25
                             defaultValue:@""
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalPublicImportMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:26
                             defaultValue:[PublicImportMessage defaultInstance]
                      messageOrGroupClass:[PublicImportMessage class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_optionalLazyMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:27
                             defaultValue:[TestAllTypes_NestedMessage defaultInstance]
                      messageOrGroupClass:[TestAllTypes_NestedMessage class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:31
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedInt64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:32
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:33
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedUint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:34
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:35
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:36
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:37
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:38
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:39
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedSfixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:40
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedFloatExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeFloat
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:41
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedDoubleExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeDouble
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:42
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBoolExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBool
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:43
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:44
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSString class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedBytesExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBytes
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:45
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSData class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_RepeatedGroupExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeGroup
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:46
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[RepeatedGroup_extension class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:48
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[TestAllTypes_NestedMessage class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:49
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[ForeignMessage class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:50
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[ImportMessage class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedNestedEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:51
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedForeignEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:52
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedImportEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:53
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedStringPieceExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:54
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSString class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedCordExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:55
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSString class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_repeatedLazyMessageExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:57
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[TestAllTypes_NestedMessage class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:61
                             defaultValue:@(41)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultInt64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:62
                             defaultValue:@(42L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:63
                             defaultValue:@(43)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultUint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:64
                             defaultValue:@(44L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:65
                             defaultValue:@(-45)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultSint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:66
                             defaultValue:@(46L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:67
                             defaultValue:@(47)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultFixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:68
                             defaultValue:@(48L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed32
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:69
                             defaultValue:@(49)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultSfixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed64
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:70
                             defaultValue:@(-50L)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultFloatExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeFloat
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:71
                             defaultValue:@(51.5)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultDoubleExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeDouble
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:72
                             defaultValue:@(52000)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultBoolExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBool
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:73
                             defaultValue:@(YES)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:74
                             defaultValue:@"hello"
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultBytesExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBytes
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:75
                             defaultValue:[NSData dataWithBytes:"world" length:5]
                      messageOrGroupClass:[NSData class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultNestedEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:81
                             defaultValue:@(TestAllTypes_NestedEnumBAR)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultForeignEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:82
                             defaultValue:@(ForeignEnumFOREIGNBAR)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultImportEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:83
                             defaultValue:@(ImportEnumIMPORTBAR)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultStringPieceExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:84
                             defaultValue:@"abc"
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_defaultCordExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:85
                             defaultValue:@"123"
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionString =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestFieldOrderings class]
                              fieldNumber:50
                             defaultValue:@""
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_myExtensionInt =
      [PBExtensionField extensionWithType:PBExtensionTypeInt32
                            extendedClass:[TestFieldOrderings class]
                              fieldNumber:5
                             defaultValue:@(0)
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedInt32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt32
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:90
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedInt64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeInt64
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:91
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedUint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt32
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:92
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedUint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeUInt64
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:93
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedSint32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt32
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:94
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedSint64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSInt64
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:95
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed32
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:96
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedFixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeFixed64
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:97
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeUInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed32Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed32
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:98
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt32]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedSfixed64Extension =
      [PBExtensionField extensionWithType:PBExtensionTypeSFixed64
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:99
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeInt64]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedFloatExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeFloat
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:100
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeFloat]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedDoubleExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeDouble
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:101
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeDouble]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedBoolExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeBool
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:102
                             defaultValue:[PBArray arrayWithValueType:PBArrayValueTypeBool]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    UnittestRoot_packedEnumExtension =
      [PBExtensionField extensionWithType:PBExtensionTypeEnum
                            extendedClass:[TestPackedExtensions class]
                              fieldNumber:103
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[NSNumber class]
                               isRepeated:YES
                                 isPacked:YES
                   isMessageSetWireFormat:NO];
    TestNestedExtension_test =
      [PBExtensionField extensionWithType:PBExtensionTypeString
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:1002
                             defaultValue:@"test"
                      messageOrGroupClass:[NSString class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    TestRequired_single =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:1000
                             defaultValue:[TestRequired defaultInstance]
                      messageOrGroupClass:[TestRequired class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    TestRequired_multi =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestAllExtensions class]
                              fieldNumber:1001
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[TestRequired class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    TestParsingMerge_optionalExt =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestParsingMerge class]
                              fieldNumber:1000
                             defaultValue:[TestAllTypes defaultInstance]
                      messageOrGroupClass:[TestAllTypes class]
                               isRepeated:NO
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    TestParsingMerge_repeatedExt =
      [PBExtensionField extensionWithType:PBExtensionTypeMessage
                            extendedClass:[TestParsingMerge class]
                              fieldNumber:1001
                             defaultValue:[[NSArray alloc] init]
                      messageOrGroupClass:[TestAllTypes class]
                               isRepeated:YES
                                 isPacked:NO
                   isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UnittestImportRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}

+ (void)registerAllExtensions:(PBMutableExtensionRegistry*)registry {
  [registry addExtension:UnittestRoot_optionalInt32Extension];
  [registry addExtension:UnittestRoot_optionalInt64Extension];
  [registry addExtension:UnittestRoot_optionalUint32Extension];
  [registry addExtension:UnittestRoot_optionalUint64Extension];
  [registry addExtension:UnittestRoot_optionalSint32Extension];
  [registry addExtension:UnittestRoot_optionalSint64Extension];
  [registry addExtension:UnittestRoot_optionalFixed32Extension];
  [registry addExtension:UnittestRoot_optionalFixed64Extension];
  [registry addExtension:UnittestRoot_optionalSfixed32Extension];
  [registry addExtension:UnittestRoot_optionalSfixed64Extension];
  [registry addExtension:UnittestRoot_optionalFloatExtension];
  [registry addExtension:UnittestRoot_optionalDoubleExtension];
  [registry addExtension:UnittestRoot_optionalBoolExtension];
  [registry addExtension:UnittestRoot_optionalStringExtension];
  [registry addExtension:UnittestRoot_optionalBytesExtension];
  [registry addExtension:UnittestRoot_OptionalGroupExtension];
  [registry addExtension:UnittestRoot_optionalNestedMessageExtension];
  [registry addExtension:UnittestRoot_optionalForeignMessageExtension];
  [registry addExtension:UnittestRoot_optionalImportMessageExtension];
  [registry addExtension:UnittestRoot_optionalNestedEnumExtension];
  [registry addExtension:UnittestRoot_optionalForeignEnumExtension];
  [registry addExtension:UnittestRoot_optionalImportEnumExtension];
  [registry addExtension:UnittestRoot_optionalStringPieceExtension];
  [registry addExtension:UnittestRoot_optionalCordExtension];
  [registry addExtension:UnittestRoot_optionalPublicImportMessageExtension];
  [registry addExtension:UnittestRoot_optionalLazyMessageExtension];
  [registry addExtension:UnittestRoot_repeatedInt32Extension];
  [registry addExtension:UnittestRoot_repeatedInt64Extension];
  [registry addExtension:UnittestRoot_repeatedUint32Extension];
  [registry addExtension:UnittestRoot_repeatedUint64Extension];
  [registry addExtension:UnittestRoot_repeatedSint32Extension];
  [registry addExtension:UnittestRoot_repeatedSint64Extension];
  [registry addExtension:UnittestRoot_repeatedFixed32Extension];
  [registry addExtension:UnittestRoot_repeatedFixed64Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed32Extension];
  [registry addExtension:UnittestRoot_repeatedSfixed64Extension];
  [registry addExtension:UnittestRoot_repeatedFloatExtension];
  [registry addExtension:UnittestRoot_repeatedDoubleExtension];
  [registry addExtension:UnittestRoot_repeatedBoolExtension];
  [registry addExtension:UnittestRoot_repeatedStringExtension];
  [registry addExtension:UnittestRoot_repeatedBytesExtension];
  [registry addExtension:UnittestRoot_RepeatedGroupExtension];
  [registry addExtension:UnittestRoot_repeatedNestedMessageExtension];
  [registry addExtension:UnittestRoot_repeatedForeignMessageExtension];
  [registry addExtension:UnittestRoot_repeatedImportMessageExtension];
  [registry addExtension:UnittestRoot_repeatedNestedEnumExtension];
  [registry addExtension:UnittestRoot_repeatedForeignEnumExtension];
  [registry addExtension:UnittestRoot_repeatedImportEnumExtension];
  [registry addExtension:UnittestRoot_repeatedStringPieceExtension];
  [registry addExtension:UnittestRoot_repeatedCordExtension];
  [registry addExtension:UnittestRoot_repeatedLazyMessageExtension];
  [registry addExtension:UnittestRoot_defaultInt32Extension];
  [registry addExtension:UnittestRoot_defaultInt64Extension];
  [registry addExtension:UnittestRoot_defaultUint32Extension];
  [registry addExtension:UnittestRoot_defaultUint64Extension];
  [registry addExtension:UnittestRoot_defaultSint32Extension];
  [registry addExtension:UnittestRoot_defaultSint64Extension];
  [registry addExtension:UnittestRoot_defaultFixed32Extension];
  [registry addExtension:UnittestRoot_defaultFixed64Extension];
  [registry addExtension:UnittestRoot_defaultSfixed32Extension];
  [registry addExtension:UnittestRoot_defaultSfixed64Extension];
  [registry addExtension:UnittestRoot_defaultFloatExtension];
  [registry addExtension:UnittestRoot_defaultDoubleExtension];
  [registry addExtension:UnittestRoot_defaultBoolExtension];
  [registry addExtension:UnittestRoot_defaultStringExtension];
  [registry addExtension:UnittestRoot_defaultBytesExtension];
  [registry addExtension:UnittestRoot_defaultNestedEnumExtension];
  [registry addExtension:UnittestRoot_defaultForeignEnumExtension];
  [registry addExtension:UnittestRoot_defaultImportEnumExtension];
  [registry addExtension:UnittestRoot_defaultStringPieceExtension];
  [registry addExtension:UnittestRoot_defaultCordExtension];
  [registry addExtension:UnittestRoot_myExtensionString];
  [registry addExtension:UnittestRoot_myExtensionInt];
  [registry addExtension:UnittestRoot_packedInt32Extension];
  [registry addExtension:UnittestRoot_packedInt64Extension];
  [registry addExtension:UnittestRoot_packedUint32Extension];
  [registry addExtension:UnittestRoot_packedUint64Extension];
  [registry addExtension:UnittestRoot_packedSint32Extension];
  [registry addExtension:UnittestRoot_packedSint64Extension];
  [registry addExtension:UnittestRoot_packedFixed32Extension];
  [registry addExtension:UnittestRoot_packedFixed64Extension];
  [registry addExtension:UnittestRoot_packedSfixed32Extension];
  [registry addExtension:UnittestRoot_packedSfixed64Extension];
  [registry addExtension:UnittestRoot_packedFloatExtension];
  [registry addExtension:UnittestRoot_packedDoubleExtension];
  [registry addExtension:UnittestRoot_packedBoolExtension];
  [registry addExtension:UnittestRoot_packedEnumExtension];
  [registry addExtension:TestNestedExtension_test];
  [registry addExtension:TestRequired_single];
  [registry addExtension:TestRequired_multi];
  [registry addExtension:TestParsingMerge_optionalExt];
  [registry addExtension:TestParsingMerge_repeatedExt];
}

+ (PBExtensionField *)optionalInt32Extension {
  return UnittestRoot_optionalInt32Extension;
}
+ (PBExtensionField *)optionalInt64Extension {
  return UnittestRoot_optionalInt64Extension;
}
+ (PBExtensionField *)optionalUint32Extension {
  return UnittestRoot_optionalUint32Extension;
}
+ (PBExtensionField *)optionalUint64Extension {
  return UnittestRoot_optionalUint64Extension;
}
+ (PBExtensionField *)optionalSint32Extension {
  return UnittestRoot_optionalSint32Extension;
}
+ (PBExtensionField *)optionalSint64Extension {
  return UnittestRoot_optionalSint64Extension;
}
+ (PBExtensionField *)optionalFixed32Extension {
  return UnittestRoot_optionalFixed32Extension;
}
+ (PBExtensionField *)optionalFixed64Extension {
  return UnittestRoot_optionalFixed64Extension;
}
+ (PBExtensionField *)optionalSfixed32Extension {
  return UnittestRoot_optionalSfixed32Extension;
}
+ (PBExtensionField *)optionalSfixed64Extension {
  return UnittestRoot_optionalSfixed64Extension;
}
+ (PBExtensionField *)optionalFloatExtension {
  return UnittestRoot_optionalFloatExtension;
}
+ (PBExtensionField *)optionalDoubleExtension {
  return UnittestRoot_optionalDoubleExtension;
}
+ (PBExtensionField *)optionalBoolExtension {
  return UnittestRoot_optionalBoolExtension;
}
+ (PBExtensionField *)optionalStringExtension {
  return UnittestRoot_optionalStringExtension;
}
+ (PBExtensionField *)optionalBytesExtension {
  return UnittestRoot_optionalBytesExtension;
}
+ (PBExtensionField *)OptionalGroupExtension {
  return UnittestRoot_OptionalGroupExtension;
}
+ (PBExtensionField *)optionalNestedMessageExtension {
  return UnittestRoot_optionalNestedMessageExtension;
}
+ (PBExtensionField *)optionalForeignMessageExtension {
  return UnittestRoot_optionalForeignMessageExtension;
}
+ (PBExtensionField *)optionalImportMessageExtension {
  return UnittestRoot_optionalImportMessageExtension;
}
+ (PBExtensionField *)optionalNestedEnumExtension {
  return UnittestRoot_optionalNestedEnumExtension;
}
+ (PBExtensionField *)optionalForeignEnumExtension {
  return UnittestRoot_optionalForeignEnumExtension;
}
+ (PBExtensionField *)optionalImportEnumExtension {
  return UnittestRoot_optionalImportEnumExtension;
}
+ (PBExtensionField *)optionalStringPieceExtension {
  return UnittestRoot_optionalStringPieceExtension;
}
+ (PBExtensionField *)optionalCordExtension {
  return UnittestRoot_optionalCordExtension;
}
+ (PBExtensionField *)optionalPublicImportMessageExtension {
  return UnittestRoot_optionalPublicImportMessageExtension;
}
+ (PBExtensionField *)optionalLazyMessageExtension {
  return UnittestRoot_optionalLazyMessageExtension;
}
+ (PBExtensionField *)repeatedInt32Extension {
  return UnittestRoot_repeatedInt32Extension;
}
+ (PBExtensionField *)repeatedInt64Extension {
  return UnittestRoot_repeatedInt64Extension;
}
+ (PBExtensionField *)repeatedUint32Extension {
  return UnittestRoot_repeatedUint32Extension;
}
+ (PBExtensionField *)repeatedUint64Extension {
  return UnittestRoot_repeatedUint64Extension;
}
+ (PBExtensionField *)repeatedSint32Extension {
  return UnittestRoot_repeatedSint32Extension;
}
+ (PBExtensionField *)repeatedSint64Extension {
  return UnittestRoot_repeatedSint64Extension;
}
+ (PBExtensionField *)repeatedFixed32Extension {
  return UnittestRoot_repeatedFixed32Extension;
}
+ (PBExtensionField *)repeatedFixed64Extension {
  return UnittestRoot_repeatedFixed64Extension;
}
+ (PBExtensionField *)repeatedSfixed32Extension {
  return UnittestRoot_repeatedSfixed32Extension;
}
+ (PBExtensionField *)repeatedSfixed64Extension {
  return UnittestRoot_repeatedSfixed64Extension;
}
+ (PBExtensionField *)repeatedFloatExtension {
  return UnittestRoot_repeatedFloatExtension;
}
+ (PBExtensionField *)repeatedDoubleExtension {
  return UnittestRoot_repeatedDoubleExtension;
}
+ (PBExtensionField *)repeatedBoolExtension {
  return UnittestRoot_repeatedBoolExtension;
}
+ (PBExtensionField *)repeatedStringExtension {
  return UnittestRoot_repeatedStringExtension;
}
+ (PBExtensionField *)repeatedBytesExtension {
  return UnittestRoot_repeatedBytesExtension;
}
+ (PBExtensionField *)RepeatedGroupExtension {
  return UnittestRoot_RepeatedGroupExtension;
}
+ (PBExtensionField *)repeatedNestedMessageExtension {
  return UnittestRoot_repeatedNestedMessageExtension;
}
+ (PBExtensionField *)repeatedForeignMessageExtension {
  return UnittestRoot_repeatedForeignMessageExtension;
}
+ (PBExtensionField *)repeatedImportMessageExtension {
  return UnittestRoot_repeatedImportMessageExtension;
}
+ (PBExtensionField *)repeatedNestedEnumExtension {
  return UnittestRoot_repeatedNestedEnumExtension;
}
+ (PBExtensionField *)repeatedForeignEnumExtension {
  return UnittestRoot_repeatedForeignEnumExtension;
}
+ (PBExtensionField *)repeatedImportEnumExtension {
  return UnittestRoot_repeatedImportEnumExtension;
}
+ (PBExtensionField *)repeatedStringPieceExtension {
  return UnittestRoot_repeatedStringPieceExtension;
}
+ (PBExtensionField *)repeatedCordExtension {
  return UnittestRoot_repeatedCordExtension;
}
+ (PBExtensionField *)repeatedLazyMessageExtension {
  return UnittestRoot_repeatedLazyMessageExtension;
}
+ (PBExtensionField *)defaultInt32Extension {
  return UnittestRoot_defaultInt32Extension;
}
+ (PBExtensionField *)defaultInt64Extension {
  return UnittestRoot_defaultInt64Extension;
}
+ (PBExtensionField *)defaultUint32Extension {
  return UnittestRoot_defaultUint32Extension;
}
+ (PBExtensionField *)defaultUint64Extension {
  return UnittestRoot_defaultUint64Extension;
}
+ (PBExtensionField *)defaultSint32Extension {
  return UnittestRoot_defaultSint32Extension;
}
+ (PBExtensionField *)defaultSint64Extension {
  return UnittestRoot_defaultSint64Extension;
}
+ (PBExtensionField *)defaultFixed32Extension {
  return UnittestRoot_defaultFixed32Extension;
}
+ (PBExtensionField *)defaultFixed64Extension {
  return UnittestRoot_defaultFixed64Extension;
}
+ (PBExtensionField *)defaultSfixed32Extension {
  return UnittestRoot_defaultSfixed32Extension;
}
+ (PBExtensionField *)defaultSfixed64Extension {
  return UnittestRoot_defaultSfixed64Extension;
}
+ (PBExtensionField *)defaultFloatExtension {
  return UnittestRoot_defaultFloatExtension;
}
+ (PBExtensionField *)defaultDoubleExtension {
  return UnittestRoot_defaultDoubleExtension;
}
+ (PBExtensionField *)defaultBoolExtension {
  return UnittestRoot_defaultBoolExtension;
}
+ (PBExtensionField *)defaultStringExtension {
  return UnittestRoot_defaultStringExtension;
}
+ (PBExtensionField *)defaultBytesExtension {
  return UnittestRoot_defaultBytesExtension;
}
+ (PBExtensionField *)defaultNestedEnumExtension {
  return UnittestRoot_defaultNestedEnumExtension;
}
+ (PBExtensionField *)defaultForeignEnumExtension {
  return UnittestRoot_defaultForeignEnumExtension;
}
+ (PBExtensionField *)defaultImportEnumExtension {
  return UnittestRoot_defaultImportEnumExtension;
}
+ (PBExtensionField *)defaultStringPieceExtension {
  return UnittestRoot_defaultStringPieceExtension;
}
+ (PBExtensionField *)defaultCordExtension {
  return UnittestRoot_defaultCordExtension;
}
+ (PBExtensionField *)myExtensionString {
  return UnittestRoot_myExtensionString;
}
+ (PBExtensionField *)myExtensionInt {
  return UnittestRoot_myExtensionInt;
}
+ (PBExtensionField *)packedInt32Extension {
  return UnittestRoot_packedInt32Extension;
}
+ (PBExtensionField *)packedInt64Extension {
  return UnittestRoot_packedInt64Extension;
}
+ (PBExtensionField *)packedUint32Extension {
  return UnittestRoot_packedUint32Extension;
}
+ (PBExtensionField *)packedUint64Extension {
  return UnittestRoot_packedUint64Extension;
}
+ (PBExtensionField *)packedSint32Extension {
  return UnittestRoot_packedSint32Extension;
}
+ (PBExtensionField *)packedSint64Extension {
  return UnittestRoot_packedSint64Extension;
}
+ (PBExtensionField *)packedFixed32Extension {
  return UnittestRoot_packedFixed32Extension;
}
+ (PBExtensionField *)packedFixed64Extension {
  return UnittestRoot_packedFixed64Extension;
}
+ (PBExtensionField *)packedSfixed32Extension {
  return UnittestRoot_packedSfixed32Extension;
}
+ (PBExtensionField *)packedSfixed64Extension {
  return UnittestRoot_packedSfixed64Extension;
}
+ (PBExtensionField *)packedFloatExtension {
  return UnittestRoot_packedFloatExtension;
}
+ (PBExtensionField *)packedDoubleExtension {
  return UnittestRoot_packedDoubleExtension;
}
+ (PBExtensionField *)packedBoolExtension {
  return UnittestRoot_packedBoolExtension;
}
+ (PBExtensionField *)packedEnumExtension {
  return UnittestRoot_packedEnumExtension;
}

@end

BOOL ForeignEnumIsValidValue(ForeignEnum value) {
  switch (value) {
    case ForeignEnumFOREIGNFOO:
    case ForeignEnumFOREIGNBAR:
    case ForeignEnumFOREIGNBAZ:
      return YES;
    default:
      return NO;
  }
}
BOOL TestEnumWithDupValueIsValidValue(TestEnumWithDupValue value) {
  switch (value) {
    case TestEnumWithDupValueFOO1:
    case TestEnumWithDupValueBAR1:
    case TestEnumWithDupValueBAZ:
      return YES;
    default:
      return NO;
  }
}
BOOL TestSparseEnumIsValidValue(TestSparseEnum value) {
  switch (value) {
    case TestSparseEnumSPARSEA:
    case TestSparseEnumSPARSEB:
    case TestSparseEnumSPARSEC:
    case TestSparseEnumSPARSED:
    case TestSparseEnumSPARSEE:
    case TestSparseEnumSPARSEF:
    case TestSparseEnumSPARSEG:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TestAllTypes

BOOL TestAllTypes_NestedEnumIsValidValue(TestAllTypes_NestedEnum value) {
  switch (value) {
    case TestAllTypes_NestedEnumFOO:
    case TestAllTypes_NestedEnumBAR:
    case TestAllTypes_NestedEnumBAZ:
      return YES;
    default:
      return NO;
  }
}

@interface TestAllTypes ()

@property int32_t optionalInt32;
@property int64_t optionalInt64;
@property uint32_t optionalUint32;
@property uint64_t optionalUint64;
@property int32_t optionalSint32;
@property int64_t optionalSint64;
@property uint32_t optionalFixed32;
@property uint64_t optionalFixed64;
@property int32_t optionalSfixed32;
@property int64_t optionalSfixed64;
@property Float32 optionalFloat;
@property Float64 optionalDouble;
@property BOOL optionalBool;
@property (strong) NSString * optionalString;
@property (strong) NSData * optionalBytes;
@property (strong) TestAllTypes_OptionalGroup* OptionalGroup;
@property (strong) TestAllTypes_NestedMessage* optionalNestedMessage;
@property (strong) ForeignMessage* optionalForeignMessage;
@property (strong) ImportMessage* optionalImportMessage;
@property TestAllTypes_NestedEnum optionalNestedEnum;
@property ForeignEnum optionalForeignEnum;
@property ImportEnum optionalImportEnum;
@property (strong) NSString * optionalStringPiece;
@property (strong) NSString * optionalCord;
@property (strong) PublicImportMessage* optionalPublicImportMessage;
@property (strong) TestAllTypes_NestedMessage* optionalLazyMessage;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedUint32Array;
@property (strong) PBAppendableArray * repeatedUint64Array;
@property (strong) PBAppendableArray * repeatedSint32Array;
@property (strong) PBAppendableArray * repeatedSint64Array;
@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedSfixed32Array;
@property (strong) PBAppendableArray * repeatedSfixed64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedDoubleArray;
@property (strong) PBAppendableArray * repeatedBoolArray;
@property (strong) NSMutableArray * repeatedStringArray;
@property (strong) NSMutableArray * repeatedBytesArray;
@property (strong) NSMutableArray *RepeatedGroupArray;
@property (strong) NSMutableArray *repeatedNestedMessageArray;
@property (strong) NSMutableArray *repeatedForeignMessageArray;
@property (strong) NSMutableArray *repeatedImportMessageArray;
@property (strong) NSMutableArray *repeatedNestedEnumArray;
@property (strong) NSMutableArray *repeatedForeignEnumArray;
@property (strong) NSMutableArray *repeatedImportEnumArray;
@property (strong) NSMutableArray * repeatedStringPieceArray;
@property (strong) NSMutableArray * repeatedCordArray;
@property (strong) NSMutableArray *repeatedLazyMessageArray;
@property int32_t defaultInt32;
@property int64_t defaultInt64;
@property uint32_t defaultUint32;
@property uint64_t defaultUint64;
@property int32_t defaultSint32;
@property int64_t defaultSint64;
@property uint32_t defaultFixed32;
@property uint64_t defaultFixed64;
@property int32_t defaultSfixed32;
@property int64_t defaultSfixed64;
@property Float32 defaultFloat;
@property Float64 defaultDouble;
@property BOOL defaultBool;
@property (strong) NSString * defaultString;
@property (strong) NSData * defaultBytes;
@property TestAllTypes_NestedEnum defaultNestedEnum;
@property ForeignEnum defaultForeignEnum;
@property ImportEnum defaultImportEnum;
@property (strong) NSString * defaultStringPiece;
@property (strong) NSString * defaultCord;

@end

@implementation TestAllTypes {
  BOOL _hasDefaultBool:1;
  BOOL _hasOptionalBool:1;
  BOOL _hasDefaultDouble:1;
  BOOL _hasOptionalDouble:1;
  BOOL _hasDefaultFloat:1;
  BOOL _hasOptionalFloat:1;
  BOOL _hasOptionalInt64:1;
  BOOL _hasDefaultInt64:1;
  BOOL _hasOptionalUint64:1;
  BOOL _hasDefaultUint64:1;
  BOOL _hasOptionalInt32:1;
  BOOL _hasDefaultInt32:1;
  BOOL _hasOptionalFixed64:1;
  BOOL _hasDefaultFixed64:1;
  BOOL _hasOptionalFixed32:1;
  BOOL _hasDefaultFixed32:1;
  BOOL _hasDefaultCord:1;
  BOOL _hasOptionalStringPiece:1;
  BOOL _hasOptionalCord:1;
  BOOL _hasOptionalString:1;
  BOOL _hasDefaultStringPiece:1;
  BOOL _hasDefaultString:1;
  BOOL _hasOptionalGroup:1;
  BOOL _hasOptionalForeignMessage:1;
  BOOL _hasOptionalImportMessage:1;
  BOOL _hasOptionalPublicImportMessage:1;
  BOOL _hasOptionalLazyMessage:1;
  BOOL _hasOptionalNestedMessage:1;
  BOOL _hasOptionalBytes:1;
  BOOL _hasDefaultBytes:1;
  BOOL _hasDefaultUint32:1;
  BOOL _hasOptionalUint32:1;
  BOOL _hasOptionalNestedEnum:1;
  BOOL _hasOptionalForeignEnum:1;
  BOOL _hasOptionalImportEnum:1;
  BOOL _hasDefaultImportEnum:1;
  BOOL _hasDefaultForeignEnum:1;
  BOOL _hasDefaultNestedEnum:1;
  BOOL _hasOptionalSfixed32:1;
  BOOL _hasDefaultSfixed32:1;
  BOOL _hasOptionalSfixed64:1;
  BOOL _hasDefaultSfixed64:1;
  BOOL _hasOptionalSint32:1;
  BOOL _hasDefaultSint32:1;
  BOOL _hasOptionalSint64:1;
  BOOL _hasDefaultSint64:1;
  PBAppendableArray *_repeatedBoolArray;
  PBAppendableArray *_repeatedDoubleArray;
  PBAppendableArray *_repeatedFloatArray;
  PBAppendableArray *_repeatedInt64Array;
  PBAppendableArray *_repeatedUint64Array;
  PBAppendableArray *_repeatedInt32Array;
  PBAppendableArray *_repeatedFixed64Array;
  PBAppendableArray *_repeatedFixed32Array;
  NSMutableArray *_repeatedStringArray;
  NSMutableArray *_repeatedStringPieceArray;
  NSMutableArray *_repeatedCordArray;
  NSMutableArray *_RepeatedGroupArray;
  NSMutableArray *_repeatedLazyMessageArray;
  NSMutableArray *_repeatedImportMessageArray;
  NSMutableArray *_repeatedForeignMessageArray;
  NSMutableArray *_repeatedNestedMessageArray;
  NSMutableArray *_repeatedBytesArray;
  PBAppendableArray *_repeatedUint32Array;
  NSMutableArray * _repeatedImportEnumArray;
  NSMutableArray * _repeatedForeignEnumArray;
  NSMutableArray * _repeatedNestedEnumArray;
  PBAppendableArray *_repeatedSfixed32Array;
  PBAppendableArray *_repeatedSfixed64Array;
  PBAppendableArray *_repeatedSint32Array;
  PBAppendableArray *_repeatedSint64Array;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _optionalInt32 = 0;
    _optionalInt64 = 0L;
    _optionalUint32 = 0;
    _optionalUint64 = 0L;
    _optionalSint32 = 0;
    _optionalSint64 = 0L;
    _optionalFixed32 = 0;
    _optionalFixed64 = 0L;
    _optionalSfixed32 = 0;
    _optionalSfixed64 = 0L;
    _optionalFloat = 0;
    _optionalDouble = 0;
    _optionalBool = NO;
    _optionalString = @"";
    _optionalBytes = [NSData data];
    _OptionalGroup = [TestAllTypes_OptionalGroup defaultInstance];
    _optionalNestedMessage = [TestAllTypes_NestedMessage defaultInstance];
    _optionalForeignMessage = [ForeignMessage defaultInstance];
    _optionalImportMessage = [ImportMessage defaultInstance];
    _optionalNestedEnum = TestAllTypes_NestedEnumFOO;
    _optionalForeignEnum = ForeignEnumFOREIGNFOO;
    _optionalImportEnum = ImportEnumIMPORTFOO;
    _optionalStringPiece = @"";
    _optionalCord = @"";
    _optionalPublicImportMessage = [PublicImportMessage defaultInstance];
    _optionalLazyMessage = [TestAllTypes_NestedMessage defaultInstance];
    _defaultInt32 = 41;
    _defaultInt64 = 42L;
    _defaultUint32 = 43;
    _defaultUint64 = 44L;
    _defaultSint32 = -45;
    _defaultSint64 = 46L;
    _defaultFixed32 = 47;
    _defaultFixed64 = 48L;
    _defaultSfixed32 = 49;
    _defaultSfixed64 = -50L;
    _defaultFloat = 51.5;
    _defaultDouble = 52000;
    _defaultBool = YES;
    _defaultString = @"hello";
    _defaultBytes = [NSData dataWithBytes:"world" length:5];
    _defaultNestedEnum = TestAllTypes_NestedEnumBAR;
    _defaultForeignEnum = ForeignEnumFOREIGNBAR;
    _defaultImportEnum = ImportEnumIMPORTBAR;
    _defaultStringPiece = @"abc";
    _defaultCord = @"123";
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasOptionalInt32 {
  return !!_hasOptionalInt32;
}
- (void)setHasOptionalInt32:(BOOL)value {
  _hasOptionalInt32 = !!value;
}
- (BOOL)hasOptionalInt64 {
  return !!_hasOptionalInt64;
}
- (void)setHasOptionalInt64:(BOOL)value {
  _hasOptionalInt64 = !!value;
}
- (BOOL)hasOptionalUint32 {
  return !!_hasOptionalUint32;
}
- (void)setHasOptionalUint32:(BOOL)value {
  _hasOptionalUint32 = !!value;
}
- (BOOL)hasOptionalUint64 {
  return !!_hasOptionalUint64;
}
- (void)setHasOptionalUint64:(BOOL)value {
  _hasOptionalUint64 = !!value;
}
- (BOOL)hasOptionalSint32 {
  return !!_hasOptionalSint32;
}
- (void)setHasOptionalSint32:(BOOL)value {
  _hasOptionalSint32 = !!value;
}
- (BOOL)hasOptionalSint64 {
  return !!_hasOptionalSint64;
}
- (void)setHasOptionalSint64:(BOOL)value {
  _hasOptionalSint64 = !!value;
}
- (BOOL)hasOptionalFixed32 {
  return !!_hasOptionalFixed32;
}
- (void)setHasOptionalFixed32:(BOOL)value {
  _hasOptionalFixed32 = !!value;
}
- (BOOL)hasOptionalFixed64 {
  return !!_hasOptionalFixed64;
}
- (void)setHasOptionalFixed64:(BOOL)value {
  _hasOptionalFixed64 = !!value;
}
- (BOOL)hasOptionalSfixed32 {
  return !!_hasOptionalSfixed32;
}
- (void)setHasOptionalSfixed32:(BOOL)value {
  _hasOptionalSfixed32 = !!value;
}
- (BOOL)hasOptionalSfixed64 {
  return !!_hasOptionalSfixed64;
}
- (void)setHasOptionalSfixed64:(BOOL)value {
  _hasOptionalSfixed64 = !!value;
}
- (BOOL)hasOptionalFloat {
  return !!_hasOptionalFloat;
}
- (void)setHasOptionalFloat:(BOOL)value {
  _hasOptionalFloat = !!value;
}
- (BOOL)hasOptionalDouble {
  return !!_hasOptionalDouble;
}
- (void)setHasOptionalDouble:(BOOL)value {
  _hasOptionalDouble = !!value;
}
- (BOOL)hasOptionalBool {
  return !!_hasOptionalBool;
}
- (void)setHasOptionalBool:(BOOL)value {
  _hasOptionalBool = !!value;
}
- (BOOL)hasOptionalString {
  return !!_hasOptionalString;
}
- (void)setHasOptionalString:(BOOL)value {
  _hasOptionalString = !!value;
}
- (BOOL)hasOptionalBytes {
  return !!_hasOptionalBytes;
}
- (void)setHasOptionalBytes:(BOOL)value {
  _hasOptionalBytes = !!value;
}
- (BOOL)hasOptionalGroup {
  return !!_hasOptionalGroup;
}
- (void)setHasOptionalGroup:(BOOL)value {
  _hasOptionalGroup = !!value;
}

- (BOOL)hasOptionalNestedMessage {
  return !!_hasOptionalNestedMessage;
}
- (void)setHasOptionalNestedMessage:(BOOL)value {
  _hasOptionalNestedMessage = !!value;
}

- (BOOL)hasOptionalForeignMessage {
  return !!_hasOptionalForeignMessage;
}
- (void)setHasOptionalForeignMessage:(BOOL)value {
  _hasOptionalForeignMessage = !!value;
}

- (BOOL)hasOptionalImportMessage {
  return !!_hasOptionalImportMessage;
}
- (void)setHasOptionalImportMessage:(BOOL)value {
  _hasOptionalImportMessage = !!value;
}

- (BOOL)hasOptionalNestedEnum {
  return !!_hasOptionalNestedEnum;
}
- (void)setHasOptionalNestedEnum:(BOOL)value {
  _hasOptionalNestedEnum = !!value;
}
- (BOOL)hasOptionalForeignEnum {
  return !!_hasOptionalForeignEnum;
}
- (void)setHasOptionalForeignEnum:(BOOL)value {
  _hasOptionalForeignEnum = !!value;
}
- (BOOL)hasOptionalImportEnum {
  return !!_hasOptionalImportEnum;
}
- (void)setHasOptionalImportEnum:(BOOL)value {
  _hasOptionalImportEnum = !!value;
}
- (BOOL)hasOptionalStringPiece {
  return !!_hasOptionalStringPiece;
}
- (void)setHasOptionalStringPiece:(BOOL)value {
  _hasOptionalStringPiece = !!value;
}
- (BOOL)hasOptionalCord {
  return !!_hasOptionalCord;
}
- (void)setHasOptionalCord:(BOOL)value {
  _hasOptionalCord = !!value;
}
- (BOOL)hasOptionalPublicImportMessage {
  return !!_hasOptionalPublicImportMessage;
}
- (void)setHasOptionalPublicImportMessage:(BOOL)value {
  _hasOptionalPublicImportMessage = !!value;
}

- (BOOL)hasOptionalLazyMessage {
  return !!_hasOptionalLazyMessage;
}
- (void)setHasOptionalLazyMessage:(BOOL)value {
  _hasOptionalLazyMessage = !!value;
}

@dynamic repeatedInt32;
@dynamic repeatedInt64;
@dynamic repeatedUint32;
@dynamic repeatedUint64;
@dynamic repeatedSint32;
@dynamic repeatedSint64;
@dynamic repeatedFixed32;
@dynamic repeatedFixed64;
@dynamic repeatedSfixed32;
@dynamic repeatedSfixed64;
@dynamic repeatedFloat;
@dynamic repeatedDouble;
@dynamic repeatedBool;
@dynamic repeatedString;
@dynamic repeatedBytes;
@dynamic RepeatedGroup;
@dynamic repeatedNestedMessage;
@dynamic repeatedForeignMessage;
@dynamic repeatedImportMessage;
@dynamic repeatedNestedEnum;
@dynamic repeatedForeignEnum;
@dynamic repeatedImportEnum;
@dynamic repeatedStringPiece;
@dynamic repeatedCord;
@dynamic repeatedLazyMessage;
- (BOOL)hasDefaultInt32 {
  return !!_hasDefaultInt32;
}
- (void)setHasDefaultInt32:(BOOL)value {
  _hasDefaultInt32 = !!value;
}
- (BOOL)hasDefaultInt64 {
  return !!_hasDefaultInt64;
}
- (void)setHasDefaultInt64:(BOOL)value {
  _hasDefaultInt64 = !!value;
}
- (BOOL)hasDefaultUint32 {
  return !!_hasDefaultUint32;
}
- (void)setHasDefaultUint32:(BOOL)value {
  _hasDefaultUint32 = !!value;
}
- (BOOL)hasDefaultUint64 {
  return !!_hasDefaultUint64;
}
- (void)setHasDefaultUint64:(BOOL)value {
  _hasDefaultUint64 = !!value;
}
- (BOOL)hasDefaultSint32 {
  return !!_hasDefaultSint32;
}
- (void)setHasDefaultSint32:(BOOL)value {
  _hasDefaultSint32 = !!value;
}
- (BOOL)hasDefaultSint64 {
  return !!_hasDefaultSint64;
}
- (void)setHasDefaultSint64:(BOOL)value {
  _hasDefaultSint64 = !!value;
}
- (BOOL)hasDefaultFixed32 {
  return !!_hasDefaultFixed32;
}
- (void)setHasDefaultFixed32:(BOOL)value {
  _hasDefaultFixed32 = !!value;
}
- (BOOL)hasDefaultFixed64 {
  return !!_hasDefaultFixed64;
}
- (void)setHasDefaultFixed64:(BOOL)value {
  _hasDefaultFixed64 = !!value;
}
- (BOOL)hasDefaultSfixed32 {
  return !!_hasDefaultSfixed32;
}
- (void)setHasDefaultSfixed32:(BOOL)value {
  _hasDefaultSfixed32 = !!value;
}
- (BOOL)hasDefaultSfixed64 {
  return !!_hasDefaultSfixed64;
}
- (void)setHasDefaultSfixed64:(BOOL)value {
  _hasDefaultSfixed64 = !!value;
}
- (BOOL)hasDefaultFloat {
  return !!_hasDefaultFloat;
}
- (void)setHasDefaultFloat:(BOOL)value {
  _hasDefaultFloat = !!value;
}
- (BOOL)hasDefaultDouble {
  return !!_hasDefaultDouble;
}
- (void)setHasDefaultDouble:(BOOL)value {
  _hasDefaultDouble = !!value;
}
- (BOOL)hasDefaultBool {
  return !!_hasDefaultBool;
}
- (void)setHasDefaultBool:(BOOL)value {
  _hasDefaultBool = !!value;
}
- (BOOL)hasDefaultString {
  return !!_hasDefaultString;
}
- (void)setHasDefaultString:(BOOL)value {
  _hasDefaultString = !!value;
}
- (BOOL)hasDefaultBytes {
  return !!_hasDefaultBytes;
}
- (void)setHasDefaultBytes:(BOOL)value {
  _hasDefaultBytes = !!value;
}
- (BOOL)hasDefaultNestedEnum {
  return !!_hasDefaultNestedEnum;
}
- (void)setHasDefaultNestedEnum:(BOOL)value {
  _hasDefaultNestedEnum = !!value;
}
- (BOOL)hasDefaultForeignEnum {
  return !!_hasDefaultForeignEnum;
}
- (void)setHasDefaultForeignEnum:(BOOL)value {
  _hasDefaultForeignEnum = !!value;
}
- (BOOL)hasDefaultImportEnum {
  return !!_hasDefaultImportEnum;
}
- (void)setHasDefaultImportEnum:(BOOL)value {
  _hasDefaultImportEnum = !!value;
}
- (BOOL)hasDefaultStringPiece {
  return !!_hasDefaultStringPiece;
}
- (void)setHasDefaultStringPiece:(BOOL)value {
  _hasDefaultStringPiece = !!value;
}
- (BOOL)hasDefaultCord {
  return !!_hasDefaultCord;
}
- (void)setHasDefaultCord:(BOOL)value {
  _hasDefaultCord = !!value;
}

- (PBArray *)repeatedInt32 {
  return _repeatedInt32Array;
}
- (int32_t)repeatedInt32AtIndex:(NSUInteger)index {
  return [_repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return _repeatedInt64Array;
}
- (int64_t)repeatedInt64AtIndex:(NSUInteger)index {
  return [_repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedUint32 {
  return _repeatedUint32Array;
}
- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index {
  return [_repeatedUint32Array uint32AtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return _repeatedUint64Array;
}
- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index {
  return [_repeatedUint64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSint32 {
  return _repeatedSint32Array;
}
- (int32_t)repeatedSint32AtIndex:(NSUInteger)index {
  return [_repeatedSint32Array int32AtIndex:index];
}
- (PBArray *)repeatedSint64 {
  return _repeatedSint64Array;
}
- (int64_t)repeatedSint64AtIndex:(NSUInteger)index {
  return [_repeatedSint64Array int64AtIndex:index];
}
- (PBArray *)repeatedFixed32 {
  return _repeatedFixed32Array;
}
- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index {
  return [_repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return _repeatedFixed64Array;
}
- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index {
  return [_repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedSfixed32 {
  return _repeatedSfixed32Array;
}
- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [_repeatedSfixed32Array int32AtIndex:index];
}
- (PBArray *)repeatedSfixed64 {
  return _repeatedSfixed64Array;
}
- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [_repeatedSfixed64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return _repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [_repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedDouble {
  return _repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [_repeatedDoubleArray doubleAtIndex:index];
}
- (PBArray *)repeatedBool {
  return _repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [_repeatedBoolArray boolAtIndex:index];
}
- (NSArray *)repeatedString {
  return _repeatedStringArray;
}
- (NSString *)repeatedStringAtIndex:(NSUInteger)index {
  return _repeatedStringArray[index];
}
- (NSArray *)repeatedBytes {
  return _repeatedBytesArray;
}
- (NSData *)repeatedBytesAtIndex:(NSUInteger)index {
  return _repeatedBytesArray[index];
}
- (NSArray *)RepeatedGroup {
  return _RepeatedGroupArray;
}
- (TestAllTypes_RepeatedGroup*)RepeatedGroupAtIndex:(NSUInteger)index {
  return _RepeatedGroupArray[index];
}
- (NSArray *)repeatedNestedMessage {
  return _repeatedNestedMessageArray;
}
- (TestAllTypes_NestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return _repeatedNestedMessageArray[index];
}
- (NSArray *)repeatedForeignMessage {
  return _repeatedForeignMessageArray;
}
- (ForeignMessage*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return _repeatedForeignMessageArray[index];
}
- (NSArray *)repeatedImportMessage {
  return _repeatedImportMessageArray;
}
- (ImportMessage*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return _repeatedImportMessageArray[index];
}
- (NSArray *)repeatedNestedEnum {
  return _repeatedNestedEnumArray;
}
- (TestAllTypes_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  NSNumber *value = _repeatedNestedEnumArray[index];
  return value.intValue;}
- (NSArray *)repeatedForeignEnum {
  return _repeatedForeignEnumArray;
}
- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index {
  NSNumber *value = _repeatedForeignEnumArray[index];
  return value.intValue;}
- (NSArray *)repeatedImportEnum {
  return _repeatedImportEnumArray;
}
- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index {
  NSNumber *value = _repeatedImportEnumArray[index];
  return value.intValue;}
- (NSArray *)repeatedStringPiece {
  return _repeatedStringPieceArray;
}
- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index {
  return _repeatedStringPieceArray[index];
}
- (NSArray *)repeatedCord {
  return _repeatedCordArray;
}
- (NSString *)repeatedCordAtIndex:(NSUInteger)index {
  return _repeatedCordArray[index];
}
- (NSArray *)repeatedLazyMessage {
  return _repeatedLazyMessageArray;
}
- (TestAllTypes_NestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return _repeatedLazyMessageArray[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasOptionalInt32) {
    [output writeInt32:1 value:self.optionalInt32];
  }
  if (self.hasOptionalInt64) {
    [output writeInt64:2 value:self.optionalInt64];
  }
  if (self.hasOptionalUint32) {
    [output writeUInt32:3 value:self.optionalUint32];
  }
  if (self.hasOptionalUint64) {
    [output writeUInt64:4 value:self.optionalUint64];
  }
  if (self.hasOptionalSint32) {
    [output writeSInt32:5 value:self.optionalSint32];
  }
  if (self.hasOptionalSint64) {
    [output writeSInt64:6 value:self.optionalSint64];
  }
  if (self.hasOptionalFixed32) {
    [output writeFixed32:7 value:self.optionalFixed32];
  }
  if (self.hasOptionalFixed64) {
    [output writeFixed64:8 value:self.optionalFixed64];
  }
  if (self.hasOptionalSfixed32) {
    [output writeSFixed32:9 value:self.optionalSfixed32];
  }
  if (self.hasOptionalSfixed64) {
    [output writeSFixed64:10 value:self.optionalSfixed64];
  }
  if (self.hasOptionalFloat) {
    [output writeFloat:11 value:self.optionalFloat];
  }
  if (self.hasOptionalDouble) {
    [output writeDouble:12 value:self.optionalDouble];
  }
  if (self.hasOptionalBool) {
    [output writeBool:13 value:self.optionalBool];
  }
  if (self.hasOptionalString) {
    [output writeString:14 value:self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output writeData:15 value:self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:16 value:self.OptionalGroup];
  }
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:18 value:self.optionalNestedMessage];
  }
  if (self.hasOptionalForeignMessage) {
    [output writeMessage:19 value:self.optionalForeignMessage];
  }
  if (self.hasOptionalImportMessage) {
    [output writeMessage:20 value:self.optionalImportMessage];
  }
  if (self.hasOptionalNestedEnum) {
    [output writeEnum:21 value:self.optionalNestedEnum];
  }
  if (self.hasOptionalForeignEnum) {
    [output writeEnum:22 value:self.optionalForeignEnum];
  }
  if (self.hasOptionalImportEnum) {
    [output writeEnum:23 value:self.optionalImportEnum];
  }
  if (self.hasOptionalStringPiece) {
    [output writeString:24 value:self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output writeString:25 value:self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output writeMessage:26 value:self.optionalPublicImportMessage];
  }
  if (self.hasOptionalLazyMessage) {
    [output writeMessage:27 value:self.optionalLazyMessage];
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:31 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:32 value:values[i]];
    }
  }
  const NSUInteger repeatedUint32ArrayCount = self.repeatedUint32Array.count;
  if (repeatedUint32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < repeatedUint32ArrayCount; ++i) {
      [output writeUInt32:33 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:34 value:values[i]];
    }
  }
  const NSUInteger repeatedSint32ArrayCount = self.repeatedSint32Array.count;
  if (repeatedSint32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < repeatedSint32ArrayCount; ++i) {
      [output writeSInt32:35 value:values[i]];
    }
  }
  const NSUInteger repeatedSint64ArrayCount = self.repeatedSint64Array.count;
  if (repeatedSint64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < repeatedSint64ArrayCount; ++i) {
      [output writeSInt64:36 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:37 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:38 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed32ArrayCount = self.repeatedSfixed32Array.count;
  if (repeatedSfixed32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.repeatedSfixed32Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:39 value:values[i]];
    }
  }
  const NSUInteger repeatedSfixed64ArrayCount = self.repeatedSfixed64Array.count;
  if (repeatedSfixed64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.repeatedSfixed64Array.data;
    for (NSUInteger i = 0; i < repeatedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:40 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:41 value:values[i]];
    }
  }
  const NSUInteger repeatedDoubleArrayCount = self.repeatedDoubleArray.count;
  if (repeatedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.repeatedDoubleArray.data;
    for (NSUInteger i = 0; i < repeatedDoubleArrayCount; ++i) {
      [output writeDouble:42 value:values[i]];
    }
  }
  const NSUInteger repeatedBoolArrayCount = self.repeatedBoolArray.count;
  if (repeatedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.repeatedBoolArray.data;
    for (NSUInteger i = 0; i < repeatedBoolArrayCount; ++i) {
      [output writeBool:43 value:values[i]];
    }
  }
  for (NSString * value in self.repeatedStringArray) {
    [output writeString:44 value:value];
  }
  for (NSData * value in self.repeatedBytesArray) {
    [output writeData:45 value:value];
  }
  for (TestAllTypes_RepeatedGroup *element in self.RepeatedGroupArray) {
    [output writeGroup:46 value:element];
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessageArray) {
    [output writeMessage:48 value:element];
  }
  for (ForeignMessage *element in self.repeatedForeignMessageArray) {
    [output writeMessage:49 value:element];
  }
  for (ImportMessage *element in self.repeatedImportMessageArray) {
    [output writeMessage:50 value:element];
  }
  for (NSNumber *element in self.repeatedNestedEnumArray) {
    [output writeEnum:51 value:element.intValue];
  }
  for (NSNumber *element in self.repeatedForeignEnumArray) {
    [output writeEnum:52 value:element.intValue];
  }
  for (NSNumber *element in self.repeatedImportEnumArray) {
    [output writeEnum:53 value:element.intValue];
  }
  for (NSString * value in self.repeatedStringPieceArray) {
    [output writeString:54 value:value];
  }
  for (NSString * value in self.repeatedCordArray) {
    [output writeString:55 value:value];
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedLazyMessageArray) {
    [output writeMessage:57 value:element];
  }
  if (self.hasDefaultInt32) {
    [output writeInt32:61 value:self.defaultInt32];
  }
  if (self.hasDefaultInt64) {
    [output writeInt64:62 value:self.defaultInt64];
  }
  if (self.hasDefaultUint32) {
    [output writeUInt32:63 value:self.defaultUint32];
  }
  if (self.hasDefaultUint64) {
    [output writeUInt64:64 value:self.defaultUint64];
  }
  if (self.hasDefaultSint32) {
    [output writeSInt32:65 value:self.defaultSint32];
  }
  if (self.hasDefaultSint64) {
    [output writeSInt64:66 value:self.defaultSint64];
  }
  if (self.hasDefaultFixed32) {
    [output writeFixed32:67 value:self.defaultFixed32];
  }
  if (self.hasDefaultFixed64) {
    [output writeFixed64:68 value:self.defaultFixed64];
  }
  if (self.hasDefaultSfixed32) {
    [output writeSFixed32:69 value:self.defaultSfixed32];
  }
  if (self.hasDefaultSfixed64) {
    [output writeSFixed64:70 value:self.defaultSfixed64];
  }
  if (self.hasDefaultFloat) {
    [output writeFloat:71 value:self.defaultFloat];
  }
  if (self.hasDefaultDouble) {
    [output writeDouble:72 value:self.defaultDouble];
  }
  if (self.hasDefaultBool) {
    [output writeBool:73 value:self.defaultBool];
  }
  if (self.hasDefaultString) {
    [output writeString:74 value:self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output writeData:75 value:self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output writeEnum:81 value:self.defaultNestedEnum];
  }
  if (self.hasDefaultForeignEnum) {
    [output writeEnum:82 value:self.defaultForeignEnum];
  }
  if (self.hasDefaultImportEnum) {
    [output writeEnum:83 value:self.defaultImportEnum];
  }
  if (self.hasDefaultStringPiece) {
    [output writeString:84 value:self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output writeString:85 value:self.defaultCord];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(1, self.optionalInt32);
  }
  if (self.hasOptionalInt64) {
    size_ += computeInt64Size(2, self.optionalInt64);
  }
  if (self.hasOptionalUint32) {
    size_ += computeUInt32Size(3, self.optionalUint32);
  }
  if (self.hasOptionalUint64) {
    size_ += computeUInt64Size(4, self.optionalUint64);
  }
  if (self.hasOptionalSint32) {
    size_ += computeSInt32Size(5, self.optionalSint32);
  }
  if (self.hasOptionalSint64) {
    size_ += computeSInt64Size(6, self.optionalSint64);
  }
  if (self.hasOptionalFixed32) {
    size_ += computeFixed32Size(7, self.optionalFixed32);
  }
  if (self.hasOptionalFixed64) {
    size_ += computeFixed64Size(8, self.optionalFixed64);
  }
  if (self.hasOptionalSfixed32) {
    size_ += computeSFixed32Size(9, self.optionalSfixed32);
  }
  if (self.hasOptionalSfixed64) {
    size_ += computeSFixed64Size(10, self.optionalSfixed64);
  }
  if (self.hasOptionalFloat) {
    size_ += computeFloatSize(11, self.optionalFloat);
  }
  if (self.hasOptionalDouble) {
    size_ += computeDoubleSize(12, self.optionalDouble);
  }
  if (self.hasOptionalBool) {
    size_ += computeBoolSize(13, self.optionalBool);
  }
  if (self.hasOptionalString) {
    size_ += computeStringSize(14, self.optionalString);
  }
  if (self.hasOptionalBytes) {
    size_ += computeDataSize(15, self.optionalBytes);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(16, self.OptionalGroup);
  }
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(18, self.optionalNestedMessage);
  }
  if (self.hasOptionalForeignMessage) {
    size_ += computeMessageSize(19, self.optionalForeignMessage);
  }
  if (self.hasOptionalImportMessage) {
    size_ += computeMessageSize(20, self.optionalImportMessage);
  }
  if (self.hasOptionalNestedEnum) {
    size_ += computeEnumSize(21, self.optionalNestedEnum);
  }
  if (self.hasOptionalForeignEnum) {
    size_ += computeEnumSize(22, self.optionalForeignEnum);
  }
  if (self.hasOptionalImportEnum) {
    size_ += computeEnumSize(23, self.optionalImportEnum);
  }
  if (self.hasOptionalStringPiece) {
    size_ += computeStringSize(24, self.optionalStringPiece);
  }
  if (self.hasOptionalCord) {
    size_ += computeStringSize(25, self.optionalCord);
  }
  if (self.hasOptionalPublicImportMessage) {
    size_ += computeMessageSize(26, self.optionalPublicImportMessage);
  }
  if (self.hasOptionalLazyMessage) {
    size_ += computeMessageSize(27, self.optionalLazyMessage);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedInt32Array.count;
    const int32_t *values = (const int32_t *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedInt64Array.count;
    const int64_t *values = (const int64_t *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedUint32Array.count;
    const uint32_t *values = (const uint32_t *)self.repeatedUint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedUint64Array.count;
    const uint64_t *values = (const uint64_t *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedSint32Array.count;
    const int32_t *values = (const int32_t *)self.repeatedSint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedSint64Array.count;
    const int64_t *values = (const int64_t *)self.repeatedSint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedSfixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedSfixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFloatArray.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedDoubleArray.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedBoolArray.count;
    dataSize += 1 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedStringArray.count;
    for (NSString * element in self.repeatedStringArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedBytesArray.count;
    for (NSData * element in self.repeatedBytesArray) {
      dataSize += computeDataSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  for (TestAllTypes_RepeatedGroup *element in self.RepeatedGroupArray) {
    size_ += computeGroupSize(46, element);
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedNestedMessageArray) {
    size_ += computeMessageSize(48, element);
  }
  for (ForeignMessage *element in self.repeatedForeignMessageArray) {
    size_ += computeMessageSize(49, element);
  }
  for (ImportMessage *element in self.repeatedImportMessageArray) {
    size_ += computeMessageSize(50, element);
  }
  for (NSNumber *element in self.repeatedNestedEnumArray) {
    size_ += computeEnumSize(51, element.intValue);
  }
  for (NSNumber *element in self.repeatedForeignEnumArray) {
    size_ += computeEnumSize(52, element.intValue);
  }
  for (NSNumber *element in self.repeatedImportEnumArray) {
    size_ += computeEnumSize(53, element.intValue);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedStringPieceArray.count;
    for (NSString * element in self.repeatedStringPieceArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedCordArray.count;
    for (NSString * element in self.repeatedCordArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  for (TestAllTypes_NestedMessage *element in self.repeatedLazyMessageArray) {
    size_ += computeMessageSize(57, element);
  }
  if (self.hasDefaultInt32) {
    size_ += computeInt32Size(61, self.defaultInt32);
  }
  if (self.hasDefaultInt64) {
    size_ += computeInt64Size(62, self.defaultInt64);
  }
  if (self.hasDefaultUint32) {
    size_ += computeUInt32Size(63, self.defaultUint32);
  }
  if (self.hasDefaultUint64) {
    size_ += computeUInt64Size(64, self.defaultUint64);
  }
  if (self.hasDefaultSint32) {
    size_ += computeSInt32Size(65, self.defaultSint32);
  }
  if (self.hasDefaultSint64) {
    size_ += computeSInt64Size(66, self.defaultSint64);
  }
  if (self.hasDefaultFixed32) {
    size_ += computeFixed32Size(67, self.defaultFixed32);
  }
  if (self.hasDefaultFixed64) {
    size_ += computeFixed64Size(68, self.defaultFixed64);
  }
  if (self.hasDefaultSfixed32) {
    size_ += computeSFixed32Size(69, self.defaultSfixed32);
  }
  if (self.hasDefaultSfixed64) {
    size_ += computeSFixed64Size(70, self.defaultSfixed64);
  }
  if (self.hasDefaultFloat) {
    size_ += computeFloatSize(71, self.defaultFloat);
  }
  if (self.hasDefaultDouble) {
    size_ += computeDoubleSize(72, self.defaultDouble);
  }
  if (self.hasDefaultBool) {
    size_ += computeBoolSize(73, self.defaultBool);
  }
  if (self.hasDefaultString) {
    size_ += computeStringSize(74, self.defaultString);
  }
  if (self.hasDefaultBytes) {
    size_ += computeDataSize(75, self.defaultBytes);
  }
  if (self.hasDefaultNestedEnum) {
    size_ += computeEnumSize(81, self.defaultNestedEnum);
  }
  if (self.hasDefaultForeignEnum) {
    size_ += computeEnumSize(82, self.defaultForeignEnum);
  }
  if (self.hasDefaultImportEnum) {
    size_ += computeEnumSize(83, self.defaultImportEnum);
  }
  if (self.hasDefaultStringPiece) {
    size_ += computeStringSize(84, self.defaultStringPiece);
  }
  if (self.hasDefaultCord) {
    size_ += computeStringSize(85, self.defaultCord);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestAllTypes_Builder*)builder {
  return [[TestAllTypes_Builder alloc] init];
}
+ (TestAllTypes_Builder*)builderWithPrototype:(TestAllTypes*)prototype {
  return [[TestAllTypes builder] mergeFrom:prototype];
}
- (TestAllTypes_Builder*)builder {
  return [TestAllTypes builder];
}
- (TestAllTypes_Builder*)toBuilder {
  return [TestAllTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", @(self.optionalInt32)];
  }
  if (self.hasOptionalInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt64", @(self.optionalInt64)];
  }
  if (self.hasOptionalUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint32", @(self.optionalUint32)];
  }
  if (self.hasOptionalUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalUint64", @(self.optionalUint64)];
  }
  if (self.hasOptionalSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint32", @(self.optionalSint32)];
  }
  if (self.hasOptionalSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSint64", @(self.optionalSint64)];
  }
  if (self.hasOptionalFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed32", @(self.optionalFixed32)];
  }
  if (self.hasOptionalFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFixed64", @(self.optionalFixed64)];
  }
  if (self.hasOptionalSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed32", @(self.optionalSfixed32)];
  }
  if (self.hasOptionalSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalSfixed64", @(self.optionalSfixed64)];
  }
  if (self.hasOptionalFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalFloat", @(self.optionalFloat)];
  }
  if (self.hasOptionalDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalDouble", @(self.optionalDouble)];
  }
  if (self.hasOptionalBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBool", @(self.optionalBool)];
  }
  if (self.hasOptionalString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalString", self.optionalString];
  }
  if (self.hasOptionalBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalBytes", self.optionalBytes];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"OptionalGroup"];
    [self.OptionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalForeignMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalForeignMessage"];
    [self.optionalForeignMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalImportMessage"];
    [self.optionalImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalNestedEnum", @(self.optionalNestedEnum)];
  }
  if (self.hasOptionalForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalForeignEnum", @(self.optionalForeignEnum)];
  }
  if (self.hasOptionalImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalImportEnum", @(self.optionalImportEnum)];
  }
  if (self.hasOptionalStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalStringPiece", self.optionalStringPiece];
  }
  if (self.hasOptionalCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalCord", self.optionalCord];
  }
  if (self.hasOptionalPublicImportMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalPublicImportMessage"];
    [self.optionalPublicImportMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalLazyMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalLazyMessage"];
    [self.optionalLazyMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  listCount = self.repeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", @([self.repeatedInt32Array int32AtIndex:i])];
  }
  listCount = self.repeatedInt64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", @([self.repeatedInt64Array int64AtIndex:i])];
  }
  listCount = self.repeatedUint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint32", @([self.repeatedUint32Array uint32AtIndex:i])];
  }
  listCount = self.repeatedUint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  listCount = self.repeatedSint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint32", @([self.repeatedSint32Array int32AtIndex:i])];
  }
  listCount = self.repeatedSint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSint64", @([self.repeatedSint64Array int64AtIndex:i])];
  }
  listCount = self.repeatedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  listCount = self.repeatedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  listCount = self.repeatedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed32", @([self.repeatedSfixed32Array int32AtIndex:i])];
  }
  listCount = self.repeatedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedSfixed64", @([self.repeatedSfixed64Array int64AtIndex:i])];
  }
  listCount = self.repeatedFloatArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", @([self.repeatedFloatArray floatAtIndex:i])];
  }
  listCount = self.repeatedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedDouble", @([self.repeatedDoubleArray doubleAtIndex:i])];
  }
  listCount = self.repeatedBoolArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBool", @([self.repeatedBoolArray boolAtIndex:i])];
  }
  for (NSString * element in self.repeatedStringArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedString", element];
  }
  for (NSData * element in self.repeatedBytesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedBytes", element];
  }
  for (TestAllTypes_RepeatedGroup* element in self.RepeatedGroupArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"RepeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes_NestedMessage* element in self.repeatedNestedMessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedNestedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ForeignMessage* element in self.repeatedForeignMessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedForeignMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ImportMessage* element in self.repeatedImportMessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedImportMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSNumber* element in self.repeatedNestedEnumArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedNestedEnum", element];
  }
  for (NSNumber* element in self.repeatedForeignEnumArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedForeignEnum", element];
  }
  for (NSNumber* element in self.repeatedImportEnumArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedImportEnum", element];
  }
  for (NSString * element in self.repeatedStringPieceArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedStringPiece", element];
  }
  for (NSString * element in self.repeatedCordArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedCord", element];
  }
  for (TestAllTypes_NestedMessage* element in self.repeatedLazyMessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedLazyMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefaultInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt32", @(self.defaultInt32)];
  }
  if (self.hasDefaultInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultInt64", @(self.defaultInt64)];
  }
  if (self.hasDefaultUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint32", @(self.defaultUint32)];
  }
  if (self.hasDefaultUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultUint64", @(self.defaultUint64)];
  }
  if (self.hasDefaultSint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint32", @(self.defaultSint32)];
  }
  if (self.hasDefaultSint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSint64", @(self.defaultSint64)];
  }
  if (self.hasDefaultFixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed32", @(self.defaultFixed32)];
  }
  if (self.hasDefaultFixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFixed64", @(self.defaultFixed64)];
  }
  if (self.hasDefaultSfixed32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed32", @(self.defaultSfixed32)];
  }
  if (self.hasDefaultSfixed64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultSfixed64", @(self.defaultSfixed64)];
  }
  if (self.hasDefaultFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultFloat", @(self.defaultFloat)];
  }
  if (self.hasDefaultDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultDouble", @(self.defaultDouble)];
  }
  if (self.hasDefaultBool) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBool", @(self.defaultBool)];
  }
  if (self.hasDefaultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultString", self.defaultString];
  }
  if (self.hasDefaultBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultBytes", self.defaultBytes];
  }
  if (self.hasDefaultNestedEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultNestedEnum", @(self.defaultNestedEnum)];
  }
  if (self.hasDefaultForeignEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultForeignEnum", @(self.defaultForeignEnum)];
  }
  if (self.hasDefaultImportEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultImportEnum", @(self.defaultImportEnum)];
  }
  if (self.hasDefaultStringPiece) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultStringPiece", self.defaultStringPiece];
  }
  if (self.hasDefaultCord) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultCord", self.defaultCord];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes class]]) {
    return NO;
  }
  TestAllTypes *otherMessage = other;
  return
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      self.hasOptionalInt64 == otherMessage.hasOptionalInt64 &&
      (!self.hasOptionalInt64 || self.optionalInt64 == otherMessage.optionalInt64) &&
      self.hasOptionalUint32 == otherMessage.hasOptionalUint32 &&
      (!self.hasOptionalUint32 || self.optionalUint32 == otherMessage.optionalUint32) &&
      self.hasOptionalUint64 == otherMessage.hasOptionalUint64 &&
      (!self.hasOptionalUint64 || self.optionalUint64 == otherMessage.optionalUint64) &&
      self.hasOptionalSint32 == otherMessage.hasOptionalSint32 &&
      (!self.hasOptionalSint32 || self.optionalSint32 == otherMessage.optionalSint32) &&
      self.hasOptionalSint64 == otherMessage.hasOptionalSint64 &&
      (!self.hasOptionalSint64 || self.optionalSint64 == otherMessage.optionalSint64) &&
      self.hasOptionalFixed32 == otherMessage.hasOptionalFixed32 &&
      (!self.hasOptionalFixed32 || self.optionalFixed32 == otherMessage.optionalFixed32) &&
      self.hasOptionalFixed64 == otherMessage.hasOptionalFixed64 &&
      (!self.hasOptionalFixed64 || self.optionalFixed64 == otherMessage.optionalFixed64) &&
      self.hasOptionalSfixed32 == otherMessage.hasOptionalSfixed32 &&
      (!self.hasOptionalSfixed32 || self.optionalSfixed32 == otherMessage.optionalSfixed32) &&
      self.hasOptionalSfixed64 == otherMessage.hasOptionalSfixed64 &&
      (!self.hasOptionalSfixed64 || self.optionalSfixed64 == otherMessage.optionalSfixed64) &&
      self.hasOptionalFloat == otherMessage.hasOptionalFloat &&
      (!self.hasOptionalFloat || self.optionalFloat == otherMessage.optionalFloat) &&
      self.hasOptionalDouble == otherMessage.hasOptionalDouble &&
      (!self.hasOptionalDouble || self.optionalDouble == otherMessage.optionalDouble) &&
      self.hasOptionalBool == otherMessage.hasOptionalBool &&
      (!self.hasOptionalBool || self.optionalBool == otherMessage.optionalBool) &&
      self.hasOptionalString == otherMessage.hasOptionalString &&
      (!self.hasOptionalString || [self.optionalString isEqual:otherMessage.optionalString]) &&
      self.hasOptionalBytes == otherMessage.hasOptionalBytes &&
      (!self.hasOptionalBytes || [self.optionalBytes isEqual:otherMessage.optionalBytes]) &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.OptionalGroup isEqual:otherMessage.OptionalGroup]) &&
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      self.hasOptionalForeignMessage == otherMessage.hasOptionalForeignMessage &&
      (!self.hasOptionalForeignMessage || [self.optionalForeignMessage isEqual:otherMessage.optionalForeignMessage]) &&
      self.hasOptionalImportMessage == otherMessage.hasOptionalImportMessage &&
      (!self.hasOptionalImportMessage || [self.optionalImportMessage isEqual:otherMessage.optionalImportMessage]) &&
      self.hasOptionalNestedEnum == otherMessage.hasOptionalNestedEnum &&
      (!self.hasOptionalNestedEnum || self.optionalNestedEnum == otherMessage.optionalNestedEnum) &&
      self.hasOptionalForeignEnum == otherMessage.hasOptionalForeignEnum &&
      (!self.hasOptionalForeignEnum || self.optionalForeignEnum == otherMessage.optionalForeignEnum) &&
      self.hasOptionalImportEnum == otherMessage.hasOptionalImportEnum &&
      (!self.hasOptionalImportEnum || self.optionalImportEnum == otherMessage.optionalImportEnum) &&
      self.hasOptionalStringPiece == otherMessage.hasOptionalStringPiece &&
      (!self.hasOptionalStringPiece || [self.optionalStringPiece isEqual:otherMessage.optionalStringPiece]) &&
      self.hasOptionalCord == otherMessage.hasOptionalCord &&
      (!self.hasOptionalCord || [self.optionalCord isEqual:otherMessage.optionalCord]) &&
      self.hasOptionalPublicImportMessage == otherMessage.hasOptionalPublicImportMessage &&
      (!self.hasOptionalPublicImportMessage || [self.optionalPublicImportMessage isEqual:otherMessage.optionalPublicImportMessage]) &&
      self.hasOptionalLazyMessage == otherMessage.hasOptionalLazyMessage &&
      (!self.hasOptionalLazyMessage || [self.optionalLazyMessage isEqual:otherMessage.optionalLazyMessage]) &&
      ((self.repeatedInt32Array == nil && otherMessage.repeatedInt32Array == nil) ||
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array]) &&
      ((self.repeatedInt64Array == nil && otherMessage.repeatedInt64Array == nil) ||
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array]) &&
      ((self.repeatedUint32Array == nil && otherMessage.repeatedUint32Array == nil) ||
      [self.repeatedUint32Array isEqualToArray:otherMessage.repeatedUint32Array]) &&
      ((self.repeatedUint64Array == nil && otherMessage.repeatedUint64Array == nil) ||
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array]) &&
      ((self.repeatedSint32Array == nil && otherMessage.repeatedSint32Array == nil) ||
      [self.repeatedSint32Array isEqualToArray:otherMessage.repeatedSint32Array]) &&
      ((self.repeatedSint64Array == nil && otherMessage.repeatedSint64Array == nil) ||
      [self.repeatedSint64Array isEqualToArray:otherMessage.repeatedSint64Array]) &&
      ((self.repeatedFixed32Array == nil && otherMessage.repeatedFixed32Array == nil) ||
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array]) &&
      ((self.repeatedFixed64Array == nil && otherMessage.repeatedFixed64Array == nil) ||
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array]) &&
      ((self.repeatedSfixed32Array == nil && otherMessage.repeatedSfixed32Array == nil) ||
      [self.repeatedSfixed32Array isEqualToArray:otherMessage.repeatedSfixed32Array]) &&
      ((self.repeatedSfixed64Array == nil && otherMessage.repeatedSfixed64Array == nil) ||
      [self.repeatedSfixed64Array isEqualToArray:otherMessage.repeatedSfixed64Array]) &&
      ((self.repeatedFloatArray == nil && otherMessage.repeatedFloatArray == nil) ||
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray]) &&
      ((self.repeatedDoubleArray == nil && otherMessage.repeatedDoubleArray == nil) ||
      [self.repeatedDoubleArray isEqualToArray:otherMessage.repeatedDoubleArray]) &&
      ((self.repeatedBoolArray == nil && otherMessage.repeatedBoolArray == nil) ||
      [self.repeatedBoolArray isEqualToArray:otherMessage.repeatedBoolArray]) &&
      ((self.repeatedStringArray == nil && otherMessage.repeatedStringArray == nil) ||
      [self.repeatedStringArray isEqualToArray:otherMessage.repeatedStringArray]) &&
      ((self.repeatedBytesArray == nil && otherMessage.repeatedBytesArray == nil) ||
      [self.repeatedBytesArray isEqualToArray:otherMessage.repeatedBytesArray]) &&
      ((self.RepeatedGroupArray == nil && otherMessage.RepeatedGroupArray == nil) ||
      [self.RepeatedGroupArray isEqualToArray:otherMessage.RepeatedGroupArray]) &&
      ((self.repeatedNestedMessageArray == nil && otherMessage.repeatedNestedMessageArray == nil) ||
      [self.repeatedNestedMessageArray isEqualToArray:otherMessage.repeatedNestedMessageArray]) &&
      ((self.repeatedForeignMessageArray == nil && otherMessage.repeatedForeignMessageArray == nil) ||
      [self.repeatedForeignMessageArray isEqualToArray:otherMessage.repeatedForeignMessageArray]) &&
      ((self.repeatedImportMessageArray == nil && otherMessage.repeatedImportMessageArray == nil) ||
      [self.repeatedImportMessageArray isEqualToArray:otherMessage.repeatedImportMessageArray]) &&
      ((self.repeatedNestedEnumArray == nil && otherMessage.repeatedNestedEnumArray == nil) ||
      [self.repeatedNestedEnumArray isEqualToArray:otherMessage.repeatedNestedEnumArray]) &&
      ((self.repeatedForeignEnumArray == nil && otherMessage.repeatedForeignEnumArray == nil) ||
      [self.repeatedForeignEnumArray isEqualToArray:otherMessage.repeatedForeignEnumArray]) &&
      ((self.repeatedImportEnumArray == nil && otherMessage.repeatedImportEnumArray == nil) ||
      [self.repeatedImportEnumArray isEqualToArray:otherMessage.repeatedImportEnumArray]) &&
      ((self.repeatedStringPieceArray == nil && otherMessage.repeatedStringPieceArray == nil) ||
      [self.repeatedStringPieceArray isEqualToArray:otherMessage.repeatedStringPieceArray]) &&
      ((self.repeatedCordArray == nil && otherMessage.repeatedCordArray == nil) ||
      [self.repeatedCordArray isEqualToArray:otherMessage.repeatedCordArray]) &&
      ((self.repeatedLazyMessageArray == nil && otherMessage.repeatedLazyMessageArray == nil) ||
      [self.repeatedLazyMessageArray isEqualToArray:otherMessage.repeatedLazyMessageArray]) &&
      self.hasDefaultInt32 == otherMessage.hasDefaultInt32 &&
      (!self.hasDefaultInt32 || self.defaultInt32 == otherMessage.defaultInt32) &&
      self.hasDefaultInt64 == otherMessage.hasDefaultInt64 &&
      (!self.hasDefaultInt64 || self.defaultInt64 == otherMessage.defaultInt64) &&
      self.hasDefaultUint32 == otherMessage.hasDefaultUint32 &&
      (!self.hasDefaultUint32 || self.defaultUint32 == otherMessage.defaultUint32) &&
      self.hasDefaultUint64 == otherMessage.hasDefaultUint64 &&
      (!self.hasDefaultUint64 || self.defaultUint64 == otherMessage.defaultUint64) &&
      self.hasDefaultSint32 == otherMessage.hasDefaultSint32 &&
      (!self.hasDefaultSint32 || self.defaultSint32 == otherMessage.defaultSint32) &&
      self.hasDefaultSint64 == otherMessage.hasDefaultSint64 &&
      (!self.hasDefaultSint64 || self.defaultSint64 == otherMessage.defaultSint64) &&
      self.hasDefaultFixed32 == otherMessage.hasDefaultFixed32 &&
      (!self.hasDefaultFixed32 || self.defaultFixed32 == otherMessage.defaultFixed32) &&
      self.hasDefaultFixed64 == otherMessage.hasDefaultFixed64 &&
      (!self.hasDefaultFixed64 || self.defaultFixed64 == otherMessage.defaultFixed64) &&
      self.hasDefaultSfixed32 == otherMessage.hasDefaultSfixed32 &&
      (!self.hasDefaultSfixed32 || self.defaultSfixed32 == otherMessage.defaultSfixed32) &&
      self.hasDefaultSfixed64 == otherMessage.hasDefaultSfixed64 &&
      (!self.hasDefaultSfixed64 || self.defaultSfixed64 == otherMessage.defaultSfixed64) &&
      self.hasDefaultFloat == otherMessage.hasDefaultFloat &&
      (!self.hasDefaultFloat || self.defaultFloat == otherMessage.defaultFloat) &&
      self.hasDefaultDouble == otherMessage.hasDefaultDouble &&
      (!self.hasDefaultDouble || self.defaultDouble == otherMessage.defaultDouble) &&
      self.hasDefaultBool == otherMessage.hasDefaultBool &&
      (!self.hasDefaultBool || self.defaultBool == otherMessage.defaultBool) &&
      self.hasDefaultString == otherMessage.hasDefaultString &&
      (!self.hasDefaultString || [self.defaultString isEqual:otherMessage.defaultString]) &&
      self.hasDefaultBytes == otherMessage.hasDefaultBytes &&
      (!self.hasDefaultBytes || [self.defaultBytes isEqual:otherMessage.defaultBytes]) &&
      self.hasDefaultNestedEnum == otherMessage.hasDefaultNestedEnum &&
      (!self.hasDefaultNestedEnum || self.defaultNestedEnum == otherMessage.defaultNestedEnum) &&
      self.hasDefaultForeignEnum == otherMessage.hasDefaultForeignEnum &&
      (!self.hasDefaultForeignEnum || self.defaultForeignEnum == otherMessage.defaultForeignEnum) &&
      self.hasDefaultImportEnum == otherMessage.hasDefaultImportEnum &&
      (!self.hasDefaultImportEnum || self.defaultImportEnum == otherMessage.defaultImportEnum) &&
      self.hasDefaultStringPiece == otherMessage.hasDefaultStringPiece &&
      (!self.hasDefaultStringPiece || [self.defaultStringPiece isEqual:otherMessage.defaultStringPiece]) &&
      self.hasDefaultCord == otherMessage.hasDefaultCord &&
      (!self.hasDefaultCord || [self.defaultCord isEqual:otherMessage.defaultCord]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [@(self.optionalInt32) hash];
  }
  if (self.hasOptionalInt64) {
    hashCode = hashCode * 31 + [@(self.optionalInt64) hash];
  }
  if (self.hasOptionalUint32) {
    hashCode = hashCode * 31 + [@(self.optionalUint32) hash];
  }
  if (self.hasOptionalUint64) {
    hashCode = hashCode * 31 + [@(self.optionalUint64) hash];
  }
  if (self.hasOptionalSint32) {
    hashCode = hashCode * 31 + [@(self.optionalSint32) hash];
  }
  if (self.hasOptionalSint64) {
    hashCode = hashCode * 31 + [@(self.optionalSint64) hash];
  }
  if (self.hasOptionalFixed32) {
    hashCode = hashCode * 31 + [@(self.optionalFixed32) hash];
  }
  if (self.hasOptionalFixed64) {
    hashCode = hashCode * 31 + [@(self.optionalFixed64) hash];
  }
  if (self.hasOptionalSfixed32) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed32) hash];
  }
  if (self.hasOptionalSfixed64) {
    hashCode = hashCode * 31 + [@(self.optionalSfixed64) hash];
  }
  if (self.hasOptionalFloat) {
    hashCode = hashCode * 31 + [@(self.optionalFloat) hash];
  }
  if (self.hasOptionalDouble) {
    hashCode = hashCode * 31 + [@(self.optionalDouble) hash];
  }
  if (self.hasOptionalBool) {
    hashCode = hashCode * 31 + [@(self.optionalBool) hash];
  }
  if (self.hasOptionalString) {
    hashCode = hashCode * 31 + [self.optionalString hash];
  }
  if (self.hasOptionalBytes) {
    hashCode = hashCode * 31 + [self.optionalBytes hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.OptionalGroup hash];
  }
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  if (self.hasOptionalForeignMessage) {
    hashCode = hashCode * 31 + [self.optionalForeignMessage hash];
  }
  if (self.hasOptionalImportMessage) {
    hashCode = hashCode * 31 + [self.optionalImportMessage hash];
  }
  if (self.hasOptionalNestedEnum) {
    hashCode = hashCode * 31 + self.optionalNestedEnum;
  }
  if (self.hasOptionalForeignEnum) {
    hashCode = hashCode * 31 + self.optionalForeignEnum;
  }
  if (self.hasOptionalImportEnum) {
    hashCode = hashCode * 31 + self.optionalImportEnum;
  }
  if (self.hasOptionalStringPiece) {
    hashCode = hashCode * 31 + [self.optionalStringPiece hash];
  }
  if (self.hasOptionalCord) {
    hashCode = hashCode * 31 + [self.optionalCord hash];
  }
  if (self.hasOptionalPublicImportMessage) {
    hashCode = hashCode * 31 + [self.optionalPublicImportMessage hash];
  }
  if (self.hasOptionalLazyMessage) {
    hashCode = hashCode * 31 + [self.optionalLazyMessage hash];
  }
  listCount = self.repeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedInt32Array int32AtIndex:i];
  }
  listCount = self.repeatedInt64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedInt64Array int64AtIndex:i];
  }
  listCount = self.repeatedUint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedUint32Array uint32AtIndex:i];
  }
  listCount = self.repeatedUint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedUint64Array uint64AtIndex:i];
  }
  listCount = self.repeatedSint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedSint32Array int32AtIndex:i];
  }
  listCount = self.repeatedSint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedSint64Array int64AtIndex:i];
  }
  listCount = self.repeatedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFixed32Array uint32AtIndex:i];
  }
  listCount = self.repeatedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFixed64Array uint64AtIndex:i];
  }
  listCount = self.repeatedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedSfixed32Array int32AtIndex:i];
  }
  listCount = self.repeatedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedSfixed64Array int64AtIndex:i];
  }
  listCount = self.repeatedFloatArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFloatArray floatAtIndex:i];
  }
  listCount = self.repeatedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedDoubleArray doubleAtIndex:i];
  }
  listCount = self.repeatedBoolArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedBoolArray boolAtIndex:i];
  }
  for (NSString * element in self.repeatedStringArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSData * element in self.repeatedBytesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes_RepeatedGroup* element in self.RepeatedGroupArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes_NestedMessage* element in self.repeatedNestedMessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ForeignMessage* element in self.repeatedForeignMessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ImportMessage* element in self.repeatedImportMessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSNumber* element in self.repeatedNestedEnumArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  for (NSNumber* element in self.repeatedForeignEnumArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  for (NSNumber* element in self.repeatedImportEnumArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  for (NSString * element in self.repeatedStringPieceArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.repeatedCordArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes_NestedMessage* element in self.repeatedLazyMessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDefaultInt32) {
    hashCode = hashCode * 31 + [@(self.defaultInt32) hash];
  }
  if (self.hasDefaultInt64) {
    hashCode = hashCode * 31 + [@(self.defaultInt64) hash];
  }
  if (self.hasDefaultUint32) {
    hashCode = hashCode * 31 + [@(self.defaultUint32) hash];
  }
  if (self.hasDefaultUint64) {
    hashCode = hashCode * 31 + [@(self.defaultUint64) hash];
  }
  if (self.hasDefaultSint32) {
    hashCode = hashCode * 31 + [@(self.defaultSint32) hash];
  }
  if (self.hasDefaultSint64) {
    hashCode = hashCode * 31 + [@(self.defaultSint64) hash];
  }
  if (self.hasDefaultFixed32) {
    hashCode = hashCode * 31 + [@(self.defaultFixed32) hash];
  }
  if (self.hasDefaultFixed64) {
    hashCode = hashCode * 31 + [@(self.defaultFixed64) hash];
  }
  if (self.hasDefaultSfixed32) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed32) hash];
  }
  if (self.hasDefaultSfixed64) {
    hashCode = hashCode * 31 + [@(self.defaultSfixed64) hash];
  }
  if (self.hasDefaultFloat) {
    hashCode = hashCode * 31 + [@(self.defaultFloat) hash];
  }
  if (self.hasDefaultDouble) {
    hashCode = hashCode * 31 + [@(self.defaultDouble) hash];
  }
  if (self.hasDefaultBool) {
    hashCode = hashCode * 31 + [@(self.defaultBool) hash];
  }
  if (self.hasDefaultString) {
    hashCode = hashCode * 31 + [self.defaultString hash];
  }
  if (self.hasDefaultBytes) {
    hashCode = hashCode * 31 + [self.defaultBytes hash];
  }
  if (self.hasDefaultNestedEnum) {
    hashCode = hashCode * 31 + self.defaultNestedEnum;
  }
  if (self.hasDefaultForeignEnum) {
    hashCode = hashCode * 31 + self.defaultForeignEnum;
  }
  if (self.hasDefaultImportEnum) {
    hashCode = hashCode * 31 + self.defaultImportEnum;
  }
  if (self.hasDefaultStringPiece) {
    hashCode = hashCode * 31 + [self.defaultStringPiece hash];
  }
  if (self.hasDefaultCord) {
    hashCode = hashCode * 31 + [self.defaultCord hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestAllTypes_Builder {
  TestAllTypes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestAllTypes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestAllTypes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestAllTypes_Builder alloc] init] mergeFrom:_result];
}

- (TestAllTypes*)defaultMessageInstance {
  return [TestAllTypes defaultInstance];
}

- (TestAllTypes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes*)buildPartial {
  TestAllTypes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestAllTypes*)other {
  if (other == [TestAllTypes defaultInstance]) {
    return self;
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  if (other.hasOptionalInt64) {
    [self setOptionalInt64:other.optionalInt64];
  }
  if (other.hasOptionalUint32) {
    [self setOptionalUint32:other.optionalUint32];
  }
  if (other.hasOptionalUint64) {
    [self setOptionalUint64:other.optionalUint64];
  }
  if (other.hasOptionalSint32) {
    [self setOptionalSint32:other.optionalSint32];
  }
  if (other.hasOptionalSint64) {
    [self setOptionalSint64:other.optionalSint64];
  }
  if (other.hasOptionalFixed32) {
    [self setOptionalFixed32:other.optionalFixed32];
  }
  if (other.hasOptionalFixed64) {
    [self setOptionalFixed64:other.optionalFixed64];
  }
  if (other.hasOptionalSfixed32) {
    [self setOptionalSfixed32:other.optionalSfixed32];
  }
  if (other.hasOptionalSfixed64) {
    [self setOptionalSfixed64:other.optionalSfixed64];
  }
  if (other.hasOptionalFloat) {
    [self setOptionalFloat:other.optionalFloat];
  }
  if (other.hasOptionalDouble) {
    [self setOptionalDouble:other.optionalDouble];
  }
  if (other.hasOptionalBool) {
    [self setOptionalBool:other.optionalBool];
  }
  if (other.hasOptionalString) {
    [self setOptionalString:other.optionalString];
  }
  if (other.hasOptionalBytes) {
    [self setOptionalBytes:other.optionalBytes];
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.OptionalGroup];
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  if (other.hasOptionalForeignMessage) {
    [self mergeOptionalForeignMessage:other.optionalForeignMessage];
  }
  if (other.hasOptionalImportMessage) {
    [self mergeOptionalImportMessage:other.optionalImportMessage];
  }
  if (other.hasOptionalNestedEnum) {
    [self setOptionalNestedEnum:other.optionalNestedEnum];
  }
  if (other.hasOptionalForeignEnum) {
    [self setOptionalForeignEnum:other.optionalForeignEnum];
  }
  if (other.hasOptionalImportEnum) {
    [self setOptionalImportEnum:other.optionalImportEnum];
  }
  if (other.hasOptionalStringPiece) {
    [self setOptionalStringPiece:other.optionalStringPiece];
  }
  if (other.hasOptionalCord) {
    [self setOptionalCord:other.optionalCord];
  }
  if (other.hasOptionalPublicImportMessage) {
    [self mergeOptionalPublicImportMessage:other.optionalPublicImportMessage];
  }
  if (other.hasOptionalLazyMessage) {
    [self mergeOptionalLazyMessage:other.optionalLazyMessage];
  }
  if (other.repeatedInt32Array.count > 0) {
    if (_result.repeatedInt32Array == nil) {
      _result.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [_result.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (_result.repeatedInt64Array == nil) {
      _result.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [_result.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedUint32Array.count > 0) {
    if (_result.repeatedUint32Array == nil) {
      _result.repeatedUint32Array = [other.repeatedUint32Array copy];
    } else {
      [_result.repeatedUint32Array appendArray:other.repeatedUint32Array];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (_result.repeatedUint64Array == nil) {
      _result.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [_result.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  if (other.repeatedSint32Array.count > 0) {
    if (_result.repeatedSint32Array == nil) {
      _result.repeatedSint32Array = [other.repeatedSint32Array copy];
    } else {
      [_result.repeatedSint32Array appendArray:other.repeatedSint32Array];
    }
  }
  if (other.repeatedSint64Array.count > 0) {
    if (_result.repeatedSint64Array == nil) {
      _result.repeatedSint64Array = [other.repeatedSint64Array copy];
    } else {
      [_result.repeatedSint64Array appendArray:other.repeatedSint64Array];
    }
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (_result.repeatedFixed32Array == nil) {
      _result.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [_result.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (_result.repeatedFixed64Array == nil) {
      _result.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [_result.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedSfixed32Array.count > 0) {
    if (_result.repeatedSfixed32Array == nil) {
      _result.repeatedSfixed32Array = [other.repeatedSfixed32Array copy];
    } else {
      [_result.repeatedSfixed32Array appendArray:other.repeatedSfixed32Array];
    }
  }
  if (other.repeatedSfixed64Array.count > 0) {
    if (_result.repeatedSfixed64Array == nil) {
      _result.repeatedSfixed64Array = [other.repeatedSfixed64Array copy];
    } else {
      [_result.repeatedSfixed64Array appendArray:other.repeatedSfixed64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (_result.repeatedFloatArray == nil) {
      _result.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [_result.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedDoubleArray.count > 0) {
    if (_result.repeatedDoubleArray == nil) {
      _result.repeatedDoubleArray = [other.repeatedDoubleArray copy];
    } else {
      [_result.repeatedDoubleArray appendArray:other.repeatedDoubleArray];
    }
  }
  if (other.repeatedBoolArray.count > 0) {
    if (_result.repeatedBoolArray == nil) {
      _result.repeatedBoolArray = [other.repeatedBoolArray copy];
    } else {
      [_result.repeatedBoolArray appendArray:other.repeatedBoolArray];
    }
  }
  if (other.repeatedStringArray.count > 0) {
    if (_result.repeatedStringArray == nil) {
      _result.repeatedStringArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringArray];
    } else {
      [_result.repeatedStringArray addObjectsFromArray:other.repeatedStringArray];
    }
  }
  if (other.repeatedBytesArray.count > 0) {
    if (_result.repeatedBytesArray == nil) {
      _result.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:other.repeatedBytesArray];
    } else {
      [_result.repeatedBytesArray addObjectsFromArray:other.repeatedBytesArray];
    }
  }
  if (other.RepeatedGroupArray.count > 0) {
    if (_result.RepeatedGroupArray == nil) {
      _result.RepeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.RepeatedGroupArray];
    } else {
      [_result.RepeatedGroupArray addObjectsFromArray:other.RepeatedGroupArray];
    }
  }
  if (other.repeatedNestedMessageArray.count > 0) {
    if (_result.repeatedNestedMessageArray == nil) {
      _result.repeatedNestedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedNestedMessageArray];
    } else {
      [_result.repeatedNestedMessageArray addObjectsFromArray:other.repeatedNestedMessageArray];
    }
  }
  if (other.repeatedForeignMessageArray.count > 0) {
    if (_result.repeatedForeignMessageArray == nil) {
      _result.repeatedForeignMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedForeignMessageArray];
    } else {
      [_result.repeatedForeignMessageArray addObjectsFromArray:other.repeatedForeignMessageArray];
    }
  }
  if (other.repeatedImportMessageArray.count > 0) {
    if (_result.repeatedImportMessageArray == nil) {
      _result.repeatedImportMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedImportMessageArray];
    } else {
      [_result.repeatedImportMessageArray addObjectsFromArray:other.repeatedImportMessageArray];
    }
  }
  if (other.repeatedNestedEnumArray.count > 0) {
    if (_result.repeatedNestedEnumArray == nil) {
      _result.repeatedNestedEnumArray = [[NSMutableArray alloc] initWithArray:other.repeatedNestedEnumArray];
    } else {
      [_result.repeatedNestedEnumArray addObjectsFromArray:other.repeatedNestedEnumArray];
    }
  }
  if (other.repeatedForeignEnumArray.count > 0) {
    if (_result.repeatedForeignEnumArray == nil) {
      _result.repeatedForeignEnumArray = [[NSMutableArray alloc] initWithArray:other.repeatedForeignEnumArray];
    } else {
      [_result.repeatedForeignEnumArray addObjectsFromArray:other.repeatedForeignEnumArray];
    }
  }
  if (other.repeatedImportEnumArray.count > 0) {
    if (_result.repeatedImportEnumArray == nil) {
      _result.repeatedImportEnumArray = [[NSMutableArray alloc] initWithArray:other.repeatedImportEnumArray];
    } else {
      [_result.repeatedImportEnumArray addObjectsFromArray:other.repeatedImportEnumArray];
    }
  }
  if (other.repeatedStringPieceArray.count > 0) {
    if (_result.repeatedStringPieceArray == nil) {
      _result.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:other.repeatedStringPieceArray];
    } else {
      [_result.repeatedStringPieceArray addObjectsFromArray:other.repeatedStringPieceArray];
    }
  }
  if (other.repeatedCordArray.count > 0) {
    if (_result.repeatedCordArray == nil) {
      _result.repeatedCordArray = [[NSMutableArray alloc] initWithArray:other.repeatedCordArray];
    } else {
      [_result.repeatedCordArray addObjectsFromArray:other.repeatedCordArray];
    }
  }
  if (other.repeatedLazyMessageArray.count > 0) {
    if (_result.repeatedLazyMessageArray == nil) {
      _result.repeatedLazyMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedLazyMessageArray];
    } else {
      [_result.repeatedLazyMessageArray addObjectsFromArray:other.repeatedLazyMessageArray];
    }
  }
  if (other.hasDefaultInt32) {
    [self setDefaultInt32:other.defaultInt32];
  }
  if (other.hasDefaultInt64) {
    [self setDefaultInt64:other.defaultInt64];
  }
  if (other.hasDefaultUint32) {
    [self setDefaultUint32:other.defaultUint32];
  }
  if (other.hasDefaultUint64) {
    [self setDefaultUint64:other.defaultUint64];
  }
  if (other.hasDefaultSint32) {
    [self setDefaultSint32:other.defaultSint32];
  }
  if (other.hasDefaultSint64) {
    [self setDefaultSint64:other.defaultSint64];
  }
  if (other.hasDefaultFixed32) {
    [self setDefaultFixed32:other.defaultFixed32];
  }
  if (other.hasDefaultFixed64) {
    [self setDefaultFixed64:other.defaultFixed64];
  }
  if (other.hasDefaultSfixed32) {
    [self setDefaultSfixed32:other.defaultSfixed32];
  }
  if (other.hasDefaultSfixed64) {
    [self setDefaultSfixed64:other.defaultSfixed64];
  }
  if (other.hasDefaultFloat) {
    [self setDefaultFloat:other.defaultFloat];
  }
  if (other.hasDefaultDouble) {
    [self setDefaultDouble:other.defaultDouble];
  }
  if (other.hasDefaultBool) {
    [self setDefaultBool:other.defaultBool];
  }
  if (other.hasDefaultString) {
    [self setDefaultString:other.defaultString];
  }
  if (other.hasDefaultBytes) {
    [self setDefaultBytes:other.defaultBytes];
  }
  if (other.hasDefaultNestedEnum) {
    [self setDefaultNestedEnum:other.defaultNestedEnum];
  }
  if (other.hasDefaultForeignEnum) {
    [self setDefaultForeignEnum:other.defaultForeignEnum];
  }
  if (other.hasDefaultImportEnum) {
    [self setDefaultImportEnum:other.defaultImportEnum];
  }
  if (other.hasDefaultStringPiece) {
    [self setDefaultStringPiece:other.defaultStringPiece];
  }
  if (other.hasDefaultCord) {
    [self setDefaultCord:other.defaultCord];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
      case 16: {
        [self setOptionalInt64:[input readInt64]];
        break;
      }
      case 24: {
        [self setOptionalUint32:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOptionalUint64:[input readUInt64]];
        break;
      }
      case 40: {
        [self setOptionalSint32:[input readSInt32]];
        break;
      }
      case 48: {
        [self setOptionalSint64:[input readSInt64]];
        break;
      }
      case 61: {
        [self setOptionalFixed32:[input readFixed32]];
        break;
      }
      case 65: {
        [self setOptionalFixed64:[input readFixed64]];
        break;
      }
      case 77: {
        [self setOptionalSfixed32:[input readSFixed32]];
        break;
      }
      case 81: {
        [self setOptionalSfixed64:[input readSFixed64]];
        break;
      }
      case 93: {
        [self setOptionalFloat:[input readFloat]];
        break;
      }
      case 97: {
        [self setOptionalDouble:[input readDouble]];
        break;
      }
      case 104: {
        [self setOptionalBool:[input readBool]];
        break;
      }
      case 114: {
        [self setOptionalString:[input readString]];
        break;
      }
      case 122: {
        [self setOptionalBytes:[input readData]];
        break;
      }
      case 131: {
        TestAllTypes_OptionalGroup_Builder* subBuilder = [TestAllTypes_OptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.OptionalGroup];
        }
        [input readGroup:16 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        TestAllTypes_NestedMessage_Builder* subBuilder = [TestAllTypes_NestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        if (self.hasOptionalForeignMessage) {
          [subBuilder mergeFrom:self.optionalForeignMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ImportMessage_Builder* subBuilder = [ImportMessage builder];
        if (self.hasOptionalImportMessage) {
          [subBuilder mergeFrom:self.optionalImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue(value)) {
          [self setOptionalNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:21 value:value];
        }
        break;
      }
      case 176: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setOptionalForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self setOptionalImportEnum:value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setOptionalStringPiece:[input readString]];
        break;
      }
      case 202: {
        [self setOptionalCord:[input readString]];
        break;
      }
      case 210: {
        PublicImportMessage_Builder* subBuilder = [PublicImportMessage builder];
        if (self.hasOptionalPublicImportMessage) {
          [subBuilder mergeFrom:self.optionalPublicImportMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalPublicImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        TestAllTypes_NestedMessage_Builder* subBuilder = [TestAllTypes_NestedMessage builder];
        if (self.hasOptionalLazyMessage) {
          [subBuilder mergeFrom:self.optionalLazyMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 248: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 256: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 264: {
        [self addRepeatedUint32:[input readUInt32]];
        break;
      }
      case 272: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
      case 280: {
        [self addRepeatedSint32:[input readSInt32]];
        break;
      }
      case 288: {
        [self addRepeatedSint64:[input readSInt64]];
        break;
      }
      case 301: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 305: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 317: {
        [self addRepeatedSfixed32:[input readSFixed32]];
        break;
      }
      case 321: {
        [self addRepeatedSfixed64:[input readSFixed64]];
        break;
      }
      case 333: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 337: {
        [self addRepeatedDouble:[input readDouble]];
        break;
      }
      case 344: {
        [self addRepeatedBool:[input readBool]];
        break;
      }
      case 354: {
        [self addRepeatedString:[input readString]];
        break;
      }
      case 362: {
        [self addRepeatedBytes:[input readData]];
        break;
      }
      case 371: {
        TestAllTypes_RepeatedGroup_Builder* subBuilder = [TestAllTypes_RepeatedGroup builder];
        [input readGroup:46 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
      case 386: {
        TestAllTypes_NestedMessage_Builder* subBuilder = [TestAllTypes_NestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedNestedMessage:[subBuilder buildPartial]];
        break;
      }
      case 394: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedForeignMessage:[subBuilder buildPartial]];
        break;
      }
      case 402: {
        ImportMessage_Builder* subBuilder = [ImportMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedImportMessage:[subBuilder buildPartial]];
        break;
      }
      case 408: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue(value)) {
          [self addRepeatedNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:51 value:value];
        }
        break;
      }
      case 416: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:52 value:value];
        }
        break;
      }
      case 424: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self addRepeatedImportEnum:value];
        } else {
          [unknownFields mergeVarintField:53 value:value];
        }
        break;
      }
      case 434: {
        [self addRepeatedStringPiece:[input readString]];
        break;
      }
      case 442: {
        [self addRepeatedCord:[input readString]];
        break;
      }
      case 458: {
        TestAllTypes_NestedMessage_Builder* subBuilder = [TestAllTypes_NestedMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedLazyMessage:[subBuilder buildPartial]];
        break;
      }
      case 488: {
        [self setDefaultInt32:[input readInt32]];
        break;
      }
      case 496: {
        [self setDefaultInt64:[input readInt64]];
        break;
      }
      case 504: {
        [self setDefaultUint32:[input readUInt32]];
        break;
      }
      case 512: {
        [self setDefaultUint64:[input readUInt64]];
        break;
      }
      case 520: {
        [self setDefaultSint32:[input readSInt32]];
        break;
      }
      case 528: {
        [self setDefaultSint64:[input readSInt64]];
        break;
      }
      case 541: {
        [self setDefaultFixed32:[input readFixed32]];
        break;
      }
      case 545: {
        [self setDefaultFixed64:[input readFixed64]];
        break;
      }
      case 557: {
        [self setDefaultSfixed32:[input readSFixed32]];
        break;
      }
      case 561: {
        [self setDefaultSfixed64:[input readSFixed64]];
        break;
      }
      case 573: {
        [self setDefaultFloat:[input readFloat]];
        break;
      }
      case 577: {
        [self setDefaultDouble:[input readDouble]];
        break;
      }
      case 584: {
        [self setDefaultBool:[input readBool]];
        break;
      }
      case 594: {
        [self setDefaultString:[input readString]];
        break;
      }
      case 602: {
        [self setDefaultBytes:[input readData]];
        break;
      }
      case 648: {
        int32_t value = [input readEnum];
        if (TestAllTypes_NestedEnumIsValidValue(value)) {
          [self setDefaultNestedEnum:value];
        } else {
          [unknownFields mergeVarintField:81 value:value];
        }
        break;
      }
      case 656: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setDefaultForeignEnum:value];
        } else {
          [unknownFields mergeVarintField:82 value:value];
        }
        break;
      }
      case 664: {
        int32_t value = [input readEnum];
        if (ImportEnumIsValidValue(value)) {
          [self setDefaultImportEnum:value];
        } else {
          [unknownFields mergeVarintField:83 value:value];
        }
        break;
      }
      case 674: {
        [self setDefaultStringPiece:[input readString]];
        break;
      }
      case 682: {
        [self setDefaultCord:[input readString]];
        break;
      }
    }
  }
}
- (BOOL)hasOptionalInt32 {
  return _result.hasOptionalInt32;
}
- (int32_t) optionalInt32 {
  return _result.optionalInt32;
}
- (instancetype)setOptionalInt32:(int32_t)value {
  _result.hasOptionalInt32 = YES;
  _result.optionalInt32 = value;
  return self;
}
- (instancetype)clearOptionalInt32 {
  _result.hasOptionalInt32 = NO;
  _result.optionalInt32 = 0;
  return self;
}
- (BOOL)hasOptionalInt64 {
  return _result.hasOptionalInt64;
}
- (int64_t) optionalInt64 {
  return _result.optionalInt64;
}
- (instancetype)setOptionalInt64:(int64_t)value {
  _result.hasOptionalInt64 = YES;
  _result.optionalInt64 = value;
  return self;
}
- (instancetype)clearOptionalInt64 {
  _result.hasOptionalInt64 = NO;
  _result.optionalInt64 = 0L;
  return self;
}
- (BOOL)hasOptionalUint32 {
  return _result.hasOptionalUint32;
}
- (uint32_t) optionalUint32 {
  return _result.optionalUint32;
}
- (instancetype)setOptionalUint32:(uint32_t)value {
  _result.hasOptionalUint32 = YES;
  _result.optionalUint32 = value;
  return self;
}
- (instancetype)clearOptionalUint32 {
  _result.hasOptionalUint32 = NO;
  _result.optionalUint32 = 0;
  return self;
}
- (BOOL)hasOptionalUint64 {
  return _result.hasOptionalUint64;
}
- (uint64_t) optionalUint64 {
  return _result.optionalUint64;
}
- (instancetype)setOptionalUint64:(uint64_t)value {
  _result.hasOptionalUint64 = YES;
  _result.optionalUint64 = value;
  return self;
}
- (instancetype)clearOptionalUint64 {
  _result.hasOptionalUint64 = NO;
  _result.optionalUint64 = 0L;
  return self;
}
- (BOOL)hasOptionalSint32 {
  return _result.hasOptionalSint32;
}
- (int32_t) optionalSint32 {
  return _result.optionalSint32;
}
- (instancetype)setOptionalSint32:(int32_t)value {
  _result.hasOptionalSint32 = YES;
  _result.optionalSint32 = value;
  return self;
}
- (instancetype)clearOptionalSint32 {
  _result.hasOptionalSint32 = NO;
  _result.optionalSint32 = 0;
  return self;
}
- (BOOL)hasOptionalSint64 {
  return _result.hasOptionalSint64;
}
- (int64_t) optionalSint64 {
  return _result.optionalSint64;
}
- (instancetype)setOptionalSint64:(int64_t)value {
  _result.hasOptionalSint64 = YES;
  _result.optionalSint64 = value;
  return self;
}
- (instancetype)clearOptionalSint64 {
  _result.hasOptionalSint64 = NO;
  _result.optionalSint64 = 0L;
  return self;
}
- (BOOL)hasOptionalFixed32 {
  return _result.hasOptionalFixed32;
}
- (uint32_t) optionalFixed32 {
  return _result.optionalFixed32;
}
- (instancetype)setOptionalFixed32:(uint32_t)value {
  _result.hasOptionalFixed32 = YES;
  _result.optionalFixed32 = value;
  return self;
}
- (instancetype)clearOptionalFixed32 {
  _result.hasOptionalFixed32 = NO;
  _result.optionalFixed32 = 0;
  return self;
}
- (BOOL)hasOptionalFixed64 {
  return _result.hasOptionalFixed64;
}
- (uint64_t) optionalFixed64 {
  return _result.optionalFixed64;
}
- (instancetype)setOptionalFixed64:(uint64_t)value {
  _result.hasOptionalFixed64 = YES;
  _result.optionalFixed64 = value;
  return self;
}
- (instancetype)clearOptionalFixed64 {
  _result.hasOptionalFixed64 = NO;
  _result.optionalFixed64 = 0L;
  return self;
}
- (BOOL)hasOptionalSfixed32 {
  return _result.hasOptionalSfixed32;
}
- (int32_t) optionalSfixed32 {
  return _result.optionalSfixed32;
}
- (instancetype)setOptionalSfixed32:(int32_t)value {
  _result.hasOptionalSfixed32 = YES;
  _result.optionalSfixed32 = value;
  return self;
}
- (instancetype)clearOptionalSfixed32 {
  _result.hasOptionalSfixed32 = NO;
  _result.optionalSfixed32 = 0;
  return self;
}
- (BOOL)hasOptionalSfixed64 {
  return _result.hasOptionalSfixed64;
}
- (int64_t) optionalSfixed64 {
  return _result.optionalSfixed64;
}
- (instancetype)setOptionalSfixed64:(int64_t)value {
  _result.hasOptionalSfixed64 = YES;
  _result.optionalSfixed64 = value;
  return self;
}
- (instancetype)clearOptionalSfixed64 {
  _result.hasOptionalSfixed64 = NO;
  _result.optionalSfixed64 = 0L;
  return self;
}
- (BOOL)hasOptionalFloat {
  return _result.hasOptionalFloat;
}
- (Float32) optionalFloat {
  return _result.optionalFloat;
}
- (instancetype)setOptionalFloat:(Float32)value {
  _result.hasOptionalFloat = YES;
  _result.optionalFloat = value;
  return self;
}
- (instancetype)clearOptionalFloat {
  _result.hasOptionalFloat = NO;
  _result.optionalFloat = 0;
  return self;
}
- (BOOL)hasOptionalDouble {
  return _result.hasOptionalDouble;
}
- (Float64) optionalDouble {
  return _result.optionalDouble;
}
- (instancetype)setOptionalDouble:(Float64)value {
  _result.hasOptionalDouble = YES;
  _result.optionalDouble = value;
  return self;
}
- (instancetype)clearOptionalDouble {
  _result.hasOptionalDouble = NO;
  _result.optionalDouble = 0;
  return self;
}
- (BOOL)hasOptionalBool {
  return _result.hasOptionalBool;
}
- (BOOL) optionalBool {
  return _result.optionalBool;
}
- (instancetype)setOptionalBool:(BOOL)value {
  _result.hasOptionalBool = YES;
  _result.optionalBool = value;
  return self;
}
- (instancetype)clearOptionalBool {
  _result.hasOptionalBool = NO;
  _result.optionalBool = NO;
  return self;
}
- (BOOL)hasOptionalString {
  return _result.hasOptionalString;
}
- (NSString *) optionalString {
  return _result.optionalString;
}
- (instancetype)setOptionalString:(NSString *)value {
  _result.hasOptionalString = YES;
  _result.optionalString = value;
  return self;
}
- (instancetype)clearOptionalString {
  _result.hasOptionalString = NO;
  _result.optionalString = @"";
  return self;
}
- (BOOL)hasOptionalBytes {
  return _result.hasOptionalBytes;
}
- (NSData *) optionalBytes {
  return _result.optionalBytes;
}
- (instancetype)setOptionalBytes:(NSData *)value {
  _result.hasOptionalBytes = YES;
  _result.optionalBytes = value;
  return self;
}
- (instancetype)clearOptionalBytes {
  _result.hasOptionalBytes = NO;
  _result.optionalBytes = [NSData data];
  return self;
}
- (BOOL)hasOptionalGroup {
  return _result.hasOptionalGroup;
}
- (TestAllTypes_OptionalGroup*)OptionalGroup {
  return _result.OptionalGroup;
}
- (instancetype)setOptionalGroup:(TestAllTypes_OptionalGroup*)value {
  _result.hasOptionalGroup = YES;
  _result.OptionalGroup = value;
  return self;
}
- (instancetype)setOptionalGroupBuilder:(TestAllTypes_OptionalGroup_Builder*)builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (instancetype)mergeOptionalGroup:(TestAllTypes_OptionalGroup*)value {
  if (_result.hasOptionalGroup &&
      _result.OptionalGroup != [TestAllTypes_OptionalGroup defaultInstance]) {
    _result.OptionalGroup =
      [[[TestAllTypes_OptionalGroup builderWithPrototype:_result.OptionalGroup] mergeFrom:value] buildPartial];
  } else {
    _result.OptionalGroup = value;
  }
  _result.hasOptionalGroup = YES;
  return self;
}
- (instancetype)clearOptionalGroup {
  _result.hasOptionalGroup = NO;
  _result.OptionalGroup = [TestAllTypes_OptionalGroup defaultInstance];
  return self;
}
- (BOOL)hasOptionalNestedMessage {
  return _result.hasOptionalNestedMessage;
}
- (TestAllTypes_NestedMessage*)optionalNestedMessage {
  return _result.optionalNestedMessage;
}
- (instancetype)setOptionalNestedMessage:(TestAllTypes_NestedMessage*)value {
  _result.hasOptionalNestedMessage = YES;
  _result.optionalNestedMessage = value;
  return self;
}
- (instancetype)setOptionalNestedMessageBuilder:(TestAllTypes_NestedMessage_Builder*)builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalNestedMessage:(TestAllTypes_NestedMessage*)value {
  if (_result.hasOptionalNestedMessage &&
      _result.optionalNestedMessage != [TestAllTypes_NestedMessage defaultInstance]) {
    _result.optionalNestedMessage =
      [[[TestAllTypes_NestedMessage builderWithPrototype:_result.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalNestedMessage = value;
  }
  _result.hasOptionalNestedMessage = YES;
  return self;
}
- (instancetype)clearOptionalNestedMessage {
  _result.hasOptionalNestedMessage = NO;
  _result.optionalNestedMessage = [TestAllTypes_NestedMessage defaultInstance];
  return self;
}
- (BOOL)hasOptionalForeignMessage {
  return _result.hasOptionalForeignMessage;
}
- (ForeignMessage*)optionalForeignMessage {
  return _result.optionalForeignMessage;
}
- (instancetype)setOptionalForeignMessage:(ForeignMessage*)value {
  _result.hasOptionalForeignMessage = YES;
  _result.optionalForeignMessage = value;
  return self;
}
- (instancetype)setOptionalForeignMessageBuilder:(ForeignMessage_Builder*)builderForValue {
  return [self setOptionalForeignMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalForeignMessage:(ForeignMessage*)value {
  if (_result.hasOptionalForeignMessage &&
      _result.optionalForeignMessage != [ForeignMessage defaultInstance]) {
    _result.optionalForeignMessage =
      [[[ForeignMessage builderWithPrototype:_result.optionalForeignMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalForeignMessage = value;
  }
  _result.hasOptionalForeignMessage = YES;
  return self;
}
- (instancetype)clearOptionalForeignMessage {
  _result.hasOptionalForeignMessage = NO;
  _result.optionalForeignMessage = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL)hasOptionalImportMessage {
  return _result.hasOptionalImportMessage;
}
- (ImportMessage*)optionalImportMessage {
  return _result.optionalImportMessage;
}
- (instancetype)setOptionalImportMessage:(ImportMessage*)value {
  _result.hasOptionalImportMessage = YES;
  _result.optionalImportMessage = value;
  return self;
}
- (instancetype)setOptionalImportMessageBuilder:(ImportMessage_Builder*)builderForValue {
  return [self setOptionalImportMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalImportMessage:(ImportMessage*)value {
  if (_result.hasOptionalImportMessage &&
      _result.optionalImportMessage != [ImportMessage defaultInstance]) {
    _result.optionalImportMessage =
      [[[ImportMessage builderWithPrototype:_result.optionalImportMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalImportMessage = value;
  }
  _result.hasOptionalImportMessage = YES;
  return self;
}
- (instancetype)clearOptionalImportMessage {
  _result.hasOptionalImportMessage = NO;
  _result.optionalImportMessage = [ImportMessage defaultInstance];
  return self;
}
- (BOOL)hasOptionalNestedEnum {
  return _result.hasOptionalNestedEnum;
}
- (TestAllTypes_NestedEnum)optionalNestedEnum {
  return _result.optionalNestedEnum;
}
- (TestAllTypes_Builder*)setOptionalNestedEnum:(TestAllTypes_NestedEnum)value {
  _result.hasOptionalNestedEnum = YES;
  _result.optionalNestedEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearOptionalNestedEnum {
  _result.hasOptionalNestedEnum = NO;
  _result.optionalNestedEnum = TestAllTypes_NestedEnumFOO;
  return self;
}
- (BOOL)hasOptionalForeignEnum {
  return _result.hasOptionalForeignEnum;
}
- (ForeignEnum)optionalForeignEnum {
  return _result.optionalForeignEnum;
}
- (TestAllTypes_Builder*)setOptionalForeignEnum:(ForeignEnum)value {
  _result.hasOptionalForeignEnum = YES;
  _result.optionalForeignEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearOptionalForeignEnum {
  _result.hasOptionalForeignEnum = NO;
  _result.optionalForeignEnum = ForeignEnumFOREIGNFOO;
  return self;
}
- (BOOL)hasOptionalImportEnum {
  return _result.hasOptionalImportEnum;
}
- (ImportEnum)optionalImportEnum {
  return _result.optionalImportEnum;
}
- (TestAllTypes_Builder*)setOptionalImportEnum:(ImportEnum)value {
  _result.hasOptionalImportEnum = YES;
  _result.optionalImportEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearOptionalImportEnum {
  _result.hasOptionalImportEnum = NO;
  _result.optionalImportEnum = ImportEnumIMPORTFOO;
  return self;
}
- (BOOL)hasOptionalStringPiece {
  return _result.hasOptionalStringPiece;
}
- (NSString *) optionalStringPiece {
  return _result.optionalStringPiece;
}
- (instancetype)setOptionalStringPiece:(NSString *)value {
  _result.hasOptionalStringPiece = YES;
  _result.optionalStringPiece = value;
  return self;
}
- (instancetype)clearOptionalStringPiece {
  _result.hasOptionalStringPiece = NO;
  _result.optionalStringPiece = @"";
  return self;
}
- (BOOL)hasOptionalCord {
  return _result.hasOptionalCord;
}
- (NSString *) optionalCord {
  return _result.optionalCord;
}
- (instancetype)setOptionalCord:(NSString *)value {
  _result.hasOptionalCord = YES;
  _result.optionalCord = value;
  return self;
}
- (instancetype)clearOptionalCord {
  _result.hasOptionalCord = NO;
  _result.optionalCord = @"";
  return self;
}
- (BOOL)hasOptionalPublicImportMessage {
  return _result.hasOptionalPublicImportMessage;
}
- (PublicImportMessage*)optionalPublicImportMessage {
  return _result.optionalPublicImportMessage;
}
- (instancetype)setOptionalPublicImportMessage:(PublicImportMessage*)value {
  _result.hasOptionalPublicImportMessage = YES;
  _result.optionalPublicImportMessage = value;
  return self;
}
- (instancetype)setOptionalPublicImportMessageBuilder:(PublicImportMessage_Builder*)builderForValue {
  return [self setOptionalPublicImportMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalPublicImportMessage:(PublicImportMessage*)value {
  if (_result.hasOptionalPublicImportMessage &&
      _result.optionalPublicImportMessage != [PublicImportMessage defaultInstance]) {
    _result.optionalPublicImportMessage =
      [[[PublicImportMessage builderWithPrototype:_result.optionalPublicImportMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalPublicImportMessage = value;
  }
  _result.hasOptionalPublicImportMessage = YES;
  return self;
}
- (instancetype)clearOptionalPublicImportMessage {
  _result.hasOptionalPublicImportMessage = NO;
  _result.optionalPublicImportMessage = [PublicImportMessage defaultInstance];
  return self;
}
- (BOOL)hasOptionalLazyMessage {
  return _result.hasOptionalLazyMessage;
}
- (TestAllTypes_NestedMessage*)optionalLazyMessage {
  return _result.optionalLazyMessage;
}
- (instancetype)setOptionalLazyMessage:(TestAllTypes_NestedMessage*)value {
  _result.hasOptionalLazyMessage = YES;
  _result.optionalLazyMessage = value;
  return self;
}
- (instancetype)setOptionalLazyMessageBuilder:(TestAllTypes_NestedMessage_Builder*)builderForValue {
  return [self setOptionalLazyMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalLazyMessage:(TestAllTypes_NestedMessage*)value {
  if (_result.hasOptionalLazyMessage &&
      _result.optionalLazyMessage != [TestAllTypes_NestedMessage defaultInstance]) {
    _result.optionalLazyMessage =
      [[[TestAllTypes_NestedMessage builderWithPrototype:_result.optionalLazyMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalLazyMessage = value;
  }
  _result.hasOptionalLazyMessage = YES;
  return self;
}
- (instancetype)clearOptionalLazyMessage {
  _result.hasOptionalLazyMessage = NO;
  _result.optionalLazyMessage = [TestAllTypes_NestedMessage defaultInstance];
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return _result.repeatedInt32Array;
}
- (int32_t)repeatedInt32AtIndex:(NSUInteger)index {
  return [_result repeatedInt32AtIndex:index];
}
- (instancetype)addRepeatedInt32:(int32_t)value {
  if (_result.repeatedInt32Array == nil) {
    _result.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.repeatedInt32Array addInt32:value];
  return self;
}
- (instancetype)setRepeatedInt32Array:(NSArray *)array {
  _result.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearRepeatedInt32 {
  _result.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return _result.repeatedInt64Array;
}
- (int64_t)repeatedInt64AtIndex:(NSUInteger)index {
  return [_result repeatedInt64AtIndex:index];
}
- (instancetype)addRepeatedInt64:(int64_t)value {
  if (_result.repeatedInt64Array == nil) {
    _result.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.repeatedInt64Array addInt64:value];
  return self;
}
- (instancetype)setRepeatedInt64Array:(NSArray *)array {
  _result.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearRepeatedInt64 {
  _result.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint32 {
  return _result.repeatedUint32Array;
}
- (uint32_t)repeatedUint32AtIndex:(NSUInteger)index {
  return [_result repeatedUint32AtIndex:index];
}
- (instancetype)addRepeatedUint32:(uint32_t)value {
  if (_result.repeatedUint32Array == nil) {
    _result.repeatedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.repeatedUint32Array addUint32:value];
  return self;
}
- (instancetype)setRepeatedUint32Array:(NSArray *)array {
  _result.repeatedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setRepeatedUint32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.repeatedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearRepeatedUint32 {
  _result.repeatedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return _result.repeatedUint64Array;
}
- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index {
  return [_result repeatedUint64AtIndex:index];
}
- (instancetype)addRepeatedUint64:(uint64_t)value {
  if (_result.repeatedUint64Array == nil) {
    _result.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.repeatedUint64Array addUint64:value];
  return self;
}
- (instancetype)setRepeatedUint64Array:(NSArray *)array {
  _result.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearRepeatedUint64 {
  _result.repeatedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint32 {
  return _result.repeatedSint32Array;
}
- (int32_t)repeatedSint32AtIndex:(NSUInteger)index {
  return [_result repeatedSint32AtIndex:index];
}
- (instancetype)addRepeatedSint32:(int32_t)value {
  if (_result.repeatedSint32Array == nil) {
    _result.repeatedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.repeatedSint32Array addInt32:value];
  return self;
}
- (instancetype)setRepeatedSint32Array:(NSArray *)array {
  _result.repeatedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setRepeatedSint32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.repeatedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearRepeatedSint32 {
  _result.repeatedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSint64 {
  return _result.repeatedSint64Array;
}
- (int64_t)repeatedSint64AtIndex:(NSUInteger)index {
  return [_result repeatedSint64AtIndex:index];
}
- (instancetype)addRepeatedSint64:(int64_t)value {
  if (_result.repeatedSint64Array == nil) {
    _result.repeatedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.repeatedSint64Array addInt64:value];
  return self;
}
- (instancetype)setRepeatedSint64Array:(NSArray *)array {
  _result.repeatedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setRepeatedSint64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.repeatedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearRepeatedSint64 {
  _result.repeatedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed32 {
  return _result.repeatedFixed32Array;
}
- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index {
  return [_result repeatedFixed32AtIndex:index];
}
- (instancetype)addRepeatedFixed32:(uint32_t)value {
  if (_result.repeatedFixed32Array == nil) {
    _result.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.repeatedFixed32Array addUint32:value];
  return self;
}
- (instancetype)setRepeatedFixed32Array:(NSArray *)array {
  _result.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearRepeatedFixed32 {
  _result.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return _result.repeatedFixed64Array;
}
- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index {
  return [_result repeatedFixed64AtIndex:index];
}
- (instancetype)addRepeatedFixed64:(uint64_t)value {
  if (_result.repeatedFixed64Array == nil) {
    _result.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.repeatedFixed64Array addUint64:value];
  return self;
}
- (instancetype)setRepeatedFixed64Array:(NSArray *)array {
  _result.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearRepeatedFixed64 {
  _result.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed32 {
  return _result.repeatedSfixed32Array;
}
- (int32_t)repeatedSfixed32AtIndex:(NSUInteger)index {
  return [_result repeatedSfixed32AtIndex:index];
}
- (instancetype)addRepeatedSfixed32:(int32_t)value {
  if (_result.repeatedSfixed32Array == nil) {
    _result.repeatedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.repeatedSfixed32Array addInt32:value];
  return self;
}
- (instancetype)setRepeatedSfixed32Array:(NSArray *)array {
  _result.repeatedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setRepeatedSfixed32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.repeatedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearRepeatedSfixed32 {
  _result.repeatedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedSfixed64 {
  return _result.repeatedSfixed64Array;
}
- (int64_t)repeatedSfixed64AtIndex:(NSUInteger)index {
  return [_result repeatedSfixed64AtIndex:index];
}
- (instancetype)addRepeatedSfixed64:(int64_t)value {
  if (_result.repeatedSfixed64Array == nil) {
    _result.repeatedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.repeatedSfixed64Array addInt64:value];
  return self;
}
- (instancetype)setRepeatedSfixed64Array:(NSArray *)array {
  _result.repeatedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setRepeatedSfixed64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.repeatedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearRepeatedSfixed64 {
  _result.repeatedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return _result.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [_result repeatedFloatAtIndex:index];
}
- (instancetype)addRepeatedFloat:(Float32)value {
  if (_result.repeatedFloatArray == nil) {
    _result.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_result.repeatedFloatArray addFloat:value];
  return self;
}
- (instancetype)setRepeatedFloatArray:(NSArray *)array {
  _result.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  _result.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)clearRepeatedFloat {
  _result.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedDouble {
  return _result.repeatedDoubleArray;
}
- (Float64)repeatedDoubleAtIndex:(NSUInteger)index {
  return [_result repeatedDoubleAtIndex:index];
}
- (instancetype)addRepeatedDouble:(Float64)value {
  if (_result.repeatedDoubleArray == nil) {
    _result.repeatedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_result.repeatedDoubleArray addDouble:value];
  return self;
}
- (instancetype)setRepeatedDoubleArray:(NSArray *)array {
  _result.repeatedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)setRepeatedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  _result.repeatedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)clearRepeatedDouble {
  _result.repeatedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedBool {
  return _result.repeatedBoolArray;
}
- (BOOL)repeatedBoolAtIndex:(NSUInteger)index {
  return [_result repeatedBoolAtIndex:index];
}
- (instancetype)addRepeatedBool:(BOOL)value {
  if (_result.repeatedBoolArray == nil) {
    _result.repeatedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_result.repeatedBoolArray addBool:value];
  return self;
}
- (instancetype)setRepeatedBoolArray:(NSArray *)array {
  _result.repeatedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)setRepeatedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  _result.repeatedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)clearRepeatedBool {
  _result.repeatedBoolArray = nil;
  return self;
}
- (NSMutableArray *)repeatedString {
  return _result.repeatedStringArray;
}
- (NSString *)repeatedStringAtIndex:(NSUInteger)index {
  return [_result repeatedStringAtIndex:index];
}
- (instancetype)addRepeatedString:(NSString *)value {
  if (_result.repeatedStringArray == nil) {
    _result.repeatedStringArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedStringArray addObject:value];
  return self;
}
- (instancetype)setRepeatedStringArray:(NSArray *)array {
  _result.repeatedStringArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedString {
  _result.repeatedStringArray = nil;
  return self;
}
- (NSMutableArray *)repeatedBytes {
  return _result.repeatedBytesArray;
}
- (NSData *)repeatedBytesAtIndex:(NSUInteger)index {
  return [_result repeatedBytesAtIndex:index];
}
- (instancetype)addRepeatedBytes:(NSData *)value {
  if (_result.repeatedBytesArray == nil) {
    _result.repeatedBytesArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedBytesArray addObject:value];
  return self;
}
- (instancetype)setRepeatedBytesArray:(NSArray *)array {
  _result.repeatedBytesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedBytes {
  _result.repeatedBytesArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedGroup {
  return _result.RepeatedGroupArray;
}
- (TestAllTypes_RepeatedGroup*)RepeatedGroupAtIndex:(NSUInteger)index {
  return [_result RepeatedGroupAtIndex:index];
}
- (instancetype)addRepeatedGroup:(TestAllTypes_RepeatedGroup*)value {
  if (_result.RepeatedGroupArray == nil) {
    _result.RepeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedGroupArray addObject:value];
  return self;
}
- (instancetype)setRepeatedGroupArray:(NSArray *)array {
  _result.RepeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedGroup {
  _result.RepeatedGroupArray = nil;
  return self;
}
- (NSMutableArray *)repeatedNestedMessage {
  return _result.repeatedNestedMessageArray;
}
- (TestAllTypes_NestedMessage*)repeatedNestedMessageAtIndex:(NSUInteger)index {
  return [_result repeatedNestedMessageAtIndex:index];
}
- (instancetype)addRepeatedNestedMessage:(TestAllTypes_NestedMessage*)value {
  if (_result.repeatedNestedMessageArray == nil) {
    _result.repeatedNestedMessageArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedNestedMessageArray addObject:value];
  return self;
}
- (instancetype)setRepeatedNestedMessageArray:(NSArray *)array {
  _result.repeatedNestedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedNestedMessage {
  _result.repeatedNestedMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedForeignMessage {
  return _result.repeatedForeignMessageArray;
}
- (ForeignMessage*)repeatedForeignMessageAtIndex:(NSUInteger)index {
  return [_result repeatedForeignMessageAtIndex:index];
}
- (instancetype)addRepeatedForeignMessage:(ForeignMessage*)value {
  if (_result.repeatedForeignMessageArray == nil) {
    _result.repeatedForeignMessageArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedForeignMessageArray addObject:value];
  return self;
}
- (instancetype)setRepeatedForeignMessageArray:(NSArray *)array {
  _result.repeatedForeignMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedForeignMessage {
  _result.repeatedForeignMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedImportMessage {
  return _result.repeatedImportMessageArray;
}
- (ImportMessage*)repeatedImportMessageAtIndex:(NSUInteger)index {
  return [_result repeatedImportMessageAtIndex:index];
}
- (instancetype)addRepeatedImportMessage:(ImportMessage*)value {
  if (_result.repeatedImportMessageArray == nil) {
    _result.repeatedImportMessageArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedImportMessageArray addObject:value];
  return self;
}
- (instancetype)setRepeatedImportMessageArray:(NSArray *)array {
  _result.repeatedImportMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedImportMessage {
  _result.repeatedImportMessageArray = nil;
  return self;
}
- (NSMutableArray *)repeatedNestedEnum {
  return _result.repeatedNestedEnumArray;
}
- (TestAllTypes_NestedEnum)repeatedNestedEnumAtIndex:(NSUInteger)index {
  return [_result repeatedNestedEnumAtIndex:index];
}
- (TestAllTypes_Builder *)addRepeatedNestedEnum:(TestAllTypes_NestedEnum)value {
  if (_result.repeatedNestedEnumArray == nil) {
    _result.repeatedNestedEnumArray = [NSMutableArray array];
  }
  [_result.repeatedNestedEnumArray addObject:@(value)];
  return self;
}
- (TestAllTypes_Builder *)setRepeatedNestedEnumArray:(NSArray *)array {
  _result.repeatedNestedEnumArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestAllTypes_Builder *)clearRepeatedNestedEnum {
  _result.repeatedNestedEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedForeignEnum {
  return _result.repeatedForeignEnumArray;
}
- (ForeignEnum)repeatedForeignEnumAtIndex:(NSUInteger)index {
  return [_result repeatedForeignEnumAtIndex:index];
}
- (TestAllTypes_Builder *)addRepeatedForeignEnum:(ForeignEnum)value {
  if (_result.repeatedForeignEnumArray == nil) {
    _result.repeatedForeignEnumArray = [NSMutableArray array];
  }
  [_result.repeatedForeignEnumArray addObject:@(value)];
  return self;
}
- (TestAllTypes_Builder *)setRepeatedForeignEnumArray:(NSArray *)array {
  _result.repeatedForeignEnumArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestAllTypes_Builder *)clearRepeatedForeignEnum {
  _result.repeatedForeignEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedImportEnum {
  return _result.repeatedImportEnumArray;
}
- (ImportEnum)repeatedImportEnumAtIndex:(NSUInteger)index {
  return [_result repeatedImportEnumAtIndex:index];
}
- (TestAllTypes_Builder *)addRepeatedImportEnum:(ImportEnum)value {
  if (_result.repeatedImportEnumArray == nil) {
    _result.repeatedImportEnumArray = [NSMutableArray array];
  }
  [_result.repeatedImportEnumArray addObject:@(value)];
  return self;
}
- (TestAllTypes_Builder *)setRepeatedImportEnumArray:(NSArray *)array {
  _result.repeatedImportEnumArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestAllTypes_Builder *)clearRepeatedImportEnum {
  _result.repeatedImportEnumArray = nil;
  return self;
}
- (NSMutableArray *)repeatedStringPiece {
  return _result.repeatedStringPieceArray;
}
- (NSString *)repeatedStringPieceAtIndex:(NSUInteger)index {
  return [_result repeatedStringPieceAtIndex:index];
}
- (instancetype)addRepeatedStringPiece:(NSString *)value {
  if (_result.repeatedStringPieceArray == nil) {
    _result.repeatedStringPieceArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedStringPieceArray addObject:value];
  return self;
}
- (instancetype)setRepeatedStringPieceArray:(NSArray *)array {
  _result.repeatedStringPieceArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedStringPiece {
  _result.repeatedStringPieceArray = nil;
  return self;
}
- (NSMutableArray *)repeatedCord {
  return _result.repeatedCordArray;
}
- (NSString *)repeatedCordAtIndex:(NSUInteger)index {
  return [_result repeatedCordAtIndex:index];
}
- (instancetype)addRepeatedCord:(NSString *)value {
  if (_result.repeatedCordArray == nil) {
    _result.repeatedCordArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedCordArray addObject:value];
  return self;
}
- (instancetype)setRepeatedCordArray:(NSArray *)array {
  _result.repeatedCordArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedCord {
  _result.repeatedCordArray = nil;
  return self;
}
- (NSMutableArray *)repeatedLazyMessage {
  return _result.repeatedLazyMessageArray;
}
- (TestAllTypes_NestedMessage*)repeatedLazyMessageAtIndex:(NSUInteger)index {
  return [_result repeatedLazyMessageAtIndex:index];
}
- (instancetype)addRepeatedLazyMessage:(TestAllTypes_NestedMessage*)value {
  if (_result.repeatedLazyMessageArray == nil) {
    _result.repeatedLazyMessageArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedLazyMessageArray addObject:value];
  return self;
}
- (instancetype)setRepeatedLazyMessageArray:(NSArray *)array {
  _result.repeatedLazyMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedLazyMessage {
  _result.repeatedLazyMessageArray = nil;
  return self;
}
- (BOOL)hasDefaultInt32 {
  return _result.hasDefaultInt32;
}
- (int32_t) defaultInt32 {
  return _result.defaultInt32;
}
- (instancetype)setDefaultInt32:(int32_t)value {
  _result.hasDefaultInt32 = YES;
  _result.defaultInt32 = value;
  return self;
}
- (instancetype)clearDefaultInt32 {
  _result.hasDefaultInt32 = NO;
  _result.defaultInt32 = 41;
  return self;
}
- (BOOL)hasDefaultInt64 {
  return _result.hasDefaultInt64;
}
- (int64_t) defaultInt64 {
  return _result.defaultInt64;
}
- (instancetype)setDefaultInt64:(int64_t)value {
  _result.hasDefaultInt64 = YES;
  _result.defaultInt64 = value;
  return self;
}
- (instancetype)clearDefaultInt64 {
  _result.hasDefaultInt64 = NO;
  _result.defaultInt64 = 42L;
  return self;
}
- (BOOL)hasDefaultUint32 {
  return _result.hasDefaultUint32;
}
- (uint32_t) defaultUint32 {
  return _result.defaultUint32;
}
- (instancetype)setDefaultUint32:(uint32_t)value {
  _result.hasDefaultUint32 = YES;
  _result.defaultUint32 = value;
  return self;
}
- (instancetype)clearDefaultUint32 {
  _result.hasDefaultUint32 = NO;
  _result.defaultUint32 = 43;
  return self;
}
- (BOOL)hasDefaultUint64 {
  return _result.hasDefaultUint64;
}
- (uint64_t) defaultUint64 {
  return _result.defaultUint64;
}
- (instancetype)setDefaultUint64:(uint64_t)value {
  _result.hasDefaultUint64 = YES;
  _result.defaultUint64 = value;
  return self;
}
- (instancetype)clearDefaultUint64 {
  _result.hasDefaultUint64 = NO;
  _result.defaultUint64 = 44L;
  return self;
}
- (BOOL)hasDefaultSint32 {
  return _result.hasDefaultSint32;
}
- (int32_t) defaultSint32 {
  return _result.defaultSint32;
}
- (instancetype)setDefaultSint32:(int32_t)value {
  _result.hasDefaultSint32 = YES;
  _result.defaultSint32 = value;
  return self;
}
- (instancetype)clearDefaultSint32 {
  _result.hasDefaultSint32 = NO;
  _result.defaultSint32 = -45;
  return self;
}
- (BOOL)hasDefaultSint64 {
  return _result.hasDefaultSint64;
}
- (int64_t) defaultSint64 {
  return _result.defaultSint64;
}
- (instancetype)setDefaultSint64:(int64_t)value {
  _result.hasDefaultSint64 = YES;
  _result.defaultSint64 = value;
  return self;
}
- (instancetype)clearDefaultSint64 {
  _result.hasDefaultSint64 = NO;
  _result.defaultSint64 = 46L;
  return self;
}
- (BOOL)hasDefaultFixed32 {
  return _result.hasDefaultFixed32;
}
- (uint32_t) defaultFixed32 {
  return _result.defaultFixed32;
}
- (instancetype)setDefaultFixed32:(uint32_t)value {
  _result.hasDefaultFixed32 = YES;
  _result.defaultFixed32 = value;
  return self;
}
- (instancetype)clearDefaultFixed32 {
  _result.hasDefaultFixed32 = NO;
  _result.defaultFixed32 = 47;
  return self;
}
- (BOOL)hasDefaultFixed64 {
  return _result.hasDefaultFixed64;
}
- (uint64_t) defaultFixed64 {
  return _result.defaultFixed64;
}
- (instancetype)setDefaultFixed64:(uint64_t)value {
  _result.hasDefaultFixed64 = YES;
  _result.defaultFixed64 = value;
  return self;
}
- (instancetype)clearDefaultFixed64 {
  _result.hasDefaultFixed64 = NO;
  _result.defaultFixed64 = 48L;
  return self;
}
- (BOOL)hasDefaultSfixed32 {
  return _result.hasDefaultSfixed32;
}
- (int32_t) defaultSfixed32 {
  return _result.defaultSfixed32;
}
- (instancetype)setDefaultSfixed32:(int32_t)value {
  _result.hasDefaultSfixed32 = YES;
  _result.defaultSfixed32 = value;
  return self;
}
- (instancetype)clearDefaultSfixed32 {
  _result.hasDefaultSfixed32 = NO;
  _result.defaultSfixed32 = 49;
  return self;
}
- (BOOL)hasDefaultSfixed64 {
  return _result.hasDefaultSfixed64;
}
- (int64_t) defaultSfixed64 {
  return _result.defaultSfixed64;
}
- (instancetype)setDefaultSfixed64:(int64_t)value {
  _result.hasDefaultSfixed64 = YES;
  _result.defaultSfixed64 = value;
  return self;
}
- (instancetype)clearDefaultSfixed64 {
  _result.hasDefaultSfixed64 = NO;
  _result.defaultSfixed64 = -50L;
  return self;
}
- (BOOL)hasDefaultFloat {
  return _result.hasDefaultFloat;
}
- (Float32) defaultFloat {
  return _result.defaultFloat;
}
- (instancetype)setDefaultFloat:(Float32)value {
  _result.hasDefaultFloat = YES;
  _result.defaultFloat = value;
  return self;
}
- (instancetype)clearDefaultFloat {
  _result.hasDefaultFloat = NO;
  _result.defaultFloat = 51.5;
  return self;
}
- (BOOL)hasDefaultDouble {
  return _result.hasDefaultDouble;
}
- (Float64) defaultDouble {
  return _result.defaultDouble;
}
- (instancetype)setDefaultDouble:(Float64)value {
  _result.hasDefaultDouble = YES;
  _result.defaultDouble = value;
  return self;
}
- (instancetype)clearDefaultDouble {
  _result.hasDefaultDouble = NO;
  _result.defaultDouble = 52000;
  return self;
}
- (BOOL)hasDefaultBool {
  return _result.hasDefaultBool;
}
- (BOOL) defaultBool {
  return _result.defaultBool;
}
- (instancetype)setDefaultBool:(BOOL)value {
  _result.hasDefaultBool = YES;
  _result.defaultBool = value;
  return self;
}
- (instancetype)clearDefaultBool {
  _result.hasDefaultBool = NO;
  _result.defaultBool = YES;
  return self;
}
- (BOOL)hasDefaultString {
  return _result.hasDefaultString;
}
- (NSString *) defaultString {
  return _result.defaultString;
}
- (instancetype)setDefaultString:(NSString *)value {
  _result.hasDefaultString = YES;
  _result.defaultString = value;
  return self;
}
- (instancetype)clearDefaultString {
  _result.hasDefaultString = NO;
  _result.defaultString = @"hello";
  return self;
}
- (BOOL)hasDefaultBytes {
  return _result.hasDefaultBytes;
}
- (NSData *) defaultBytes {
  return _result.defaultBytes;
}
- (instancetype)setDefaultBytes:(NSData *)value {
  _result.hasDefaultBytes = YES;
  _result.defaultBytes = value;
  return self;
}
- (instancetype)clearDefaultBytes {
  _result.hasDefaultBytes = NO;
  _result.defaultBytes = [NSData dataWithBytes:"world" length:5];
  return self;
}
- (BOOL)hasDefaultNestedEnum {
  return _result.hasDefaultNestedEnum;
}
- (TestAllTypes_NestedEnum)defaultNestedEnum {
  return _result.defaultNestedEnum;
}
- (TestAllTypes_Builder*)setDefaultNestedEnum:(TestAllTypes_NestedEnum)value {
  _result.hasDefaultNestedEnum = YES;
  _result.defaultNestedEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearDefaultNestedEnum {
  _result.hasDefaultNestedEnum = NO;
  _result.defaultNestedEnum = TestAllTypes_NestedEnumBAR;
  return self;
}
- (BOOL)hasDefaultForeignEnum {
  return _result.hasDefaultForeignEnum;
}
- (ForeignEnum)defaultForeignEnum {
  return _result.defaultForeignEnum;
}
- (TestAllTypes_Builder*)setDefaultForeignEnum:(ForeignEnum)value {
  _result.hasDefaultForeignEnum = YES;
  _result.defaultForeignEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearDefaultForeignEnum {
  _result.hasDefaultForeignEnum = NO;
  _result.defaultForeignEnum = ForeignEnumFOREIGNBAR;
  return self;
}
- (BOOL)hasDefaultImportEnum {
  return _result.hasDefaultImportEnum;
}
- (ImportEnum)defaultImportEnum {
  return _result.defaultImportEnum;
}
- (TestAllTypes_Builder*)setDefaultImportEnum:(ImportEnum)value {
  _result.hasDefaultImportEnum = YES;
  _result.defaultImportEnum = value;
  return self;
}
- (TestAllTypes_Builder*)clearDefaultImportEnum {
  _result.hasDefaultImportEnum = NO;
  _result.defaultImportEnum = ImportEnumIMPORTBAR;
  return self;
}
- (BOOL)hasDefaultStringPiece {
  return _result.hasDefaultStringPiece;
}
- (NSString *) defaultStringPiece {
  return _result.defaultStringPiece;
}
- (instancetype)setDefaultStringPiece:(NSString *)value {
  _result.hasDefaultStringPiece = YES;
  _result.defaultStringPiece = value;
  return self;
}
- (instancetype)clearDefaultStringPiece {
  _result.hasDefaultStringPiece = NO;
  _result.defaultStringPiece = @"abc";
  return self;
}
- (BOOL)hasDefaultCord {
  return _result.hasDefaultCord;
}
- (NSString *) defaultCord {
  return _result.defaultCord;
}
- (instancetype)setDefaultCord:(NSString *)value {
  _result.hasDefaultCord = YES;
  _result.defaultCord = value;
  return self;
}
- (instancetype)clearDefaultCord {
  _result.hasDefaultCord = NO;
  _result.defaultCord = @"123";
  return self;
}

@end


#pragma mark - TestAllTypes_NestedMessage

@interface TestAllTypes_NestedMessage ()

@property int32_t bb;

@end

@implementation TestAllTypes_NestedMessage {
  BOOL _hasBb:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _bb = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasBb {
  return !!_hasBb;
}
- (void)setHasBb:(BOOL)value {
  _hasBb = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasBb) {
    [output writeInt32:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeInt32Size(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestAllTypes_NestedMessage_Builder*)builder {
  return [[TestAllTypes_NestedMessage_Builder alloc] init];
}
+ (TestAllTypes_NestedMessage_Builder*)builderWithPrototype:(TestAllTypes_NestedMessage*)prototype {
  return [[TestAllTypes_NestedMessage builder] mergeFrom:prototype];
}
- (TestAllTypes_NestedMessage_Builder*)builder {
  return [TestAllTypes_NestedMessage builder];
}
- (TestAllTypes_NestedMessage_Builder*)toBuilder {
  return [TestAllTypes_NestedMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", @(self.bb)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_NestedMessage class]]) {
    return NO;
  }
  TestAllTypes_NestedMessage *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [@(self.bb) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestAllTypes_NestedMessage_Builder {
  TestAllTypes_NestedMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestAllTypes_NestedMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestAllTypes_NestedMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestAllTypes_NestedMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestAllTypes_NestedMessage*)defaultMessageInstance {
  return [TestAllTypes_NestedMessage defaultInstance];
}

- (TestAllTypes_NestedMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes_NestedMessage*)buildPartial {
  TestAllTypes_NestedMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestAllTypes_NestedMessage*)other {
  if (other == [TestAllTypes_NestedMessage defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasBb {
  return _result.hasBb;
}
- (int32_t) bb {
  return _result.bb;
}
- (instancetype)setBb:(int32_t)value {
  _result.hasBb = YES;
  _result.bb = value;
  return self;
}
- (instancetype)clearBb {
  _result.hasBb = NO;
  _result.bb = 0;
  return self;
}

@end


#pragma mark - TestAllTypes_OptionalGroup

@interface TestAllTypes_OptionalGroup ()

@property int32_t a;

@end

@implementation TestAllTypes_OptionalGroup {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestAllTypes_OptionalGroup_Builder*)builder {
  return [[TestAllTypes_OptionalGroup_Builder alloc] init];
}
+ (TestAllTypes_OptionalGroup_Builder*)builderWithPrototype:(TestAllTypes_OptionalGroup*)prototype {
  return [[TestAllTypes_OptionalGroup builder] mergeFrom:prototype];
}
- (TestAllTypes_OptionalGroup_Builder*)builder {
  return [TestAllTypes_OptionalGroup builder];
}
- (TestAllTypes_OptionalGroup_Builder*)toBuilder {
  return [TestAllTypes_OptionalGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_OptionalGroup class]]) {
    return NO;
  }
  TestAllTypes_OptionalGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestAllTypes_OptionalGroup_Builder {
  TestAllTypes_OptionalGroup* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestAllTypes_OptionalGroup alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestAllTypes_OptionalGroup alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestAllTypes_OptionalGroup_Builder alloc] init] mergeFrom:_result];
}

- (TestAllTypes_OptionalGroup*)defaultMessageInstance {
  return [TestAllTypes_OptionalGroup defaultInstance];
}

- (TestAllTypes_OptionalGroup*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes_OptionalGroup*)buildPartial {
  TestAllTypes_OptionalGroup* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestAllTypes_OptionalGroup*)other {
  if (other == [TestAllTypes_OptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - TestAllTypes_RepeatedGroup

@interface TestAllTypes_RepeatedGroup ()

@property int32_t a;

@end

@implementation TestAllTypes_RepeatedGroup {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestAllTypes_RepeatedGroup_Builder*)builder {
  return [[TestAllTypes_RepeatedGroup_Builder alloc] init];
}
+ (TestAllTypes_RepeatedGroup_Builder*)builderWithPrototype:(TestAllTypes_RepeatedGroup*)prototype {
  return [[TestAllTypes_RepeatedGroup builder] mergeFrom:prototype];
}
- (TestAllTypes_RepeatedGroup_Builder*)builder {
  return [TestAllTypes_RepeatedGroup builder];
}
- (TestAllTypes_RepeatedGroup_Builder*)toBuilder {
  return [TestAllTypes_RepeatedGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllTypes_RepeatedGroup class]]) {
    return NO;
  }
  TestAllTypes_RepeatedGroup *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestAllTypes_RepeatedGroup_Builder {
  TestAllTypes_RepeatedGroup* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestAllTypes_RepeatedGroup alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestAllTypes_RepeatedGroup alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestAllTypes_RepeatedGroup_Builder alloc] init] mergeFrom:_result];
}

- (TestAllTypes_RepeatedGroup*)defaultMessageInstance {
  return [TestAllTypes_RepeatedGroup defaultInstance];
}

- (TestAllTypes_RepeatedGroup*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllTypes_RepeatedGroup*)buildPartial {
  TestAllTypes_RepeatedGroup* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestAllTypes_RepeatedGroup*)other {
  if (other == [TestAllTypes_RepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - TestDeprecatedFields

@interface TestDeprecatedFields ()

@property int32_t deprecatedInt32;

@end

@implementation TestDeprecatedFields {
  BOOL _hasDeprecatedInt32:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _deprecatedInt32 = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasDeprecatedInt32 {
  return !!_hasDeprecatedInt32;
}
- (void)setHasDeprecatedInt32:(BOOL)value {
  _hasDeprecatedInt32 = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasDeprecatedInt32) {
    [output writeInt32:1 value:self.deprecatedInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeprecatedInt32) {
    size_ += computeInt32Size(1, self.deprecatedInt32);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDeprecatedFields_Builder*)builder {
  return [[TestDeprecatedFields_Builder alloc] init];
}
+ (TestDeprecatedFields_Builder*)builderWithPrototype:(TestDeprecatedFields*)prototype {
  return [[TestDeprecatedFields builder] mergeFrom:prototype];
}
- (TestDeprecatedFields_Builder*)builder {
  return [TestDeprecatedFields builder];
}
- (TestDeprecatedFields_Builder*)toBuilder {
  return [TestDeprecatedFields builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasDeprecatedInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deprecatedInt32", @(self.deprecatedInt32)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDeprecatedFields class]]) {
    return NO;
  }
  TestDeprecatedFields *otherMessage = other;
  return
      self.hasDeprecatedInt32 == otherMessage.hasDeprecatedInt32 &&
      (!self.hasDeprecatedInt32 || self.deprecatedInt32 == otherMessage.deprecatedInt32) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasDeprecatedInt32) {
    hashCode = hashCode * 31 + [@(self.deprecatedInt32) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDeprecatedFields_Builder {
  TestDeprecatedFields* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDeprecatedFields alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDeprecatedFields alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDeprecatedFields_Builder alloc] init] mergeFrom:_result];
}

- (TestDeprecatedFields*)defaultMessageInstance {
  return [TestDeprecatedFields defaultInstance];
}

- (TestDeprecatedFields*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDeprecatedFields*)buildPartial {
  TestDeprecatedFields* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDeprecatedFields*)other {
  if (other == [TestDeprecatedFields defaultInstance]) {
    return self;
  }
  if (other.hasDeprecatedInt32) {
    [self setDeprecatedInt32:other.deprecatedInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeprecatedInt32:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasDeprecatedInt32 {
  return _result.hasDeprecatedInt32;
}
- (int32_t) deprecatedInt32 {
  return _result.deprecatedInt32;
}
- (instancetype)setDeprecatedInt32:(int32_t)value {
  _result.hasDeprecatedInt32 = YES;
  _result.deprecatedInt32 = value;
  return self;
}
- (instancetype)clearDeprecatedInt32 {
  _result.hasDeprecatedInt32 = NO;
  _result.deprecatedInt32 = 0;
  return self;
}

@end


#pragma mark - ForeignMessage

@interface ForeignMessage ()

@property int32_t c;

@end

@implementation ForeignMessage {
  BOOL _hasC:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _c = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasC {
  return !!_hasC;
}
- (void)setHasC:(BOOL)value {
  _hasC = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasC) {
    [output writeInt32:1 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasC) {
    size_ += computeInt32Size(1, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (ForeignMessage_Builder*)builder {
  return [[ForeignMessage_Builder alloc] init];
}
+ (ForeignMessage_Builder*)builderWithPrototype:(ForeignMessage*)prototype {
  return [[ForeignMessage builder] mergeFrom:prototype];
}
- (ForeignMessage_Builder*)builder {
  return [ForeignMessage builder];
}
- (ForeignMessage_Builder*)toBuilder {
  return [ForeignMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", @(self.c)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ForeignMessage class]]) {
    return NO;
  }
  ForeignMessage *otherMessage = other;
  return
      self.hasC == otherMessage.hasC &&
      (!self.hasC || self.c == otherMessage.c) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasC) {
    hashCode = hashCode * 31 + [@(self.c) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation ForeignMessage_Builder {
  ForeignMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[ForeignMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[ForeignMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[ForeignMessage_Builder alloc] init] mergeFrom:_result];
}

- (ForeignMessage*)defaultMessageInstance {
  return [ForeignMessage defaultInstance];
}

- (ForeignMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ForeignMessage*)buildPartial {
  ForeignMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(ForeignMessage*)other {
  if (other == [ForeignMessage defaultInstance]) {
    return self;
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasC {
  return _result.hasC;
}
- (int32_t) c {
  return _result.c;
}
- (instancetype)setC:(int32_t)value {
  _result.hasC = YES;
  _result.c = value;
  return self;
}
- (instancetype)clearC {
  _result.hasC = NO;
  _result.c = 0;
  return self;
}

@end


#pragma mark - TestAllExtensions

@interface TestAllExtensions ()


@end

@implementation TestAllExtensions {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestAllExtensions_Builder*)builder {
  return [[TestAllExtensions_Builder alloc] init];
}
+ (TestAllExtensions_Builder*)builderWithPrototype:(TestAllExtensions*)prototype {
  return [[TestAllExtensions builder] mergeFrom:prototype];
}
- (TestAllExtensions_Builder*)builder {
  return [TestAllExtensions builder];
}
- (TestAllExtensions_Builder*)toBuilder {
  return [TestAllExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestAllExtensions class]]) {
    return NO;
  }
  TestAllExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestAllExtensions_Builder {
  TestAllExtensions* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestAllExtensions alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestAllExtensions alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestAllExtensions_Builder alloc] init] mergeFrom:_result];
}

- (TestAllExtensions*)defaultMessageInstance {
  return [TestAllExtensions defaultInstance];
}

- (TestAllExtensions*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestAllExtensions*)buildPartial {
  TestAllExtensions* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestAllExtensions*)other {
  if (other == [TestAllExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - OptionalGroup_extension

@interface OptionalGroup_extension ()

@property int32_t a;

@end

@implementation OptionalGroup_extension {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:17 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(17, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (OptionalGroup_extension_Builder*)builder {
  return [[OptionalGroup_extension_Builder alloc] init];
}
+ (OptionalGroup_extension_Builder*)builderWithPrototype:(OptionalGroup_extension*)prototype {
  return [[OptionalGroup_extension builder] mergeFrom:prototype];
}
- (OptionalGroup_extension_Builder*)builder {
  return [OptionalGroup_extension builder];
}
- (OptionalGroup_extension_Builder*)toBuilder {
  return [OptionalGroup_extension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OptionalGroup_extension class]]) {
    return NO;
  }
  OptionalGroup_extension *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation OptionalGroup_extension_Builder {
  OptionalGroup_extension* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[OptionalGroup_extension alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[OptionalGroup_extension alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[OptionalGroup_extension_Builder alloc] init] mergeFrom:_result];
}

- (OptionalGroup_extension*)defaultMessageInstance {
  return [OptionalGroup_extension defaultInstance];
}

- (OptionalGroup_extension*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OptionalGroup_extension*)buildPartial {
  OptionalGroup_extension* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(OptionalGroup_extension*)other {
  if (other == [OptionalGroup_extension defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 136: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - RepeatedGroup_extension

@interface RepeatedGroup_extension ()

@property int32_t a;

@end

@implementation RepeatedGroup_extension {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:47 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(47, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (RepeatedGroup_extension_Builder*)builder {
  return [[RepeatedGroup_extension_Builder alloc] init];
}
+ (RepeatedGroup_extension_Builder*)builderWithPrototype:(RepeatedGroup_extension*)prototype {
  return [[RepeatedGroup_extension builder] mergeFrom:prototype];
}
- (RepeatedGroup_extension_Builder*)builder {
  return [RepeatedGroup_extension builder];
}
- (RepeatedGroup_extension_Builder*)toBuilder {
  return [RepeatedGroup_extension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RepeatedGroup_extension class]]) {
    return NO;
  }
  RepeatedGroup_extension *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation RepeatedGroup_extension_Builder {
  RepeatedGroup_extension* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[RepeatedGroup_extension alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[RepeatedGroup_extension alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[RepeatedGroup_extension_Builder alloc] init] mergeFrom:_result];
}

- (RepeatedGroup_extension*)defaultMessageInstance {
  return [RepeatedGroup_extension defaultInstance];
}

- (RepeatedGroup_extension*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RepeatedGroup_extension*)buildPartial {
  RepeatedGroup_extension* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(RepeatedGroup_extension*)other {
  if (other == [RepeatedGroup_extension defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 376: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - TestNestedExtension

@interface TestNestedExtension ()


@end

@implementation TestNestedExtension {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}


+ (PBExtensionField *)test {
  return TestNestedExtension_test;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestNestedExtension_Builder*)builder {
  return [[TestNestedExtension_Builder alloc] init];
}
+ (TestNestedExtension_Builder*)builderWithPrototype:(TestNestedExtension*)prototype {
  return [[TestNestedExtension builder] mergeFrom:prototype];
}
- (TestNestedExtension_Builder*)builder {
  return [TestNestedExtension builder];
}
- (TestNestedExtension_Builder*)toBuilder {
  return [TestNestedExtension builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedExtension class]]) {
    return NO;
  }
  TestNestedExtension *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestNestedExtension_Builder {
  TestNestedExtension* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestNestedExtension alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestNestedExtension alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestNestedExtension_Builder alloc] init] mergeFrom:_result];
}

- (TestNestedExtension*)defaultMessageInstance {
  return [TestNestedExtension defaultInstance];
}

- (TestNestedExtension*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedExtension*)buildPartial {
  TestNestedExtension* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestNestedExtension*)other {
  if (other == [TestNestedExtension defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - TestRequired

@interface TestRequired ()

@property int32_t a;
@property int32_t dummy2;
@property int32_t b;
@property int32_t dummy4;
@property int32_t dummy5;
@property int32_t dummy6;
@property int32_t dummy7;
@property int32_t dummy8;
@property int32_t dummy9;
@property int32_t dummy10;
@property int32_t dummy11;
@property int32_t dummy12;
@property int32_t dummy13;
@property int32_t dummy14;
@property int32_t dummy15;
@property int32_t dummy16;
@property int32_t dummy17;
@property int32_t dummy18;
@property int32_t dummy19;
@property int32_t dummy20;
@property int32_t dummy21;
@property int32_t dummy22;
@property int32_t dummy23;
@property int32_t dummy24;
@property int32_t dummy25;
@property int32_t dummy26;
@property int32_t dummy27;
@property int32_t dummy28;
@property int32_t dummy29;
@property int32_t dummy30;
@property int32_t dummy31;
@property int32_t dummy32;
@property int32_t c;

@end

@implementation TestRequired {
  BOOL _hasA:1;
  BOOL _hasDummy2:1;
  BOOL _hasB:1;
  BOOL _hasDummy4:1;
  BOOL _hasDummy5:1;
  BOOL _hasDummy6:1;
  BOOL _hasDummy7:1;
  BOOL _hasDummy8:1;
  BOOL _hasDummy9:1;
  BOOL _hasDummy10:1;
  BOOL _hasDummy11:1;
  BOOL _hasDummy12:1;
  BOOL _hasDummy13:1;
  BOOL _hasDummy14:1;
  BOOL _hasDummy15:1;
  BOOL _hasDummy16:1;
  BOOL _hasDummy17:1;
  BOOL _hasDummy18:1;
  BOOL _hasDummy19:1;
  BOOL _hasDummy20:1;
  BOOL _hasDummy21:1;
  BOOL _hasDummy22:1;
  BOOL _hasDummy23:1;
  BOOL _hasDummy24:1;
  BOOL _hasDummy25:1;
  BOOL _hasDummy26:1;
  BOOL _hasDummy27:1;
  BOOL _hasDummy28:1;
  BOOL _hasDummy29:1;
  BOOL _hasDummy30:1;
  BOOL _hasDummy31:1;
  BOOL _hasDummy32:1;
  BOOL _hasC:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
    _dummy2 = 0;
    _b = 0;
    _dummy4 = 0;
    _dummy5 = 0;
    _dummy6 = 0;
    _dummy7 = 0;
    _dummy8 = 0;
    _dummy9 = 0;
    _dummy10 = 0;
    _dummy11 = 0;
    _dummy12 = 0;
    _dummy13 = 0;
    _dummy14 = 0;
    _dummy15 = 0;
    _dummy16 = 0;
    _dummy17 = 0;
    _dummy18 = 0;
    _dummy19 = 0;
    _dummy20 = 0;
    _dummy21 = 0;
    _dummy22 = 0;
    _dummy23 = 0;
    _dummy24 = 0;
    _dummy25 = 0;
    _dummy26 = 0;
    _dummy27 = 0;
    _dummy28 = 0;
    _dummy29 = 0;
    _dummy30 = 0;
    _dummy31 = 0;
    _dummy32 = 0;
    _c = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}
- (BOOL)hasDummy2 {
  return !!_hasDummy2;
}
- (void)setHasDummy2:(BOOL)value {
  _hasDummy2 = !!value;
}
- (BOOL)hasB {
  return !!_hasB;
}
- (void)setHasB:(BOOL)value {
  _hasB = !!value;
}
- (BOOL)hasDummy4 {
  return !!_hasDummy4;
}
- (void)setHasDummy4:(BOOL)value {
  _hasDummy4 = !!value;
}
- (BOOL)hasDummy5 {
  return !!_hasDummy5;
}
- (void)setHasDummy5:(BOOL)value {
  _hasDummy5 = !!value;
}
- (BOOL)hasDummy6 {
  return !!_hasDummy6;
}
- (void)setHasDummy6:(BOOL)value {
  _hasDummy6 = !!value;
}
- (BOOL)hasDummy7 {
  return !!_hasDummy7;
}
- (void)setHasDummy7:(BOOL)value {
  _hasDummy7 = !!value;
}
- (BOOL)hasDummy8 {
  return !!_hasDummy8;
}
- (void)setHasDummy8:(BOOL)value {
  _hasDummy8 = !!value;
}
- (BOOL)hasDummy9 {
  return !!_hasDummy9;
}
- (void)setHasDummy9:(BOOL)value {
  _hasDummy9 = !!value;
}
- (BOOL)hasDummy10 {
  return !!_hasDummy10;
}
- (void)setHasDummy10:(BOOL)value {
  _hasDummy10 = !!value;
}
- (BOOL)hasDummy11 {
  return !!_hasDummy11;
}
- (void)setHasDummy11:(BOOL)value {
  _hasDummy11 = !!value;
}
- (BOOL)hasDummy12 {
  return !!_hasDummy12;
}
- (void)setHasDummy12:(BOOL)value {
  _hasDummy12 = !!value;
}
- (BOOL)hasDummy13 {
  return !!_hasDummy13;
}
- (void)setHasDummy13:(BOOL)value {
  _hasDummy13 = !!value;
}
- (BOOL)hasDummy14 {
  return !!_hasDummy14;
}
- (void)setHasDummy14:(BOOL)value {
  _hasDummy14 = !!value;
}
- (BOOL)hasDummy15 {
  return !!_hasDummy15;
}
- (void)setHasDummy15:(BOOL)value {
  _hasDummy15 = !!value;
}
- (BOOL)hasDummy16 {
  return !!_hasDummy16;
}
- (void)setHasDummy16:(BOOL)value {
  _hasDummy16 = !!value;
}
- (BOOL)hasDummy17 {
  return !!_hasDummy17;
}
- (void)setHasDummy17:(BOOL)value {
  _hasDummy17 = !!value;
}
- (BOOL)hasDummy18 {
  return !!_hasDummy18;
}
- (void)setHasDummy18:(BOOL)value {
  _hasDummy18 = !!value;
}
- (BOOL)hasDummy19 {
  return !!_hasDummy19;
}
- (void)setHasDummy19:(BOOL)value {
  _hasDummy19 = !!value;
}
- (BOOL)hasDummy20 {
  return !!_hasDummy20;
}
- (void)setHasDummy20:(BOOL)value {
  _hasDummy20 = !!value;
}
- (BOOL)hasDummy21 {
  return !!_hasDummy21;
}
- (void)setHasDummy21:(BOOL)value {
  _hasDummy21 = !!value;
}
- (BOOL)hasDummy22 {
  return !!_hasDummy22;
}
- (void)setHasDummy22:(BOOL)value {
  _hasDummy22 = !!value;
}
- (BOOL)hasDummy23 {
  return !!_hasDummy23;
}
- (void)setHasDummy23:(BOOL)value {
  _hasDummy23 = !!value;
}
- (BOOL)hasDummy24 {
  return !!_hasDummy24;
}
- (void)setHasDummy24:(BOOL)value {
  _hasDummy24 = !!value;
}
- (BOOL)hasDummy25 {
  return !!_hasDummy25;
}
- (void)setHasDummy25:(BOOL)value {
  _hasDummy25 = !!value;
}
- (BOOL)hasDummy26 {
  return !!_hasDummy26;
}
- (void)setHasDummy26:(BOOL)value {
  _hasDummy26 = !!value;
}
- (BOOL)hasDummy27 {
  return !!_hasDummy27;
}
- (void)setHasDummy27:(BOOL)value {
  _hasDummy27 = !!value;
}
- (BOOL)hasDummy28 {
  return !!_hasDummy28;
}
- (void)setHasDummy28:(BOOL)value {
  _hasDummy28 = !!value;
}
- (BOOL)hasDummy29 {
  return !!_hasDummy29;
}
- (void)setHasDummy29:(BOOL)value {
  _hasDummy29 = !!value;
}
- (BOOL)hasDummy30 {
  return !!_hasDummy30;
}
- (void)setHasDummy30:(BOOL)value {
  _hasDummy30 = !!value;
}
- (BOOL)hasDummy31 {
  return !!_hasDummy31;
}
- (void)setHasDummy31:(BOOL)value {
  _hasDummy31 = !!value;
}
- (BOOL)hasDummy32 {
  return !!_hasDummy32;
}
- (void)setHasDummy32:(BOOL)value {
  _hasDummy32 = !!value;
}
- (BOOL)hasC {
  return !!_hasC;
}
- (void)setHasC:(BOOL)value {
  _hasC = !!value;
}

+ (PBExtensionField *)single {
  return TestRequired_single;
}
+ (PBExtensionField *)multi {
  return TestRequired_multi;
}


- (BOOL)isInitialized {
  if (!self.hasA) {
    return NO;
  }
  if (!self.hasB) {
    return NO;
  }
  if (!self.hasC) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasDummy2) {
    [output writeInt32:2 value:self.dummy2];
  }
  if (self.hasB) {
    [output writeInt32:3 value:self.b];
  }
  if (self.hasDummy4) {
    [output writeInt32:4 value:self.dummy4];
  }
  if (self.hasDummy5) {
    [output writeInt32:5 value:self.dummy5];
  }
  if (self.hasDummy6) {
    [output writeInt32:6 value:self.dummy6];
  }
  if (self.hasDummy7) {
    [output writeInt32:7 value:self.dummy7];
  }
  if (self.hasDummy8) {
    [output writeInt32:8 value:self.dummy8];
  }
  if (self.hasDummy9) {
    [output writeInt32:9 value:self.dummy9];
  }
  if (self.hasDummy10) {
    [output writeInt32:10 value:self.dummy10];
  }
  if (self.hasDummy11) {
    [output writeInt32:11 value:self.dummy11];
  }
  if (self.hasDummy12) {
    [output writeInt32:12 value:self.dummy12];
  }
  if (self.hasDummy13) {
    [output writeInt32:13 value:self.dummy13];
  }
  if (self.hasDummy14) {
    [output writeInt32:14 value:self.dummy14];
  }
  if (self.hasDummy15) {
    [output writeInt32:15 value:self.dummy15];
  }
  if (self.hasDummy16) {
    [output writeInt32:16 value:self.dummy16];
  }
  if (self.hasDummy17) {
    [output writeInt32:17 value:self.dummy17];
  }
  if (self.hasDummy18) {
    [output writeInt32:18 value:self.dummy18];
  }
  if (self.hasDummy19) {
    [output writeInt32:19 value:self.dummy19];
  }
  if (self.hasDummy20) {
    [output writeInt32:20 value:self.dummy20];
  }
  if (self.hasDummy21) {
    [output writeInt32:21 value:self.dummy21];
  }
  if (self.hasDummy22) {
    [output writeInt32:22 value:self.dummy22];
  }
  if (self.hasDummy23) {
    [output writeInt32:23 value:self.dummy23];
  }
  if (self.hasDummy24) {
    [output writeInt32:24 value:self.dummy24];
  }
  if (self.hasDummy25) {
    [output writeInt32:25 value:self.dummy25];
  }
  if (self.hasDummy26) {
    [output writeInt32:26 value:self.dummy26];
  }
  if (self.hasDummy27) {
    [output writeInt32:27 value:self.dummy27];
  }
  if (self.hasDummy28) {
    [output writeInt32:28 value:self.dummy28];
  }
  if (self.hasDummy29) {
    [output writeInt32:29 value:self.dummy29];
  }
  if (self.hasDummy30) {
    [output writeInt32:30 value:self.dummy30];
  }
  if (self.hasDummy31) {
    [output writeInt32:31 value:self.dummy31];
  }
  if (self.hasDummy32) {
    [output writeInt32:32 value:self.dummy32];
  }
  if (self.hasC) {
    [output writeInt32:33 value:self.c];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasDummy2) {
    size_ += computeInt32Size(2, self.dummy2);
  }
  if (self.hasB) {
    size_ += computeInt32Size(3, self.b);
  }
  if (self.hasDummy4) {
    size_ += computeInt32Size(4, self.dummy4);
  }
  if (self.hasDummy5) {
    size_ += computeInt32Size(5, self.dummy5);
  }
  if (self.hasDummy6) {
    size_ += computeInt32Size(6, self.dummy6);
  }
  if (self.hasDummy7) {
    size_ += computeInt32Size(7, self.dummy7);
  }
  if (self.hasDummy8) {
    size_ += computeInt32Size(8, self.dummy8);
  }
  if (self.hasDummy9) {
    size_ += computeInt32Size(9, self.dummy9);
  }
  if (self.hasDummy10) {
    size_ += computeInt32Size(10, self.dummy10);
  }
  if (self.hasDummy11) {
    size_ += computeInt32Size(11, self.dummy11);
  }
  if (self.hasDummy12) {
    size_ += computeInt32Size(12, self.dummy12);
  }
  if (self.hasDummy13) {
    size_ += computeInt32Size(13, self.dummy13);
  }
  if (self.hasDummy14) {
    size_ += computeInt32Size(14, self.dummy14);
  }
  if (self.hasDummy15) {
    size_ += computeInt32Size(15, self.dummy15);
  }
  if (self.hasDummy16) {
    size_ += computeInt32Size(16, self.dummy16);
  }
  if (self.hasDummy17) {
    size_ += computeInt32Size(17, self.dummy17);
  }
  if (self.hasDummy18) {
    size_ += computeInt32Size(18, self.dummy18);
  }
  if (self.hasDummy19) {
    size_ += computeInt32Size(19, self.dummy19);
  }
  if (self.hasDummy20) {
    size_ += computeInt32Size(20, self.dummy20);
  }
  if (self.hasDummy21) {
    size_ += computeInt32Size(21, self.dummy21);
  }
  if (self.hasDummy22) {
    size_ += computeInt32Size(22, self.dummy22);
  }
  if (self.hasDummy23) {
    size_ += computeInt32Size(23, self.dummy23);
  }
  if (self.hasDummy24) {
    size_ += computeInt32Size(24, self.dummy24);
  }
  if (self.hasDummy25) {
    size_ += computeInt32Size(25, self.dummy25);
  }
  if (self.hasDummy26) {
    size_ += computeInt32Size(26, self.dummy26);
  }
  if (self.hasDummy27) {
    size_ += computeInt32Size(27, self.dummy27);
  }
  if (self.hasDummy28) {
    size_ += computeInt32Size(28, self.dummy28);
  }
  if (self.hasDummy29) {
    size_ += computeInt32Size(29, self.dummy29);
  }
  if (self.hasDummy30) {
    size_ += computeInt32Size(30, self.dummy30);
  }
  if (self.hasDummy31) {
    size_ += computeInt32Size(31, self.dummy31);
  }
  if (self.hasDummy32) {
    size_ += computeInt32Size(32, self.dummy32);
  }
  if (self.hasC) {
    size_ += computeInt32Size(33, self.c);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestRequired_Builder*)builder {
  return [[TestRequired_Builder alloc] init];
}
+ (TestRequired_Builder*)builderWithPrototype:(TestRequired*)prototype {
  return [[TestRequired builder] mergeFrom:prototype];
}
- (TestRequired_Builder*)builder {
  return [TestRequired builder];
}
- (TestRequired_Builder*)toBuilder {
  return [TestRequired builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasDummy2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy2", @(self.dummy2)];
  }
  if (self.hasB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"b", @(self.b)];
  }
  if (self.hasDummy4) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy4", @(self.dummy4)];
  }
  if (self.hasDummy5) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy5", @(self.dummy5)];
  }
  if (self.hasDummy6) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy6", @(self.dummy6)];
  }
  if (self.hasDummy7) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy7", @(self.dummy7)];
  }
  if (self.hasDummy8) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy8", @(self.dummy8)];
  }
  if (self.hasDummy9) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy9", @(self.dummy9)];
  }
  if (self.hasDummy10) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy10", @(self.dummy10)];
  }
  if (self.hasDummy11) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy11", @(self.dummy11)];
  }
  if (self.hasDummy12) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy12", @(self.dummy12)];
  }
  if (self.hasDummy13) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy13", @(self.dummy13)];
  }
  if (self.hasDummy14) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy14", @(self.dummy14)];
  }
  if (self.hasDummy15) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy15", @(self.dummy15)];
  }
  if (self.hasDummy16) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy16", @(self.dummy16)];
  }
  if (self.hasDummy17) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy17", @(self.dummy17)];
  }
  if (self.hasDummy18) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy18", @(self.dummy18)];
  }
  if (self.hasDummy19) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy19", @(self.dummy19)];
  }
  if (self.hasDummy20) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy20", @(self.dummy20)];
  }
  if (self.hasDummy21) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy21", @(self.dummy21)];
  }
  if (self.hasDummy22) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy22", @(self.dummy22)];
  }
  if (self.hasDummy23) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy23", @(self.dummy23)];
  }
  if (self.hasDummy24) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy24", @(self.dummy24)];
  }
  if (self.hasDummy25) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy25", @(self.dummy25)];
  }
  if (self.hasDummy26) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy26", @(self.dummy26)];
  }
  if (self.hasDummy27) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy27", @(self.dummy27)];
  }
  if (self.hasDummy28) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy28", @(self.dummy28)];
  }
  if (self.hasDummy29) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy29", @(self.dummy29)];
  }
  if (self.hasDummy30) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy30", @(self.dummy30)];
  }
  if (self.hasDummy31) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy31", @(self.dummy31)];
  }
  if (self.hasDummy32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy32", @(self.dummy32)];
  }
  if (self.hasC) {
    [output appendFormat:@"%@%@: %@\n", indent, @"c", @(self.c)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequired class]]) {
    return NO;
  }
  TestRequired *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasDummy2 == otherMessage.hasDummy2 &&
      (!self.hasDummy2 || self.dummy2 == otherMessage.dummy2) &&
      self.hasB == otherMessage.hasB &&
      (!self.hasB || self.b == otherMessage.b) &&
      self.hasDummy4 == otherMessage.hasDummy4 &&
      (!self.hasDummy4 || self.dummy4 == otherMessage.dummy4) &&
      self.hasDummy5 == otherMessage.hasDummy5 &&
      (!self.hasDummy5 || self.dummy5 == otherMessage.dummy5) &&
      self.hasDummy6 == otherMessage.hasDummy6 &&
      (!self.hasDummy6 || self.dummy6 == otherMessage.dummy6) &&
      self.hasDummy7 == otherMessage.hasDummy7 &&
      (!self.hasDummy7 || self.dummy7 == otherMessage.dummy7) &&
      self.hasDummy8 == otherMessage.hasDummy8 &&
      (!self.hasDummy8 || self.dummy8 == otherMessage.dummy8) &&
      self.hasDummy9 == otherMessage.hasDummy9 &&
      (!self.hasDummy9 || self.dummy9 == otherMessage.dummy9) &&
      self.hasDummy10 == otherMessage.hasDummy10 &&
      (!self.hasDummy10 || self.dummy10 == otherMessage.dummy10) &&
      self.hasDummy11 == otherMessage.hasDummy11 &&
      (!self.hasDummy11 || self.dummy11 == otherMessage.dummy11) &&
      self.hasDummy12 == otherMessage.hasDummy12 &&
      (!self.hasDummy12 || self.dummy12 == otherMessage.dummy12) &&
      self.hasDummy13 == otherMessage.hasDummy13 &&
      (!self.hasDummy13 || self.dummy13 == otherMessage.dummy13) &&
      self.hasDummy14 == otherMessage.hasDummy14 &&
      (!self.hasDummy14 || self.dummy14 == otherMessage.dummy14) &&
      self.hasDummy15 == otherMessage.hasDummy15 &&
      (!self.hasDummy15 || self.dummy15 == otherMessage.dummy15) &&
      self.hasDummy16 == otherMessage.hasDummy16 &&
      (!self.hasDummy16 || self.dummy16 == otherMessage.dummy16) &&
      self.hasDummy17 == otherMessage.hasDummy17 &&
      (!self.hasDummy17 || self.dummy17 == otherMessage.dummy17) &&
      self.hasDummy18 == otherMessage.hasDummy18 &&
      (!self.hasDummy18 || self.dummy18 == otherMessage.dummy18) &&
      self.hasDummy19 == otherMessage.hasDummy19 &&
      (!self.hasDummy19 || self.dummy19 == otherMessage.dummy19) &&
      self.hasDummy20 == otherMessage.hasDummy20 &&
      (!self.hasDummy20 || self.dummy20 == otherMessage.dummy20) &&
      self.hasDummy21 == otherMessage.hasDummy21 &&
      (!self.hasDummy21 || self.dummy21 == otherMessage.dummy21) &&
      self.hasDummy22 == otherMessage.hasDummy22 &&
      (!self.hasDummy22 || self.dummy22 == otherMessage.dummy22) &&
      self.hasDummy23 == otherMessage.hasDummy23 &&
      (!self.hasDummy23 || self.dummy23 == otherMessage.dummy23) &&
      self.hasDummy24 == otherMessage.hasDummy24 &&
      (!self.hasDummy24 || self.dummy24 == otherMessage.dummy24) &&
      self.hasDummy25 == otherMessage.hasDummy25 &&
      (!self.hasDummy25 || self.dummy25 == otherMessage.dummy25) &&
      self.hasDummy26 == otherMessage.hasDummy26 &&
      (!self.hasDummy26 || self.dummy26 == otherMessage.dummy26) &&
      self.hasDummy27 == otherMessage.hasDummy27 &&
      (!self.hasDummy27 || self.dummy27 == otherMessage.dummy27) &&
      self.hasDummy28 == otherMessage.hasDummy28 &&
      (!self.hasDummy28 || self.dummy28 == otherMessage.dummy28) &&
      self.hasDummy29 == otherMessage.hasDummy29 &&
      (!self.hasDummy29 || self.dummy29 == otherMessage.dummy29) &&
      self.hasDummy30 == otherMessage.hasDummy30 &&
      (!self.hasDummy30 || self.dummy30 == otherMessage.dummy30) &&
      self.hasDummy31 == otherMessage.hasDummy31 &&
      (!self.hasDummy31 || self.dummy31 == otherMessage.dummy31) &&
      self.hasDummy32 == otherMessage.hasDummy32 &&
      (!self.hasDummy32 || self.dummy32 == otherMessage.dummy32) &&
      self.hasC == otherMessage.hasC &&
      (!self.hasC || self.c == otherMessage.c) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasDummy2) {
    hashCode = hashCode * 31 + [@(self.dummy2) hash];
  }
  if (self.hasB) {
    hashCode = hashCode * 31 + [@(self.b) hash];
  }
  if (self.hasDummy4) {
    hashCode = hashCode * 31 + [@(self.dummy4) hash];
  }
  if (self.hasDummy5) {
    hashCode = hashCode * 31 + [@(self.dummy5) hash];
  }
  if (self.hasDummy6) {
    hashCode = hashCode * 31 + [@(self.dummy6) hash];
  }
  if (self.hasDummy7) {
    hashCode = hashCode * 31 + [@(self.dummy7) hash];
  }
  if (self.hasDummy8) {
    hashCode = hashCode * 31 + [@(self.dummy8) hash];
  }
  if (self.hasDummy9) {
    hashCode = hashCode * 31 + [@(self.dummy9) hash];
  }
  if (self.hasDummy10) {
    hashCode = hashCode * 31 + [@(self.dummy10) hash];
  }
  if (self.hasDummy11) {
    hashCode = hashCode * 31 + [@(self.dummy11) hash];
  }
  if (self.hasDummy12) {
    hashCode = hashCode * 31 + [@(self.dummy12) hash];
  }
  if (self.hasDummy13) {
    hashCode = hashCode * 31 + [@(self.dummy13) hash];
  }
  if (self.hasDummy14) {
    hashCode = hashCode * 31 + [@(self.dummy14) hash];
  }
  if (self.hasDummy15) {
    hashCode = hashCode * 31 + [@(self.dummy15) hash];
  }
  if (self.hasDummy16) {
    hashCode = hashCode * 31 + [@(self.dummy16) hash];
  }
  if (self.hasDummy17) {
    hashCode = hashCode * 31 + [@(self.dummy17) hash];
  }
  if (self.hasDummy18) {
    hashCode = hashCode * 31 + [@(self.dummy18) hash];
  }
  if (self.hasDummy19) {
    hashCode = hashCode * 31 + [@(self.dummy19) hash];
  }
  if (self.hasDummy20) {
    hashCode = hashCode * 31 + [@(self.dummy20) hash];
  }
  if (self.hasDummy21) {
    hashCode = hashCode * 31 + [@(self.dummy21) hash];
  }
  if (self.hasDummy22) {
    hashCode = hashCode * 31 + [@(self.dummy22) hash];
  }
  if (self.hasDummy23) {
    hashCode = hashCode * 31 + [@(self.dummy23) hash];
  }
  if (self.hasDummy24) {
    hashCode = hashCode * 31 + [@(self.dummy24) hash];
  }
  if (self.hasDummy25) {
    hashCode = hashCode * 31 + [@(self.dummy25) hash];
  }
  if (self.hasDummy26) {
    hashCode = hashCode * 31 + [@(self.dummy26) hash];
  }
  if (self.hasDummy27) {
    hashCode = hashCode * 31 + [@(self.dummy27) hash];
  }
  if (self.hasDummy28) {
    hashCode = hashCode * 31 + [@(self.dummy28) hash];
  }
  if (self.hasDummy29) {
    hashCode = hashCode * 31 + [@(self.dummy29) hash];
  }
  if (self.hasDummy30) {
    hashCode = hashCode * 31 + [@(self.dummy30) hash];
  }
  if (self.hasDummy31) {
    hashCode = hashCode * 31 + [@(self.dummy31) hash];
  }
  if (self.hasDummy32) {
    hashCode = hashCode * 31 + [@(self.dummy32) hash];
  }
  if (self.hasC) {
    hashCode = hashCode * 31 + [@(self.c) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestRequired_Builder {
  TestRequired* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestRequired alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestRequired alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestRequired_Builder alloc] init] mergeFrom:_result];
}

- (TestRequired*)defaultMessageInstance {
  return [TestRequired defaultInstance];
}

- (TestRequired*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequired*)buildPartial {
  TestRequired* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestRequired*)other {
  if (other == [TestRequired defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasDummy2) {
    [self setDummy2:other.dummy2];
  }
  if (other.hasB) {
    [self setB:other.b];
  }
  if (other.hasDummy4) {
    [self setDummy4:other.dummy4];
  }
  if (other.hasDummy5) {
    [self setDummy5:other.dummy5];
  }
  if (other.hasDummy6) {
    [self setDummy6:other.dummy6];
  }
  if (other.hasDummy7) {
    [self setDummy7:other.dummy7];
  }
  if (other.hasDummy8) {
    [self setDummy8:other.dummy8];
  }
  if (other.hasDummy9) {
    [self setDummy9:other.dummy9];
  }
  if (other.hasDummy10) {
    [self setDummy10:other.dummy10];
  }
  if (other.hasDummy11) {
    [self setDummy11:other.dummy11];
  }
  if (other.hasDummy12) {
    [self setDummy12:other.dummy12];
  }
  if (other.hasDummy13) {
    [self setDummy13:other.dummy13];
  }
  if (other.hasDummy14) {
    [self setDummy14:other.dummy14];
  }
  if (other.hasDummy15) {
    [self setDummy15:other.dummy15];
  }
  if (other.hasDummy16) {
    [self setDummy16:other.dummy16];
  }
  if (other.hasDummy17) {
    [self setDummy17:other.dummy17];
  }
  if (other.hasDummy18) {
    [self setDummy18:other.dummy18];
  }
  if (other.hasDummy19) {
    [self setDummy19:other.dummy19];
  }
  if (other.hasDummy20) {
    [self setDummy20:other.dummy20];
  }
  if (other.hasDummy21) {
    [self setDummy21:other.dummy21];
  }
  if (other.hasDummy22) {
    [self setDummy22:other.dummy22];
  }
  if (other.hasDummy23) {
    [self setDummy23:other.dummy23];
  }
  if (other.hasDummy24) {
    [self setDummy24:other.dummy24];
  }
  if (other.hasDummy25) {
    [self setDummy25:other.dummy25];
  }
  if (other.hasDummy26) {
    [self setDummy26:other.dummy26];
  }
  if (other.hasDummy27) {
    [self setDummy27:other.dummy27];
  }
  if (other.hasDummy28) {
    [self setDummy28:other.dummy28];
  }
  if (other.hasDummy29) {
    [self setDummy29:other.dummy29];
  }
  if (other.hasDummy30) {
    [self setDummy30:other.dummy30];
  }
  if (other.hasDummy31) {
    [self setDummy31:other.dummy31];
  }
  if (other.hasDummy32) {
    [self setDummy32:other.dummy32];
  }
  if (other.hasC) {
    [self setC:other.c];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 16: {
        [self setDummy2:[input readInt32]];
        break;
      }
      case 24: {
        [self setB:[input readInt32]];
        break;
      }
      case 32: {
        [self setDummy4:[input readInt32]];
        break;
      }
      case 40: {
        [self setDummy5:[input readInt32]];
        break;
      }
      case 48: {
        [self setDummy6:[input readInt32]];
        break;
      }
      case 56: {
        [self setDummy7:[input readInt32]];
        break;
      }
      case 64: {
        [self setDummy8:[input readInt32]];
        break;
      }
      case 72: {
        [self setDummy9:[input readInt32]];
        break;
      }
      case 80: {
        [self setDummy10:[input readInt32]];
        break;
      }
      case 88: {
        [self setDummy11:[input readInt32]];
        break;
      }
      case 96: {
        [self setDummy12:[input readInt32]];
        break;
      }
      case 104: {
        [self setDummy13:[input readInt32]];
        break;
      }
      case 112: {
        [self setDummy14:[input readInt32]];
        break;
      }
      case 120: {
        [self setDummy15:[input readInt32]];
        break;
      }
      case 128: {
        [self setDummy16:[input readInt32]];
        break;
      }
      case 136: {
        [self setDummy17:[input readInt32]];
        break;
      }
      case 144: {
        [self setDummy18:[input readInt32]];
        break;
      }
      case 152: {
        [self setDummy19:[input readInt32]];
        break;
      }
      case 160: {
        [self setDummy20:[input readInt32]];
        break;
      }
      case 168: {
        [self setDummy21:[input readInt32]];
        break;
      }
      case 176: {
        [self setDummy22:[input readInt32]];
        break;
      }
      case 184: {
        [self setDummy23:[input readInt32]];
        break;
      }
      case 192: {
        [self setDummy24:[input readInt32]];
        break;
      }
      case 200: {
        [self setDummy25:[input readInt32]];
        break;
      }
      case 208: {
        [self setDummy26:[input readInt32]];
        break;
      }
      case 216: {
        [self setDummy27:[input readInt32]];
        break;
      }
      case 224: {
        [self setDummy28:[input readInt32]];
        break;
      }
      case 232: {
        [self setDummy29:[input readInt32]];
        break;
      }
      case 240: {
        [self setDummy30:[input readInt32]];
        break;
      }
      case 248: {
        [self setDummy31:[input readInt32]];
        break;
      }
      case 256: {
        [self setDummy32:[input readInt32]];
        break;
      }
      case 264: {
        [self setC:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}
- (BOOL)hasDummy2 {
  return _result.hasDummy2;
}
- (int32_t) dummy2 {
  return _result.dummy2;
}
- (instancetype)setDummy2:(int32_t)value {
  _result.hasDummy2 = YES;
  _result.dummy2 = value;
  return self;
}
- (instancetype)clearDummy2 {
  _result.hasDummy2 = NO;
  _result.dummy2 = 0;
  return self;
}
- (BOOL)hasB {
  return _result.hasB;
}
- (int32_t) b {
  return _result.b;
}
- (instancetype)setB:(int32_t)value {
  _result.hasB = YES;
  _result.b = value;
  return self;
}
- (instancetype)clearB {
  _result.hasB = NO;
  _result.b = 0;
  return self;
}
- (BOOL)hasDummy4 {
  return _result.hasDummy4;
}
- (int32_t) dummy4 {
  return _result.dummy4;
}
- (instancetype)setDummy4:(int32_t)value {
  _result.hasDummy4 = YES;
  _result.dummy4 = value;
  return self;
}
- (instancetype)clearDummy4 {
  _result.hasDummy4 = NO;
  _result.dummy4 = 0;
  return self;
}
- (BOOL)hasDummy5 {
  return _result.hasDummy5;
}
- (int32_t) dummy5 {
  return _result.dummy5;
}
- (instancetype)setDummy5:(int32_t)value {
  _result.hasDummy5 = YES;
  _result.dummy5 = value;
  return self;
}
- (instancetype)clearDummy5 {
  _result.hasDummy5 = NO;
  _result.dummy5 = 0;
  return self;
}
- (BOOL)hasDummy6 {
  return _result.hasDummy6;
}
- (int32_t) dummy6 {
  return _result.dummy6;
}
- (instancetype)setDummy6:(int32_t)value {
  _result.hasDummy6 = YES;
  _result.dummy6 = value;
  return self;
}
- (instancetype)clearDummy6 {
  _result.hasDummy6 = NO;
  _result.dummy6 = 0;
  return self;
}
- (BOOL)hasDummy7 {
  return _result.hasDummy7;
}
- (int32_t) dummy7 {
  return _result.dummy7;
}
- (instancetype)setDummy7:(int32_t)value {
  _result.hasDummy7 = YES;
  _result.dummy7 = value;
  return self;
}
- (instancetype)clearDummy7 {
  _result.hasDummy7 = NO;
  _result.dummy7 = 0;
  return self;
}
- (BOOL)hasDummy8 {
  return _result.hasDummy8;
}
- (int32_t) dummy8 {
  return _result.dummy8;
}
- (instancetype)setDummy8:(int32_t)value {
  _result.hasDummy8 = YES;
  _result.dummy8 = value;
  return self;
}
- (instancetype)clearDummy8 {
  _result.hasDummy8 = NO;
  _result.dummy8 = 0;
  return self;
}
- (BOOL)hasDummy9 {
  return _result.hasDummy9;
}
- (int32_t) dummy9 {
  return _result.dummy9;
}
- (instancetype)setDummy9:(int32_t)value {
  _result.hasDummy9 = YES;
  _result.dummy9 = value;
  return self;
}
- (instancetype)clearDummy9 {
  _result.hasDummy9 = NO;
  _result.dummy9 = 0;
  return self;
}
- (BOOL)hasDummy10 {
  return _result.hasDummy10;
}
- (int32_t) dummy10 {
  return _result.dummy10;
}
- (instancetype)setDummy10:(int32_t)value {
  _result.hasDummy10 = YES;
  _result.dummy10 = value;
  return self;
}
- (instancetype)clearDummy10 {
  _result.hasDummy10 = NO;
  _result.dummy10 = 0;
  return self;
}
- (BOOL)hasDummy11 {
  return _result.hasDummy11;
}
- (int32_t) dummy11 {
  return _result.dummy11;
}
- (instancetype)setDummy11:(int32_t)value {
  _result.hasDummy11 = YES;
  _result.dummy11 = value;
  return self;
}
- (instancetype)clearDummy11 {
  _result.hasDummy11 = NO;
  _result.dummy11 = 0;
  return self;
}
- (BOOL)hasDummy12 {
  return _result.hasDummy12;
}
- (int32_t) dummy12 {
  return _result.dummy12;
}
- (instancetype)setDummy12:(int32_t)value {
  _result.hasDummy12 = YES;
  _result.dummy12 = value;
  return self;
}
- (instancetype)clearDummy12 {
  _result.hasDummy12 = NO;
  _result.dummy12 = 0;
  return self;
}
- (BOOL)hasDummy13 {
  return _result.hasDummy13;
}
- (int32_t) dummy13 {
  return _result.dummy13;
}
- (instancetype)setDummy13:(int32_t)value {
  _result.hasDummy13 = YES;
  _result.dummy13 = value;
  return self;
}
- (instancetype)clearDummy13 {
  _result.hasDummy13 = NO;
  _result.dummy13 = 0;
  return self;
}
- (BOOL)hasDummy14 {
  return _result.hasDummy14;
}
- (int32_t) dummy14 {
  return _result.dummy14;
}
- (instancetype)setDummy14:(int32_t)value {
  _result.hasDummy14 = YES;
  _result.dummy14 = value;
  return self;
}
- (instancetype)clearDummy14 {
  _result.hasDummy14 = NO;
  _result.dummy14 = 0;
  return self;
}
- (BOOL)hasDummy15 {
  return _result.hasDummy15;
}
- (int32_t) dummy15 {
  return _result.dummy15;
}
- (instancetype)setDummy15:(int32_t)value {
  _result.hasDummy15 = YES;
  _result.dummy15 = value;
  return self;
}
- (instancetype)clearDummy15 {
  _result.hasDummy15 = NO;
  _result.dummy15 = 0;
  return self;
}
- (BOOL)hasDummy16 {
  return _result.hasDummy16;
}
- (int32_t) dummy16 {
  return _result.dummy16;
}
- (instancetype)setDummy16:(int32_t)value {
  _result.hasDummy16 = YES;
  _result.dummy16 = value;
  return self;
}
- (instancetype)clearDummy16 {
  _result.hasDummy16 = NO;
  _result.dummy16 = 0;
  return self;
}
- (BOOL)hasDummy17 {
  return _result.hasDummy17;
}
- (int32_t) dummy17 {
  return _result.dummy17;
}
- (instancetype)setDummy17:(int32_t)value {
  _result.hasDummy17 = YES;
  _result.dummy17 = value;
  return self;
}
- (instancetype)clearDummy17 {
  _result.hasDummy17 = NO;
  _result.dummy17 = 0;
  return self;
}
- (BOOL)hasDummy18 {
  return _result.hasDummy18;
}
- (int32_t) dummy18 {
  return _result.dummy18;
}
- (instancetype)setDummy18:(int32_t)value {
  _result.hasDummy18 = YES;
  _result.dummy18 = value;
  return self;
}
- (instancetype)clearDummy18 {
  _result.hasDummy18 = NO;
  _result.dummy18 = 0;
  return self;
}
- (BOOL)hasDummy19 {
  return _result.hasDummy19;
}
- (int32_t) dummy19 {
  return _result.dummy19;
}
- (instancetype)setDummy19:(int32_t)value {
  _result.hasDummy19 = YES;
  _result.dummy19 = value;
  return self;
}
- (instancetype)clearDummy19 {
  _result.hasDummy19 = NO;
  _result.dummy19 = 0;
  return self;
}
- (BOOL)hasDummy20 {
  return _result.hasDummy20;
}
- (int32_t) dummy20 {
  return _result.dummy20;
}
- (instancetype)setDummy20:(int32_t)value {
  _result.hasDummy20 = YES;
  _result.dummy20 = value;
  return self;
}
- (instancetype)clearDummy20 {
  _result.hasDummy20 = NO;
  _result.dummy20 = 0;
  return self;
}
- (BOOL)hasDummy21 {
  return _result.hasDummy21;
}
- (int32_t) dummy21 {
  return _result.dummy21;
}
- (instancetype)setDummy21:(int32_t)value {
  _result.hasDummy21 = YES;
  _result.dummy21 = value;
  return self;
}
- (instancetype)clearDummy21 {
  _result.hasDummy21 = NO;
  _result.dummy21 = 0;
  return self;
}
- (BOOL)hasDummy22 {
  return _result.hasDummy22;
}
- (int32_t) dummy22 {
  return _result.dummy22;
}
- (instancetype)setDummy22:(int32_t)value {
  _result.hasDummy22 = YES;
  _result.dummy22 = value;
  return self;
}
- (instancetype)clearDummy22 {
  _result.hasDummy22 = NO;
  _result.dummy22 = 0;
  return self;
}
- (BOOL)hasDummy23 {
  return _result.hasDummy23;
}
- (int32_t) dummy23 {
  return _result.dummy23;
}
- (instancetype)setDummy23:(int32_t)value {
  _result.hasDummy23 = YES;
  _result.dummy23 = value;
  return self;
}
- (instancetype)clearDummy23 {
  _result.hasDummy23 = NO;
  _result.dummy23 = 0;
  return self;
}
- (BOOL)hasDummy24 {
  return _result.hasDummy24;
}
- (int32_t) dummy24 {
  return _result.dummy24;
}
- (instancetype)setDummy24:(int32_t)value {
  _result.hasDummy24 = YES;
  _result.dummy24 = value;
  return self;
}
- (instancetype)clearDummy24 {
  _result.hasDummy24 = NO;
  _result.dummy24 = 0;
  return self;
}
- (BOOL)hasDummy25 {
  return _result.hasDummy25;
}
- (int32_t) dummy25 {
  return _result.dummy25;
}
- (instancetype)setDummy25:(int32_t)value {
  _result.hasDummy25 = YES;
  _result.dummy25 = value;
  return self;
}
- (instancetype)clearDummy25 {
  _result.hasDummy25 = NO;
  _result.dummy25 = 0;
  return self;
}
- (BOOL)hasDummy26 {
  return _result.hasDummy26;
}
- (int32_t) dummy26 {
  return _result.dummy26;
}
- (instancetype)setDummy26:(int32_t)value {
  _result.hasDummy26 = YES;
  _result.dummy26 = value;
  return self;
}
- (instancetype)clearDummy26 {
  _result.hasDummy26 = NO;
  _result.dummy26 = 0;
  return self;
}
- (BOOL)hasDummy27 {
  return _result.hasDummy27;
}
- (int32_t) dummy27 {
  return _result.dummy27;
}
- (instancetype)setDummy27:(int32_t)value {
  _result.hasDummy27 = YES;
  _result.dummy27 = value;
  return self;
}
- (instancetype)clearDummy27 {
  _result.hasDummy27 = NO;
  _result.dummy27 = 0;
  return self;
}
- (BOOL)hasDummy28 {
  return _result.hasDummy28;
}
- (int32_t) dummy28 {
  return _result.dummy28;
}
- (instancetype)setDummy28:(int32_t)value {
  _result.hasDummy28 = YES;
  _result.dummy28 = value;
  return self;
}
- (instancetype)clearDummy28 {
  _result.hasDummy28 = NO;
  _result.dummy28 = 0;
  return self;
}
- (BOOL)hasDummy29 {
  return _result.hasDummy29;
}
- (int32_t) dummy29 {
  return _result.dummy29;
}
- (instancetype)setDummy29:(int32_t)value {
  _result.hasDummy29 = YES;
  _result.dummy29 = value;
  return self;
}
- (instancetype)clearDummy29 {
  _result.hasDummy29 = NO;
  _result.dummy29 = 0;
  return self;
}
- (BOOL)hasDummy30 {
  return _result.hasDummy30;
}
- (int32_t) dummy30 {
  return _result.dummy30;
}
- (instancetype)setDummy30:(int32_t)value {
  _result.hasDummy30 = YES;
  _result.dummy30 = value;
  return self;
}
- (instancetype)clearDummy30 {
  _result.hasDummy30 = NO;
  _result.dummy30 = 0;
  return self;
}
- (BOOL)hasDummy31 {
  return _result.hasDummy31;
}
- (int32_t) dummy31 {
  return _result.dummy31;
}
- (instancetype)setDummy31:(int32_t)value {
  _result.hasDummy31 = YES;
  _result.dummy31 = value;
  return self;
}
- (instancetype)clearDummy31 {
  _result.hasDummy31 = NO;
  _result.dummy31 = 0;
  return self;
}
- (BOOL)hasDummy32 {
  return _result.hasDummy32;
}
- (int32_t) dummy32 {
  return _result.dummy32;
}
- (instancetype)setDummy32:(int32_t)value {
  _result.hasDummy32 = YES;
  _result.dummy32 = value;
  return self;
}
- (instancetype)clearDummy32 {
  _result.hasDummy32 = NO;
  _result.dummy32 = 0;
  return self;
}
- (BOOL)hasC {
  return _result.hasC;
}
- (int32_t) c {
  return _result.c;
}
- (instancetype)setC:(int32_t)value {
  _result.hasC = YES;
  _result.c = value;
  return self;
}
- (instancetype)clearC {
  _result.hasC = NO;
  _result.c = 0;
  return self;
}

@end


#pragma mark - TestRequiredForeign

@interface TestRequiredForeign ()

@property (strong) TestRequired* optionalMessage;
@property (strong) NSMutableArray *repeatedMessageArray;
@property int32_t dummy;

@end

@implementation TestRequiredForeign {
  BOOL _hasDummy:1;
  BOOL _hasOptionalMessage:1;
  NSMutableArray *_repeatedMessageArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _optionalMessage = [TestRequired defaultInstance];
    _dummy = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasOptionalMessage {
  return !!_hasOptionalMessage;
}
- (void)setHasOptionalMessage:(BOOL)value {
  _hasOptionalMessage = !!value;
}

@dynamic repeatedMessage;
- (BOOL)hasDummy {
  return !!_hasDummy;
}
- (void)setHasDummy:(BOOL)value {
  _hasDummy = !!value;
}

- (NSArray *)repeatedMessage {
  return _repeatedMessageArray;
}
- (TestRequired*)repeatedMessageAtIndex:(NSUInteger)index {
  return _repeatedMessageArray[index];
}

- (BOOL)isInitialized {
  if (self.hasOptionalMessage) {
    if (!self.optionalMessage.isInitialized) {
      return NO;
    }
  }
  for (TestRequired* element in self.repeatedMessage) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasOptionalMessage) {
    [output writeMessage:1 value:self.optionalMessage];
  }
  for (TestRequired *element in self.repeatedMessageArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasDummy) {
    [output writeInt32:3 value:self.dummy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalMessage) {
    size_ += computeMessageSize(1, self.optionalMessage);
  }
  for (TestRequired *element in self.repeatedMessageArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasDummy) {
    size_ += computeInt32Size(3, self.dummy);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestRequiredForeign_Builder*)builder {
  return [[TestRequiredForeign_Builder alloc] init];
}
+ (TestRequiredForeign_Builder*)builderWithPrototype:(TestRequiredForeign*)prototype {
  return [[TestRequiredForeign builder] mergeFrom:prototype];
}
- (TestRequiredForeign_Builder*)builder {
  return [TestRequiredForeign builder];
}
- (TestRequiredForeign_Builder*)toBuilder {
  return [TestRequiredForeign builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalMessage"];
    [self.optionalMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestRequired* element in self.repeatedMessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedMessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDummy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dummy", @(self.dummy)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRequiredForeign class]]) {
    return NO;
  }
  TestRequiredForeign *otherMessage = other;
  return
      self.hasOptionalMessage == otherMessage.hasOptionalMessage &&
      (!self.hasOptionalMessage || [self.optionalMessage isEqual:otherMessage.optionalMessage]) &&
      ((self.repeatedMessageArray == nil && otherMessage.repeatedMessageArray == nil) ||
      [self.repeatedMessageArray isEqualToArray:otherMessage.repeatedMessageArray]) &&
      self.hasDummy == otherMessage.hasDummy &&
      (!self.hasDummy || self.dummy == otherMessage.dummy) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalMessage) {
    hashCode = hashCode * 31 + [self.optionalMessage hash];
  }
  for (TestRequired* element in self.repeatedMessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDummy) {
    hashCode = hashCode * 31 + [@(self.dummy) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestRequiredForeign_Builder {
  TestRequiredForeign* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestRequiredForeign alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestRequiredForeign alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestRequiredForeign_Builder alloc] init] mergeFrom:_result];
}

- (TestRequiredForeign*)defaultMessageInstance {
  return [TestRequiredForeign defaultInstance];
}

- (TestRequiredForeign*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequiredForeign*)buildPartial {
  TestRequiredForeign* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestRequiredForeign*)other {
  if (other == [TestRequiredForeign defaultInstance]) {
    return self;
  }
  if (other.hasOptionalMessage) {
    [self mergeOptionalMessage:other.optionalMessage];
  }
  if (other.repeatedMessageArray.count > 0) {
    if (_result.repeatedMessageArray == nil) {
      _result.repeatedMessageArray = [[NSMutableArray alloc] initWithArray:other.repeatedMessageArray];
    } else {
      [_result.repeatedMessageArray addObjectsFromArray:other.repeatedMessageArray];
    }
  }
  if (other.hasDummy) {
    [self setDummy:other.dummy];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRequired_Builder* subBuilder = [TestRequired builder];
        if (self.hasOptionalMessage) {
          [subBuilder mergeFrom:self.optionalMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalMessage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestRequired_Builder* subBuilder = [TestRequired builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessage:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setDummy:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasOptionalMessage {
  return _result.hasOptionalMessage;
}
- (TestRequired*)optionalMessage {
  return _result.optionalMessage;
}
- (instancetype)setOptionalMessage:(TestRequired*)value {
  _result.hasOptionalMessage = YES;
  _result.optionalMessage = value;
  return self;
}
- (instancetype)setOptionalMessageBuilder:(TestRequired_Builder*)builderForValue {
  return [self setOptionalMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalMessage:(TestRequired*)value {
  if (_result.hasOptionalMessage &&
      _result.optionalMessage != [TestRequired defaultInstance]) {
    _result.optionalMessage =
      [[[TestRequired builderWithPrototype:_result.optionalMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalMessage = value;
  }
  _result.hasOptionalMessage = YES;
  return self;
}
- (instancetype)clearOptionalMessage {
  _result.hasOptionalMessage = NO;
  _result.optionalMessage = [TestRequired defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedMessage {
  return _result.repeatedMessageArray;
}
- (TestRequired*)repeatedMessageAtIndex:(NSUInteger)index {
  return [_result repeatedMessageAtIndex:index];
}
- (instancetype)addRepeatedMessage:(TestRequired*)value {
  if (_result.repeatedMessageArray == nil) {
    _result.repeatedMessageArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedMessageArray addObject:value];
  return self;
}
- (instancetype)setRepeatedMessageArray:(NSArray *)array {
  _result.repeatedMessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedMessage {
  _result.repeatedMessageArray = nil;
  return self;
}
- (BOOL)hasDummy {
  return _result.hasDummy;
}
- (int32_t) dummy {
  return _result.dummy;
}
- (instancetype)setDummy:(int32_t)value {
  _result.hasDummy = YES;
  _result.dummy = value;
  return self;
}
- (instancetype)clearDummy {
  _result.hasDummy = NO;
  _result.dummy = 0;
  return self;
}

@end


#pragma mark - TestForeignNested

@interface TestForeignNested ()

@property (strong) TestAllTypes_NestedMessage* foreignNested;

@end

@implementation TestForeignNested {
  BOOL _hasForeignNested:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _foreignNested = [TestAllTypes_NestedMessage defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasForeignNested {
  return !!_hasForeignNested;
}
- (void)setHasForeignNested:(BOOL)value {
  _hasForeignNested = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasForeignNested) {
    [output writeMessage:1 value:self.foreignNested];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasForeignNested) {
    size_ += computeMessageSize(1, self.foreignNested);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestForeignNested_Builder*)builder {
  return [[TestForeignNested_Builder alloc] init];
}
+ (TestForeignNested_Builder*)builderWithPrototype:(TestForeignNested*)prototype {
  return [[TestForeignNested builder] mergeFrom:prototype];
}
- (TestForeignNested_Builder*)builder {
  return [TestForeignNested builder];
}
- (TestForeignNested_Builder*)toBuilder {
  return [TestForeignNested builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasForeignNested) {
    [output appendFormat:@"%@%@ {\n", indent, @"foreignNested"];
    [self.foreignNested writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestForeignNested class]]) {
    return NO;
  }
  TestForeignNested *otherMessage = other;
  return
      self.hasForeignNested == otherMessage.hasForeignNested &&
      (!self.hasForeignNested || [self.foreignNested isEqual:otherMessage.foreignNested]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasForeignNested) {
    hashCode = hashCode * 31 + [self.foreignNested hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestForeignNested_Builder {
  TestForeignNested* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestForeignNested alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestForeignNested alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestForeignNested_Builder alloc] init] mergeFrom:_result];
}

- (TestForeignNested*)defaultMessageInstance {
  return [TestForeignNested defaultInstance];
}

- (TestForeignNested*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestForeignNested*)buildPartial {
  TestForeignNested* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestForeignNested*)other {
  if (other == [TestForeignNested defaultInstance]) {
    return self;
  }
  if (other.hasForeignNested) {
    [self mergeForeignNested:other.foreignNested];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_NestedMessage_Builder* subBuilder = [TestAllTypes_NestedMessage builder];
        if (self.hasForeignNested) {
          [subBuilder mergeFrom:self.foreignNested];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setForeignNested:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasForeignNested {
  return _result.hasForeignNested;
}
- (TestAllTypes_NestedMessage*)foreignNested {
  return _result.foreignNested;
}
- (instancetype)setForeignNested:(TestAllTypes_NestedMessage*)value {
  _result.hasForeignNested = YES;
  _result.foreignNested = value;
  return self;
}
- (instancetype)setForeignNestedBuilder:(TestAllTypes_NestedMessage_Builder*)builderForValue {
  return [self setForeignNested:[builderForValue build]];
}
- (instancetype)mergeForeignNested:(TestAllTypes_NestedMessage*)value {
  if (_result.hasForeignNested &&
      _result.foreignNested != [TestAllTypes_NestedMessage defaultInstance]) {
    _result.foreignNested =
      [[[TestAllTypes_NestedMessage builderWithPrototype:_result.foreignNested] mergeFrom:value] buildPartial];
  } else {
    _result.foreignNested = value;
  }
  _result.hasForeignNested = YES;
  return self;
}
- (instancetype)clearForeignNested {
  _result.hasForeignNested = NO;
  _result.foreignNested = [TestAllTypes_NestedMessage defaultInstance];
  return self;
}

@end


#pragma mark - TestEmptyMessage

@interface TestEmptyMessage ()


@end

@implementation TestEmptyMessage {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestEmptyMessage_Builder*)builder {
  return [[TestEmptyMessage_Builder alloc] init];
}
+ (TestEmptyMessage_Builder*)builderWithPrototype:(TestEmptyMessage*)prototype {
  return [[TestEmptyMessage builder] mergeFrom:prototype];
}
- (TestEmptyMessage_Builder*)builder {
  return [TestEmptyMessage builder];
}
- (TestEmptyMessage_Builder*)toBuilder {
  return [TestEmptyMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessage class]]) {
    return NO;
  }
  TestEmptyMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestEmptyMessage_Builder {
  TestEmptyMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestEmptyMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestEmptyMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestEmptyMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestEmptyMessage*)defaultMessageInstance {
  return [TestEmptyMessage defaultInstance];
}

- (TestEmptyMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessage*)buildPartial {
  TestEmptyMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestEmptyMessage*)other {
  if (other == [TestEmptyMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - TestEmptyMessageWithExtensions

@interface TestEmptyMessageWithExtensions ()


@end

@implementation TestEmptyMessageWithExtensions {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestEmptyMessageWithExtensions_Builder*)builder {
  return [[TestEmptyMessageWithExtensions_Builder alloc] init];
}
+ (TestEmptyMessageWithExtensions_Builder*)builderWithPrototype:(TestEmptyMessageWithExtensions*)prototype {
  return [[TestEmptyMessageWithExtensions builder] mergeFrom:prototype];
}
- (TestEmptyMessageWithExtensions_Builder*)builder {
  return [TestEmptyMessageWithExtensions builder];
}
- (TestEmptyMessageWithExtensions_Builder*)toBuilder {
  return [TestEmptyMessageWithExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEmptyMessageWithExtensions class]]) {
    return NO;
  }
  TestEmptyMessageWithExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestEmptyMessageWithExtensions_Builder {
  TestEmptyMessageWithExtensions* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestEmptyMessageWithExtensions alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestEmptyMessageWithExtensions alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestEmptyMessageWithExtensions_Builder alloc] init] mergeFrom:_result];
}

- (TestEmptyMessageWithExtensions*)defaultMessageInstance {
  return [TestEmptyMessageWithExtensions defaultInstance];
}

- (TestEmptyMessageWithExtensions*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEmptyMessageWithExtensions*)buildPartial {
  TestEmptyMessageWithExtensions* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestEmptyMessageWithExtensions*)other {
  if (other == [TestEmptyMessageWithExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - TestMultipleExtensionRanges

@interface TestMultipleExtensionRanges ()


@end

@implementation TestMultipleExtensionRanges {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:42
                                        to:43];
  [self writeExtensionsToCodedOutputStream:output
                                      from:4143
                                        to:4244];
  [self writeExtensionsToCodedOutputStream:output
                                      from:65536
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestMultipleExtensionRanges_Builder*)builder {
  return [[TestMultipleExtensionRanges_Builder alloc] init];
}
+ (TestMultipleExtensionRanges_Builder*)builderWithPrototype:(TestMultipleExtensionRanges*)prototype {
  return [[TestMultipleExtensionRanges builder] mergeFrom:prototype];
}
- (TestMultipleExtensionRanges_Builder*)builder {
  return [TestMultipleExtensionRanges builder];
}
- (TestMultipleExtensionRanges_Builder*)toBuilder {
  return [TestMultipleExtensionRanges builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:42
                                              to:43
                                      withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:4143
                                              to:4244
                                      withIndent:indent];
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:65536
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMultipleExtensionRanges class]]) {
    return NO;
  }
  TestMultipleExtensionRanges *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:42 to:43] &&

      [self isEqualExtensionsInOther:otherMessage from:4143 to:4244] &&

      [self isEqualExtensionsInOther:otherMessage from:65536 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:42 to:43];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:4143 to:4244];
  hashCode = hashCode * 31 + [self hashExtensionsFrom:65536 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestMultipleExtensionRanges_Builder {
  TestMultipleExtensionRanges* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestMultipleExtensionRanges alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestMultipleExtensionRanges alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestMultipleExtensionRanges_Builder alloc] init] mergeFrom:_result];
}

- (TestMultipleExtensionRanges*)defaultMessageInstance {
  return [TestMultipleExtensionRanges defaultInstance];
}

- (TestMultipleExtensionRanges*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMultipleExtensionRanges*)buildPartial {
  TestMultipleExtensionRanges* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestMultipleExtensionRanges*)other {
  if (other == [TestMultipleExtensionRanges defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - TestReallyLargeTagNumber

@interface TestReallyLargeTagNumber ()

@property int32_t a;
@property int32_t bb;

@end

@implementation TestReallyLargeTagNumber {
  BOOL _hasA:1;
  BOOL _hasBb:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
    _bb = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}
- (BOOL)hasBb {
  return !!_hasBb;
}
- (void)setHasBb:(BOOL)value {
  _hasBb = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasBb) {
    [output writeInt32:268435455 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasBb) {
    size_ += computeInt32Size(268435455, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestReallyLargeTagNumber_Builder*)builder {
  return [[TestReallyLargeTagNumber_Builder alloc] init];
}
+ (TestReallyLargeTagNumber_Builder*)builderWithPrototype:(TestReallyLargeTagNumber*)prototype {
  return [[TestReallyLargeTagNumber builder] mergeFrom:prototype];
}
- (TestReallyLargeTagNumber_Builder*)builder {
  return [TestReallyLargeTagNumber builder];
}
- (TestReallyLargeTagNumber_Builder*)toBuilder {
  return [TestReallyLargeTagNumber builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasBb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bb", @(self.bb)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestReallyLargeTagNumber class]]) {
    return NO;
  }
  TestReallyLargeTagNumber *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || self.bb == otherMessage.bb) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasBb) {
    hashCode = hashCode * 31 + [@(self.bb) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestReallyLargeTagNumber_Builder {
  TestReallyLargeTagNumber* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestReallyLargeTagNumber alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestReallyLargeTagNumber alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestReallyLargeTagNumber_Builder alloc] init] mergeFrom:_result];
}

- (TestReallyLargeTagNumber*)defaultMessageInstance {
  return [TestReallyLargeTagNumber defaultInstance];
}

- (TestReallyLargeTagNumber*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestReallyLargeTagNumber*)buildPartial {
  TestReallyLargeTagNumber* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestReallyLargeTagNumber*)other {
  if (other == [TestReallyLargeTagNumber defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasBb) {
    [self setBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 2147483640: {
        [self setBb:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}
- (BOOL)hasBb {
  return _result.hasBb;
}
- (int32_t) bb {
  return _result.bb;
}
- (instancetype)setBb:(int32_t)value {
  _result.hasBb = YES;
  _result.bb = value;
  return self;
}
- (instancetype)clearBb {
  _result.hasBb = NO;
  _result.bb = 0;
  return self;
}

@end


#pragma mark - TestRecursiveMessage

@interface TestRecursiveMessage ()

@property (strong) TestRecursiveMessage* a;
@property int32_t i;

@end

@implementation TestRecursiveMessage {
  BOOL _hasI:1;
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = [TestRecursiveMessage defaultInstance];
    _i = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}

- (BOOL)hasI {
  return !!_hasI;
}
- (void)setHasI:(BOOL)value {
  _hasI = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasI) {
    [output writeInt32:2 value:self.i];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasI) {
    size_ += computeInt32Size(2, self.i);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestRecursiveMessage_Builder*)builder {
  return [[TestRecursiveMessage_Builder alloc] init];
}
+ (TestRecursiveMessage_Builder*)builderWithPrototype:(TestRecursiveMessage*)prototype {
  return [[TestRecursiveMessage builder] mergeFrom:prototype];
}
- (TestRecursiveMessage_Builder*)builder {
  return [TestRecursiveMessage builder];
}
- (TestRecursiveMessage_Builder*)toBuilder {
  return [TestRecursiveMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"i", @(self.i)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRecursiveMessage class]]) {
    return NO;
  }
  TestRecursiveMessage *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      self.hasI == otherMessage.hasI &&
      (!self.hasI || self.i == otherMessage.i) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasI) {
    hashCode = hashCode * 31 + [@(self.i) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestRecursiveMessage_Builder {
  TestRecursiveMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestRecursiveMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestRecursiveMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestRecursiveMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestRecursiveMessage*)defaultMessageInstance {
  return [TestRecursiveMessage defaultInstance];
}

- (TestRecursiveMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRecursiveMessage*)buildPartial {
  TestRecursiveMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestRecursiveMessage*)other {
  if (other == [TestRecursiveMessage defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasI) {
    [self setI:other.i];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestRecursiveMessage_Builder* subBuilder = [TestRecursiveMessage builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setI:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (TestRecursiveMessage*)a {
  return _result.a;
}
- (instancetype)setA:(TestRecursiveMessage*)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)setABuilder:(TestRecursiveMessage_Builder*)builderForValue {
  return [self setA:[builderForValue build]];
}
- (instancetype)mergeA:(TestRecursiveMessage*)value {
  if (_result.hasA &&
      _result.a != [TestRecursiveMessage defaultInstance]) {
    _result.a =
      [[[TestRecursiveMessage builderWithPrototype:_result.a] mergeFrom:value] buildPartial];
  } else {
    _result.a = value;
  }
  _result.hasA = YES;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = [TestRecursiveMessage defaultInstance];
  return self;
}
- (BOOL)hasI {
  return _result.hasI;
}
- (int32_t) i {
  return _result.i;
}
- (instancetype)setI:(int32_t)value {
  _result.hasI = YES;
  _result.i = value;
  return self;
}
- (instancetype)clearI {
  _result.hasI = NO;
  _result.i = 0;
  return self;
}

@end


#pragma mark - TestMutualRecursionA

@interface TestMutualRecursionA ()

@property (strong) TestMutualRecursionB* bb;

@end

@implementation TestMutualRecursionA {
  BOOL _hasBb:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _bb = [TestMutualRecursionB defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasBb {
  return !!_hasBb;
}
- (void)setHasBb:(BOOL)value {
  _hasBb = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasBb) {
    [output writeMessage:1 value:self.bb];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBb) {
    size_ += computeMessageSize(1, self.bb);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestMutualRecursionA_Builder*)builder {
  return [[TestMutualRecursionA_Builder alloc] init];
}
+ (TestMutualRecursionA_Builder*)builderWithPrototype:(TestMutualRecursionA*)prototype {
  return [[TestMutualRecursionA builder] mergeFrom:prototype];
}
- (TestMutualRecursionA_Builder*)builder {
  return [TestMutualRecursionA builder];
}
- (TestMutualRecursionA_Builder*)toBuilder {
  return [TestMutualRecursionA builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasBb) {
    [output appendFormat:@"%@%@ {\n", indent, @"bb"];
    [self.bb writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionA class]]) {
    return NO;
  }
  TestMutualRecursionA *otherMessage = other;
  return
      self.hasBb == otherMessage.hasBb &&
      (!self.hasBb || [self.bb isEqual:otherMessage.bb]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasBb) {
    hashCode = hashCode * 31 + [self.bb hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestMutualRecursionA_Builder {
  TestMutualRecursionA* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestMutualRecursionA alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestMutualRecursionA alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestMutualRecursionA_Builder alloc] init] mergeFrom:_result];
}

- (TestMutualRecursionA*)defaultMessageInstance {
  return [TestMutualRecursionA defaultInstance];
}

- (TestMutualRecursionA*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMutualRecursionA*)buildPartial {
  TestMutualRecursionA* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestMutualRecursionA*)other {
  if (other == [TestMutualRecursionA defaultInstance]) {
    return self;
  }
  if (other.hasBb) {
    [self mergeBb:other.bb];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionB_Builder* subBuilder = [TestMutualRecursionB builder];
        if (self.hasBb) {
          [subBuilder mergeFrom:self.bb];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBb:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasBb {
  return _result.hasBb;
}
- (TestMutualRecursionB*)bb {
  return _result.bb;
}
- (instancetype)setBb:(TestMutualRecursionB*)value {
  _result.hasBb = YES;
  _result.bb = value;
  return self;
}
- (instancetype)setBbBuilder:(TestMutualRecursionB_Builder*)builderForValue {
  return [self setBb:[builderForValue build]];
}
- (instancetype)mergeBb:(TestMutualRecursionB*)value {
  if (_result.hasBb &&
      _result.bb != [TestMutualRecursionB defaultInstance]) {
    _result.bb =
      [[[TestMutualRecursionB builderWithPrototype:_result.bb] mergeFrom:value] buildPartial];
  } else {
    _result.bb = value;
  }
  _result.hasBb = YES;
  return self;
}
- (instancetype)clearBb {
  _result.hasBb = NO;
  _result.bb = [TestMutualRecursionB defaultInstance];
  return self;
}

@end


#pragma mark - TestMutualRecursionB

@interface TestMutualRecursionB ()

@property (strong) TestMutualRecursionA* a;
@property int32_t optionalInt32;

@end

@implementation TestMutualRecursionB {
  BOOL _hasOptionalInt32:1;
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = [TestMutualRecursionA defaultInstance];
    _optionalInt32 = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}

- (BOOL)hasOptionalInt32 {
  return !!_hasOptionalInt32;
}
- (void)setHasOptionalInt32:(BOOL)value {
  _hasOptionalInt32 = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeMessage:1 value:self.a];
  }
  if (self.hasOptionalInt32) {
    [output writeInt32:2 value:self.optionalInt32];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeMessageSize(1, self.a);
  }
  if (self.hasOptionalInt32) {
    size_ += computeInt32Size(2, self.optionalInt32);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestMutualRecursionB_Builder*)builder {
  return [[TestMutualRecursionB_Builder alloc] init];
}
+ (TestMutualRecursionB_Builder*)builderWithPrototype:(TestMutualRecursionB*)prototype {
  return [[TestMutualRecursionB builder] mergeFrom:prototype];
}
- (TestMutualRecursionB_Builder*)builder {
  return [TestMutualRecursionB builder];
}
- (TestMutualRecursionB_Builder*)toBuilder {
  return [TestMutualRecursionB builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@ {\n", indent, @"a"];
    [self.a writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"optionalInt32", @(self.optionalInt32)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestMutualRecursionB class]]) {
    return NO;
  }
  TestMutualRecursionB *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      self.hasOptionalInt32 == otherMessage.hasOptionalInt32 &&
      (!self.hasOptionalInt32 || self.optionalInt32 == otherMessage.optionalInt32) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  if (self.hasOptionalInt32) {
    hashCode = hashCode * 31 + [@(self.optionalInt32) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestMutualRecursionB_Builder {
  TestMutualRecursionB* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestMutualRecursionB alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestMutualRecursionB alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestMutualRecursionB_Builder alloc] init] mergeFrom:_result];
}

- (TestMutualRecursionB*)defaultMessageInstance {
  return [TestMutualRecursionB defaultInstance];
}

- (TestMutualRecursionB*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestMutualRecursionB*)buildPartial {
  TestMutualRecursionB* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestMutualRecursionB*)other {
  if (other == [TestMutualRecursionB defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self mergeA:other.a];
  }
  if (other.hasOptionalInt32) {
    [self setOptionalInt32:other.optionalInt32];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestMutualRecursionA_Builder* subBuilder = [TestMutualRecursionA builder];
        if (self.hasA) {
          [subBuilder mergeFrom:self.a];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setA:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setOptionalInt32:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (TestMutualRecursionA*)a {
  return _result.a;
}
- (instancetype)setA:(TestMutualRecursionA*)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)setABuilder:(TestMutualRecursionA_Builder*)builderForValue {
  return [self setA:[builderForValue build]];
}
- (instancetype)mergeA:(TestMutualRecursionA*)value {
  if (_result.hasA &&
      _result.a != [TestMutualRecursionA defaultInstance]) {
    _result.a =
      [[[TestMutualRecursionA builderWithPrototype:_result.a] mergeFrom:value] buildPartial];
  } else {
    _result.a = value;
  }
  _result.hasA = YES;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = [TestMutualRecursionA defaultInstance];
  return self;
}
- (BOOL)hasOptionalInt32 {
  return _result.hasOptionalInt32;
}
- (int32_t) optionalInt32 {
  return _result.optionalInt32;
}
- (instancetype)setOptionalInt32:(int32_t)value {
  _result.hasOptionalInt32 = YES;
  _result.optionalInt32 = value;
  return self;
}
- (instancetype)clearOptionalInt32 {
  _result.hasOptionalInt32 = NO;
  _result.optionalInt32 = 0;
  return self;
}

@end


#pragma mark - TestDupFieldNumber

@interface TestDupFieldNumber ()

@property int32_t a;
@property (strong) TestDupFieldNumber_Foo* Foo;
@property (strong) TestDupFieldNumber_Bar* Bar;

@end

@implementation TestDupFieldNumber {
  BOOL _hasA:1;
  BOOL _hasFoo:1;
  BOOL _hasBar:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
    _Foo = [TestDupFieldNumber_Foo defaultInstance];
    _Bar = [TestDupFieldNumber_Bar defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}
- (BOOL)hasFoo {
  return !!_hasFoo;
}
- (void)setHasFoo:(BOOL)value {
  _hasFoo = !!value;
}

- (BOOL)hasBar {
  return !!_hasBar;
}
- (void)setHasBar:(BOOL)value {
  _hasBar = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  if (self.hasFoo) {
    [output writeGroup:2 value:self.Foo];
  }
  if (self.hasBar) {
    [output writeGroup:3 value:self.Bar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  if (self.hasFoo) {
    size_ += computeGroupSize(2, self.Foo);
  }
  if (self.hasBar) {
    size_ += computeGroupSize(3, self.Bar);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDupFieldNumber_Builder*)builder {
  return [[TestDupFieldNumber_Builder alloc] init];
}
+ (TestDupFieldNumber_Builder*)builderWithPrototype:(TestDupFieldNumber*)prototype {
  return [[TestDupFieldNumber builder] mergeFrom:prototype];
}
- (TestDupFieldNumber_Builder*)builder {
  return [TestDupFieldNumber builder];
}
- (TestDupFieldNumber_Builder*)toBuilder {
  return [TestDupFieldNumber builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  if (self.hasFoo) {
    [output appendFormat:@"%@%@ {\n", indent, @"Foo"];
    [self.Foo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBar) {
    [output appendFormat:@"%@%@ {\n", indent, @"Bar"];
    [self.Bar writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber class]]) {
    return NO;
  }
  TestDupFieldNumber *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      self.hasFoo == otherMessage.hasFoo &&
      (!self.hasFoo || [self.Foo isEqual:otherMessage.Foo]) &&
      self.hasBar == otherMessage.hasBar &&
      (!self.hasBar || [self.Bar isEqual:otherMessage.Bar]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  if (self.hasFoo) {
    hashCode = hashCode * 31 + [self.Foo hash];
  }
  if (self.hasBar) {
    hashCode = hashCode * 31 + [self.Bar hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDupFieldNumber_Builder {
  TestDupFieldNumber* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDupFieldNumber alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDupFieldNumber alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDupFieldNumber_Builder alloc] init] mergeFrom:_result];
}

- (TestDupFieldNumber*)defaultMessageInstance {
  return [TestDupFieldNumber defaultInstance];
}

- (TestDupFieldNumber*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumber*)buildPartial {
  TestDupFieldNumber* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDupFieldNumber*)other {
  if (other == [TestDupFieldNumber defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  if (other.hasFoo) {
    [self mergeFoo:other.Foo];
  }
  if (other.hasBar) {
    [self mergeBar:other.Bar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
      case 19: {
        TestDupFieldNumber_Foo_Builder* subBuilder = [TestDupFieldNumber_Foo builder];
        if (self.hasFoo) {
          [subBuilder mergeFrom:self.Foo];
        }
        [input readGroup:2 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setFoo:[subBuilder buildPartial]];
        break;
      }
      case 27: {
        TestDupFieldNumber_Bar_Builder* subBuilder = [TestDupFieldNumber_Bar builder];
        if (self.hasBar) {
          [subBuilder mergeFrom:self.Bar];
        }
        [input readGroup:3 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setBar:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}
- (BOOL)hasFoo {
  return _result.hasFoo;
}
- (TestDupFieldNumber_Foo*)Foo {
  return _result.Foo;
}
- (instancetype)setFoo:(TestDupFieldNumber_Foo*)value {
  _result.hasFoo = YES;
  _result.Foo = value;
  return self;
}
- (instancetype)setFooBuilder:(TestDupFieldNumber_Foo_Builder*)builderForValue {
  return [self setFoo:[builderForValue build]];
}
- (instancetype)mergeFoo:(TestDupFieldNumber_Foo*)value {
  if (_result.hasFoo &&
      _result.Foo != [TestDupFieldNumber_Foo defaultInstance]) {
    _result.Foo =
      [[[TestDupFieldNumber_Foo builderWithPrototype:_result.Foo] mergeFrom:value] buildPartial];
  } else {
    _result.Foo = value;
  }
  _result.hasFoo = YES;
  return self;
}
- (instancetype)clearFoo {
  _result.hasFoo = NO;
  _result.Foo = [TestDupFieldNumber_Foo defaultInstance];
  return self;
}
- (BOOL)hasBar {
  return _result.hasBar;
}
- (TestDupFieldNumber_Bar*)Bar {
  return _result.Bar;
}
- (instancetype)setBar:(TestDupFieldNumber_Bar*)value {
  _result.hasBar = YES;
  _result.Bar = value;
  return self;
}
- (instancetype)setBarBuilder:(TestDupFieldNumber_Bar_Builder*)builderForValue {
  return [self setBar:[builderForValue build]];
}
- (instancetype)mergeBar:(TestDupFieldNumber_Bar*)value {
  if (_result.hasBar &&
      _result.Bar != [TestDupFieldNumber_Bar defaultInstance]) {
    _result.Bar =
      [[[TestDupFieldNumber_Bar builderWithPrototype:_result.Bar] mergeFrom:value] buildPartial];
  } else {
    _result.Bar = value;
  }
  _result.hasBar = YES;
  return self;
}
- (instancetype)clearBar {
  _result.hasBar = NO;
  _result.Bar = [TestDupFieldNumber_Bar defaultInstance];
  return self;
}

@end


#pragma mark - TestDupFieldNumber_Foo

@interface TestDupFieldNumber_Foo ()

@property int32_t a;

@end

@implementation TestDupFieldNumber_Foo {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDupFieldNumber_Foo_Builder*)builder {
  return [[TestDupFieldNumber_Foo_Builder alloc] init];
}
+ (TestDupFieldNumber_Foo_Builder*)builderWithPrototype:(TestDupFieldNumber_Foo*)prototype {
  return [[TestDupFieldNumber_Foo builder] mergeFrom:prototype];
}
- (TestDupFieldNumber_Foo_Builder*)builder {
  return [TestDupFieldNumber_Foo builder];
}
- (TestDupFieldNumber_Foo_Builder*)toBuilder {
  return [TestDupFieldNumber_Foo builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber_Foo class]]) {
    return NO;
  }
  TestDupFieldNumber_Foo *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDupFieldNumber_Foo_Builder {
  TestDupFieldNumber_Foo* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDupFieldNumber_Foo alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDupFieldNumber_Foo alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDupFieldNumber_Foo_Builder alloc] init] mergeFrom:_result];
}

- (TestDupFieldNumber_Foo*)defaultMessageInstance {
  return [TestDupFieldNumber_Foo defaultInstance];
}

- (TestDupFieldNumber_Foo*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumber_Foo*)buildPartial {
  TestDupFieldNumber_Foo* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDupFieldNumber_Foo*)other {
  if (other == [TestDupFieldNumber_Foo defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - TestDupFieldNumber_Bar

@interface TestDupFieldNumber_Bar ()

@property int32_t a;

@end

@implementation TestDupFieldNumber_Bar {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeInt32:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeInt32Size(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDupFieldNumber_Bar_Builder*)builder {
  return [[TestDupFieldNumber_Bar_Builder alloc] init];
}
+ (TestDupFieldNumber_Bar_Builder*)builderWithPrototype:(TestDupFieldNumber_Bar*)prototype {
  return [[TestDupFieldNumber_Bar builder] mergeFrom:prototype];
}
- (TestDupFieldNumber_Bar_Builder*)builder {
  return [TestDupFieldNumber_Bar builder];
}
- (TestDupFieldNumber_Bar_Builder*)toBuilder {
  return [TestDupFieldNumber_Bar builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", @(self.a)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDupFieldNumber_Bar class]]) {
    return NO;
  }
  TestDupFieldNumber_Bar *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || self.a == otherMessage.a) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [@(self.a) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDupFieldNumber_Bar_Builder {
  TestDupFieldNumber_Bar* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDupFieldNumber_Bar alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDupFieldNumber_Bar alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDupFieldNumber_Bar_Builder alloc] init] mergeFrom:_result];
}

- (TestDupFieldNumber_Bar*)defaultMessageInstance {
  return [TestDupFieldNumber_Bar defaultInstance];
}

- (TestDupFieldNumber_Bar*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDupFieldNumber_Bar*)buildPartial {
  TestDupFieldNumber_Bar* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDupFieldNumber_Bar*)other {
  if (other == [TestDupFieldNumber_Bar defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setA:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (int32_t) a {
  return _result.a;
}
- (instancetype)setA:(int32_t)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = 0;
  return self;
}

@end


#pragma mark - TestEagerMessage

@interface TestEagerMessage ()

@property (strong) TestAllTypes* subMessage;

@end

@implementation TestEagerMessage {
  BOOL _hasSubMessage:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _subMessage = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasSubMessage {
  return !!_hasSubMessage;
}
- (void)setHasSubMessage:(BOOL)value {
  _hasSubMessage = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasSubMessage) {
    [output writeMessage:1 value:self.subMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSubMessage) {
    size_ += computeMessageSize(1, self.subMessage);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestEagerMessage_Builder*)builder {
  return [[TestEagerMessage_Builder alloc] init];
}
+ (TestEagerMessage_Builder*)builderWithPrototype:(TestEagerMessage*)prototype {
  return [[TestEagerMessage builder] mergeFrom:prototype];
}
- (TestEagerMessage_Builder*)builder {
  return [TestEagerMessage builder];
}
- (TestEagerMessage_Builder*)toBuilder {
  return [TestEagerMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasSubMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"subMessage"];
    [self.subMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestEagerMessage class]]) {
    return NO;
  }
  TestEagerMessage *otherMessage = other;
  return
      self.hasSubMessage == otherMessage.hasSubMessage &&
      (!self.hasSubMessage || [self.subMessage isEqual:otherMessage.subMessage]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasSubMessage) {
    hashCode = hashCode * 31 + [self.subMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestEagerMessage_Builder {
  TestEagerMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestEagerMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestEagerMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestEagerMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestEagerMessage*)defaultMessageInstance {
  return [TestEagerMessage defaultInstance];
}

- (TestEagerMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestEagerMessage*)buildPartial {
  TestEagerMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestEagerMessage*)other {
  if (other == [TestEagerMessage defaultInstance]) {
    return self;
  }
  if (other.hasSubMessage) {
    [self mergeSubMessage:other.subMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasSubMessage) {
          [subBuilder mergeFrom:self.subMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSubMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasSubMessage {
  return _result.hasSubMessage;
}
- (TestAllTypes*)subMessage {
  return _result.subMessage;
}
- (instancetype)setSubMessage:(TestAllTypes*)value {
  _result.hasSubMessage = YES;
  _result.subMessage = value;
  return self;
}
- (instancetype)setSubMessageBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setSubMessage:[builderForValue build]];
}
- (instancetype)mergeSubMessage:(TestAllTypes*)value {
  if (_result.hasSubMessage &&
      _result.subMessage != [TestAllTypes defaultInstance]) {
    _result.subMessage =
      [[[TestAllTypes builderWithPrototype:_result.subMessage] mergeFrom:value] buildPartial];
  } else {
    _result.subMessage = value;
  }
  _result.hasSubMessage = YES;
  return self;
}
- (instancetype)clearSubMessage {
  _result.hasSubMessage = NO;
  _result.subMessage = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestLazyMessage

@interface TestLazyMessage ()

@property (strong) TestAllTypes* subMessage;

@end

@implementation TestLazyMessage {
  BOOL _hasSubMessage:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _subMessage = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasSubMessage {
  return !!_hasSubMessage;
}
- (void)setHasSubMessage:(BOOL)value {
  _hasSubMessage = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasSubMessage) {
    [output writeMessage:1 value:self.subMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSubMessage) {
    size_ += computeMessageSize(1, self.subMessage);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestLazyMessage_Builder*)builder {
  return [[TestLazyMessage_Builder alloc] init];
}
+ (TestLazyMessage_Builder*)builderWithPrototype:(TestLazyMessage*)prototype {
  return [[TestLazyMessage builder] mergeFrom:prototype];
}
- (TestLazyMessage_Builder*)builder {
  return [TestLazyMessage builder];
}
- (TestLazyMessage_Builder*)toBuilder {
  return [TestLazyMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasSubMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"subMessage"];
    [self.subMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestLazyMessage class]]) {
    return NO;
  }
  TestLazyMessage *otherMessage = other;
  return
      self.hasSubMessage == otherMessage.hasSubMessage &&
      (!self.hasSubMessage || [self.subMessage isEqual:otherMessage.subMessage]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasSubMessage) {
    hashCode = hashCode * 31 + [self.subMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestLazyMessage_Builder {
  TestLazyMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestLazyMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestLazyMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestLazyMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestLazyMessage*)defaultMessageInstance {
  return [TestLazyMessage defaultInstance];
}

- (TestLazyMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestLazyMessage*)buildPartial {
  TestLazyMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestLazyMessage*)other {
  if (other == [TestLazyMessage defaultInstance]) {
    return self;
  }
  if (other.hasSubMessage) {
    [self mergeSubMessage:other.subMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasSubMessage) {
          [subBuilder mergeFrom:self.subMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSubMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasSubMessage {
  return _result.hasSubMessage;
}
- (TestAllTypes*)subMessage {
  return _result.subMessage;
}
- (instancetype)setSubMessage:(TestAllTypes*)value {
  _result.hasSubMessage = YES;
  _result.subMessage = value;
  return self;
}
- (instancetype)setSubMessageBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setSubMessage:[builderForValue build]];
}
- (instancetype)mergeSubMessage:(TestAllTypes*)value {
  if (_result.hasSubMessage &&
      _result.subMessage != [TestAllTypes defaultInstance]) {
    _result.subMessage =
      [[[TestAllTypes builderWithPrototype:_result.subMessage] mergeFrom:value] buildPartial];
  } else {
    _result.subMessage = value;
  }
  _result.hasSubMessage = YES;
  return self;
}
- (instancetype)clearSubMessage {
  _result.hasSubMessage = NO;
  _result.subMessage = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestNestedMessageHasBits

@interface TestNestedMessageHasBits ()

@property (strong) TestNestedMessageHasBits_NestedMessage* optionalNestedMessage;

@end

@implementation TestNestedMessageHasBits {
  BOOL _hasOptionalNestedMessage:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _optionalNestedMessage = [TestNestedMessageHasBits_NestedMessage defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasOptionalNestedMessage {
  return !!_hasOptionalNestedMessage;
}
- (void)setHasOptionalNestedMessage:(BOOL)value {
  _hasOptionalNestedMessage = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasOptionalNestedMessage) {
    [output writeMessage:1 value:self.optionalNestedMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalNestedMessage) {
    size_ += computeMessageSize(1, self.optionalNestedMessage);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestNestedMessageHasBits_Builder*)builder {
  return [[TestNestedMessageHasBits_Builder alloc] init];
}
+ (TestNestedMessageHasBits_Builder*)builderWithPrototype:(TestNestedMessageHasBits*)prototype {
  return [[TestNestedMessageHasBits builder] mergeFrom:prototype];
}
- (TestNestedMessageHasBits_Builder*)builder {
  return [TestNestedMessageHasBits builder];
}
- (TestNestedMessageHasBits_Builder*)toBuilder {
  return [TestNestedMessageHasBits builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalNestedMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalNestedMessage"];
    [self.optionalNestedMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBits class]]) {
    return NO;
  }
  TestNestedMessageHasBits *otherMessage = other;
  return
      self.hasOptionalNestedMessage == otherMessage.hasOptionalNestedMessage &&
      (!self.hasOptionalNestedMessage || [self.optionalNestedMessage isEqual:otherMessage.optionalNestedMessage]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalNestedMessage) {
    hashCode = hashCode * 31 + [self.optionalNestedMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestNestedMessageHasBits_Builder {
  TestNestedMessageHasBits* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestNestedMessageHasBits alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestNestedMessageHasBits alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestNestedMessageHasBits_Builder alloc] init] mergeFrom:_result];
}

- (TestNestedMessageHasBits*)defaultMessageInstance {
  return [TestNestedMessageHasBits defaultInstance];
}

- (TestNestedMessageHasBits*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedMessageHasBits*)buildPartial {
  TestNestedMessageHasBits* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestNestedMessageHasBits*)other {
  if (other == [TestNestedMessageHasBits defaultInstance]) {
    return self;
  }
  if (other.hasOptionalNestedMessage) {
    [self mergeOptionalNestedMessage:other.optionalNestedMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestNestedMessageHasBits_NestedMessage_Builder* subBuilder = [TestNestedMessageHasBits_NestedMessage builder];
        if (self.hasOptionalNestedMessage) {
          [subBuilder mergeFrom:self.optionalNestedMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalNestedMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasOptionalNestedMessage {
  return _result.hasOptionalNestedMessage;
}
- (TestNestedMessageHasBits_NestedMessage*)optionalNestedMessage {
  return _result.optionalNestedMessage;
}
- (instancetype)setOptionalNestedMessage:(TestNestedMessageHasBits_NestedMessage*)value {
  _result.hasOptionalNestedMessage = YES;
  _result.optionalNestedMessage = value;
  return self;
}
- (instancetype)setOptionalNestedMessageBuilder:(TestNestedMessageHasBits_NestedMessage_Builder*)builderForValue {
  return [self setOptionalNestedMessage:[builderForValue build]];
}
- (instancetype)mergeOptionalNestedMessage:(TestNestedMessageHasBits_NestedMessage*)value {
  if (_result.hasOptionalNestedMessage &&
      _result.optionalNestedMessage != [TestNestedMessageHasBits_NestedMessage defaultInstance]) {
    _result.optionalNestedMessage =
      [[[TestNestedMessageHasBits_NestedMessage builderWithPrototype:_result.optionalNestedMessage] mergeFrom:value] buildPartial];
  } else {
    _result.optionalNestedMessage = value;
  }
  _result.hasOptionalNestedMessage = YES;
  return self;
}
- (instancetype)clearOptionalNestedMessage {
  _result.hasOptionalNestedMessage = NO;
  _result.optionalNestedMessage = [TestNestedMessageHasBits_NestedMessage defaultInstance];
  return self;
}

@end


#pragma mark - TestNestedMessageHasBits_NestedMessage

@interface TestNestedMessageHasBits_NestedMessage ()

@property (strong) PBAppendableArray * nestedmessageRepeatedInt32Array;
@property (strong) NSMutableArray *nestedmessageRepeatedForeignmessageArray;

@end

@implementation TestNestedMessageHasBits_NestedMessage {
  PBAppendableArray *_nestedmessageRepeatedInt32Array;
  NSMutableArray *_nestedmessageRepeatedForeignmessageArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic nestedmessageRepeatedInt32;
@dynamic nestedmessageRepeatedForeignmessage;

- (PBArray *)nestedmessageRepeatedInt32 {
  return _nestedmessageRepeatedInt32Array;
}
- (int32_t)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index {
  return [_nestedmessageRepeatedInt32Array int32AtIndex:index];
}
- (NSArray *)nestedmessageRepeatedForeignmessage {
  return _nestedmessageRepeatedForeignmessageArray;
}
- (ForeignMessage*)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index {
  return _nestedmessageRepeatedForeignmessageArray[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  const NSUInteger nestedmessageRepeatedInt32ArrayCount = self.nestedmessageRepeatedInt32Array.count;
  if (nestedmessageRepeatedInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.nestedmessageRepeatedInt32Array.data;
    for (NSUInteger i = 0; i < nestedmessageRepeatedInt32ArrayCount; ++i) {
      [output writeInt32:1 value:values[i]];
    }
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessageArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.nestedmessageRepeatedInt32Array.count;
    const int32_t *values = (const int32_t *)self.nestedmessageRepeatedInt32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  for (ForeignMessage *element in self.nestedmessageRepeatedForeignmessageArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestNestedMessageHasBits_NestedMessage_Builder*)builder {
  return [[TestNestedMessageHasBits_NestedMessage_Builder alloc] init];
}
+ (TestNestedMessageHasBits_NestedMessage_Builder*)builderWithPrototype:(TestNestedMessageHasBits_NestedMessage*)prototype {
  return [[TestNestedMessageHasBits_NestedMessage builder] mergeFrom:prototype];
}
- (TestNestedMessageHasBits_NestedMessage_Builder*)builder {
  return [TestNestedMessageHasBits_NestedMessage builder];
}
- (TestNestedMessageHasBits_NestedMessage_Builder*)toBuilder {
  return [TestNestedMessageHasBits_NestedMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  listCount = self.nestedmessageRepeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"nestedmessageRepeatedInt32", @([self.nestedmessageRepeatedInt32Array int32AtIndex:i])];
  }
  for (ForeignMessage* element in self.nestedmessageRepeatedForeignmessageArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"nestedmessageRepeatedForeignmessage"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestNestedMessageHasBits_NestedMessage class]]) {
    return NO;
  }
  TestNestedMessageHasBits_NestedMessage *otherMessage = other;
  return
      ((self.nestedmessageRepeatedInt32Array == nil && otherMessage.nestedmessageRepeatedInt32Array == nil) ||
      [self.nestedmessageRepeatedInt32Array isEqualToArray:otherMessage.nestedmessageRepeatedInt32Array]) &&
      ((self.nestedmessageRepeatedForeignmessageArray == nil && otherMessage.nestedmessageRepeatedForeignmessageArray == nil) ||
      [self.nestedmessageRepeatedForeignmessageArray isEqualToArray:otherMessage.nestedmessageRepeatedForeignmessageArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  listCount = self.nestedmessageRepeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.nestedmessageRepeatedInt32Array int32AtIndex:i];
  }
  for (ForeignMessage* element in self.nestedmessageRepeatedForeignmessageArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestNestedMessageHasBits_NestedMessage_Builder {
  TestNestedMessageHasBits_NestedMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestNestedMessageHasBits_NestedMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestNestedMessageHasBits_NestedMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestNestedMessageHasBits_NestedMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestNestedMessageHasBits_NestedMessage*)defaultMessageInstance {
  return [TestNestedMessageHasBits_NestedMessage defaultInstance];
}

- (TestNestedMessageHasBits_NestedMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestNestedMessageHasBits_NestedMessage*)buildPartial {
  TestNestedMessageHasBits_NestedMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestNestedMessageHasBits_NestedMessage*)other {
  if (other == [TestNestedMessageHasBits_NestedMessage defaultInstance]) {
    return self;
  }
  if (other.nestedmessageRepeatedInt32Array.count > 0) {
    if (_result.nestedmessageRepeatedInt32Array == nil) {
      _result.nestedmessageRepeatedInt32Array = [other.nestedmessageRepeatedInt32Array copy];
    } else {
      [_result.nestedmessageRepeatedInt32Array appendArray:other.nestedmessageRepeatedInt32Array];
    }
  }
  if (other.nestedmessageRepeatedForeignmessageArray.count > 0) {
    if (_result.nestedmessageRepeatedForeignmessageArray == nil) {
      _result.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc] initWithArray:other.nestedmessageRepeatedForeignmessageArray];
    } else {
      [_result.nestedmessageRepeatedForeignmessageArray addObjectsFromArray:other.nestedmessageRepeatedForeignmessageArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addNestedmessageRepeatedInt32:[input readInt32]];
        break;
      }
      case 18: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNestedmessageRepeatedForeignmessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)nestedmessageRepeatedInt32 {
  return _result.nestedmessageRepeatedInt32Array;
}
- (int32_t)nestedmessageRepeatedInt32AtIndex:(NSUInteger)index {
  return [_result nestedmessageRepeatedInt32AtIndex:index];
}
- (instancetype)addNestedmessageRepeatedInt32:(int32_t)value {
  if (_result.nestedmessageRepeatedInt32Array == nil) {
    _result.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.nestedmessageRepeatedInt32Array addInt32:value];
  return self;
}
- (instancetype)setNestedmessageRepeatedInt32Array:(NSArray *)array {
  _result.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setNestedmessageRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.nestedmessageRepeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearNestedmessageRepeatedInt32 {
  _result.nestedmessageRepeatedInt32Array = nil;
  return self;
}
- (NSMutableArray *)nestedmessageRepeatedForeignmessage {
  return _result.nestedmessageRepeatedForeignmessageArray;
}
- (ForeignMessage*)nestedmessageRepeatedForeignmessageAtIndex:(NSUInteger)index {
  return [_result nestedmessageRepeatedForeignmessageAtIndex:index];
}
- (instancetype)addNestedmessageRepeatedForeignmessage:(ForeignMessage*)value {
  if (_result.nestedmessageRepeatedForeignmessageArray == nil) {
    _result.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc]init];
  }
  [_result.nestedmessageRepeatedForeignmessageArray addObject:value];
  return self;
}
- (instancetype)setNestedmessageRepeatedForeignmessageArray:(NSArray *)array {
  _result.nestedmessageRepeatedForeignmessageArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearNestedmessageRepeatedForeignmessage {
  _result.nestedmessageRepeatedForeignmessageArray = nil;
  return self;
}

@end


#pragma mark - TestCamelCaseFieldNames

@interface TestCamelCaseFieldNames ()

@property int32_t PrimitiveField;
@property (strong) NSString * StringField;
@property ForeignEnum EnumField;
@property (strong) ForeignMessage* MessageField;
@property (strong) NSString * StringPieceField;
@property (strong) NSString * CordField;
@property (strong) PBAppendableArray * RepeatedPrimitiveFieldArray;
@property (strong) NSMutableArray * RepeatedStringFieldArray;
@property (strong) NSMutableArray *RepeatedEnumFieldArray;
@property (strong) NSMutableArray *RepeatedMessageFieldArray;
@property (strong) NSMutableArray * RepeatedStringPieceFieldArray;
@property (strong) NSMutableArray * RepeatedCordFieldArray;

@end

@implementation TestCamelCaseFieldNames {
  BOOL _hasPrimitiveField:1;
  BOOL _hasStringField:1;
  BOOL _hasStringPieceField:1;
  BOOL _hasCordField:1;
  BOOL _hasMessageField:1;
  BOOL _hasEnumField:1;
  PBAppendableArray *_RepeatedPrimitiveFieldArray;
  NSMutableArray *_RepeatedStringFieldArray;
  NSMutableArray *_RepeatedStringPieceFieldArray;
  NSMutableArray *_RepeatedCordFieldArray;
  NSMutableArray *_RepeatedMessageFieldArray;
  NSMutableArray * _RepeatedEnumFieldArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _PrimitiveField = 0;
    _StringField = @"";
    _EnumField = ForeignEnumFOREIGNFOO;
    _MessageField = [ForeignMessage defaultInstance];
    _StringPieceField = @"";
    _CordField = @"";
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasPrimitiveField {
  return !!_hasPrimitiveField;
}
- (void)setHasPrimitiveField:(BOOL)value {
  _hasPrimitiveField = !!value;
}
- (BOOL)hasStringField {
  return !!_hasStringField;
}
- (void)setHasStringField:(BOOL)value {
  _hasStringField = !!value;
}
- (BOOL)hasEnumField {
  return !!_hasEnumField;
}
- (void)setHasEnumField:(BOOL)value {
  _hasEnumField = !!value;
}
- (BOOL)hasMessageField {
  return !!_hasMessageField;
}
- (void)setHasMessageField:(BOOL)value {
  _hasMessageField = !!value;
}

- (BOOL)hasStringPieceField {
  return !!_hasStringPieceField;
}
- (void)setHasStringPieceField:(BOOL)value {
  _hasStringPieceField = !!value;
}
- (BOOL)hasCordField {
  return !!_hasCordField;
}
- (void)setHasCordField:(BOOL)value {
  _hasCordField = !!value;
}
@dynamic RepeatedPrimitiveField;
@dynamic RepeatedStringField;
@dynamic RepeatedEnumField;
@dynamic RepeatedMessageField;
@dynamic RepeatedStringPieceField;
@dynamic RepeatedCordField;

- (PBArray *)RepeatedPrimitiveField {
  return _RepeatedPrimitiveFieldArray;
}
- (int32_t)RepeatedPrimitiveFieldAtIndex:(NSUInteger)index {
  return [_RepeatedPrimitiveFieldArray int32AtIndex:index];
}
- (NSArray *)RepeatedStringField {
  return _RepeatedStringFieldArray;
}
- (NSString *)RepeatedStringFieldAtIndex:(NSUInteger)index {
  return _RepeatedStringFieldArray[index];
}
- (NSArray *)RepeatedEnumField {
  return _RepeatedEnumFieldArray;
}
- (ForeignEnum)RepeatedEnumFieldAtIndex:(NSUInteger)index {
  NSNumber *value = _RepeatedEnumFieldArray[index];
  return value.intValue;}
- (NSArray *)RepeatedMessageField {
  return _RepeatedMessageFieldArray;
}
- (ForeignMessage*)RepeatedMessageFieldAtIndex:(NSUInteger)index {
  return _RepeatedMessageFieldArray[index];
}
- (NSArray *)RepeatedStringPieceField {
  return _RepeatedStringPieceFieldArray;
}
- (NSString *)RepeatedStringPieceFieldAtIndex:(NSUInteger)index {
  return _RepeatedStringPieceFieldArray[index];
}
- (NSArray *)RepeatedCordField {
  return _RepeatedCordFieldArray;
}
- (NSString *)RepeatedCordFieldAtIndex:(NSUInteger)index {
  return _RepeatedCordFieldArray[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasPrimitiveField) {
    [output writeInt32:1 value:self.PrimitiveField];
  }
  if (self.hasStringField) {
    [output writeString:2 value:self.StringField];
  }
  if (self.hasEnumField) {
    [output writeEnum:3 value:self.EnumField];
  }
  if (self.hasMessageField) {
    [output writeMessage:4 value:self.MessageField];
  }
  if (self.hasStringPieceField) {
    [output writeString:5 value:self.StringPieceField];
  }
  if (self.hasCordField) {
    [output writeString:6 value:self.CordField];
  }
  const NSUInteger RepeatedPrimitiveFieldArrayCount = self.RepeatedPrimitiveFieldArray.count;
  if (RepeatedPrimitiveFieldArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.RepeatedPrimitiveFieldArray.data;
    for (NSUInteger i = 0; i < RepeatedPrimitiveFieldArrayCount; ++i) {
      [output writeInt32:7 value:values[i]];
    }
  }
  for (NSString * value in self.RepeatedStringFieldArray) {
    [output writeString:8 value:value];
  }
  for (NSNumber *element in self.RepeatedEnumFieldArray) {
    [output writeEnum:9 value:element.intValue];
  }
  for (ForeignMessage *element in self.RepeatedMessageFieldArray) {
    [output writeMessage:10 value:element];
  }
  for (NSString * value in self.RepeatedStringPieceFieldArray) {
    [output writeString:11 value:value];
  }
  for (NSString * value in self.RepeatedCordFieldArray) {
    [output writeString:12 value:value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPrimitiveField) {
    size_ += computeInt32Size(1, self.PrimitiveField);
  }
  if (self.hasStringField) {
    size_ += computeStringSize(2, self.StringField);
  }
  if (self.hasEnumField) {
    size_ += computeEnumSize(3, self.EnumField);
  }
  if (self.hasMessageField) {
    size_ += computeMessageSize(4, self.MessageField);
  }
  if (self.hasStringPieceField) {
    size_ += computeStringSize(5, self.StringPieceField);
  }
  if (self.hasCordField) {
    size_ += computeStringSize(6, self.CordField);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.RepeatedPrimitiveFieldArray.count;
    const int32_t *values = (const int32_t *)self.RepeatedPrimitiveFieldArray.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.RepeatedStringFieldArray.count;
    for (NSString * element in self.RepeatedStringFieldArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  for (NSNumber *element in self.RepeatedEnumFieldArray) {
    size_ += computeEnumSize(9, element.intValue);
  }
  for (ForeignMessage *element in self.RepeatedMessageFieldArray) {
    size_ += computeMessageSize(10, element);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.RepeatedStringPieceFieldArray.count;
    for (NSString * element in self.RepeatedStringPieceFieldArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.RepeatedCordFieldArray.count;
    for (NSString * element in self.RepeatedCordFieldArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestCamelCaseFieldNames_Builder*)builder {
  return [[TestCamelCaseFieldNames_Builder alloc] init];
}
+ (TestCamelCaseFieldNames_Builder*)builderWithPrototype:(TestCamelCaseFieldNames*)prototype {
  return [[TestCamelCaseFieldNames builder] mergeFrom:prototype];
}
- (TestCamelCaseFieldNames_Builder*)builder {
  return [TestCamelCaseFieldNames builder];
}
- (TestCamelCaseFieldNames_Builder*)toBuilder {
  return [TestCamelCaseFieldNames builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasPrimitiveField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"PrimitiveField", @(self.PrimitiveField)];
  }
  if (self.hasStringField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"StringField", self.StringField];
  }
  if (self.hasEnumField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"EnumField", @(self.EnumField)];
  }
  if (self.hasMessageField) {
    [output appendFormat:@"%@%@ {\n", indent, @"MessageField"];
    [self.MessageField writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStringPieceField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"StringPieceField", self.StringPieceField];
  }
  if (self.hasCordField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"CordField", self.CordField];
  }
  listCount = self.RepeatedPrimitiveFieldArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"RepeatedPrimitiveField", @([self.RepeatedPrimitiveFieldArray int32AtIndex:i])];
  }
  for (NSString * element in self.RepeatedStringFieldArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"RepeatedStringField", element];
  }
  for (NSNumber* element in self.RepeatedEnumFieldArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"RepeatedEnumField", element];
  }
  for (ForeignMessage* element in self.RepeatedMessageFieldArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"RepeatedMessageField"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSString * element in self.RepeatedStringPieceFieldArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"RepeatedStringPieceField", element];
  }
  for (NSString * element in self.RepeatedCordFieldArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"RepeatedCordField", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestCamelCaseFieldNames class]]) {
    return NO;
  }
  TestCamelCaseFieldNames *otherMessage = other;
  return
      self.hasPrimitiveField == otherMessage.hasPrimitiveField &&
      (!self.hasPrimitiveField || self.PrimitiveField == otherMessage.PrimitiveField) &&
      self.hasStringField == otherMessage.hasStringField &&
      (!self.hasStringField || [self.StringField isEqual:otherMessage.StringField]) &&
      self.hasEnumField == otherMessage.hasEnumField &&
      (!self.hasEnumField || self.EnumField == otherMessage.EnumField) &&
      self.hasMessageField == otherMessage.hasMessageField &&
      (!self.hasMessageField || [self.MessageField isEqual:otherMessage.MessageField]) &&
      self.hasStringPieceField == otherMessage.hasStringPieceField &&
      (!self.hasStringPieceField || [self.StringPieceField isEqual:otherMessage.StringPieceField]) &&
      self.hasCordField == otherMessage.hasCordField &&
      (!self.hasCordField || [self.CordField isEqual:otherMessage.CordField]) &&
      ((self.RepeatedPrimitiveFieldArray == nil && otherMessage.RepeatedPrimitiveFieldArray == nil) ||
      [self.RepeatedPrimitiveFieldArray isEqualToArray:otherMessage.RepeatedPrimitiveFieldArray]) &&
      ((self.RepeatedStringFieldArray == nil && otherMessage.RepeatedStringFieldArray == nil) ||
      [self.RepeatedStringFieldArray isEqualToArray:otherMessage.RepeatedStringFieldArray]) &&
      ((self.RepeatedEnumFieldArray == nil && otherMessage.RepeatedEnumFieldArray == nil) ||
      [self.RepeatedEnumFieldArray isEqualToArray:otherMessage.RepeatedEnumFieldArray]) &&
      ((self.RepeatedMessageFieldArray == nil && otherMessage.RepeatedMessageFieldArray == nil) ||
      [self.RepeatedMessageFieldArray isEqualToArray:otherMessage.RepeatedMessageFieldArray]) &&
      ((self.RepeatedStringPieceFieldArray == nil && otherMessage.RepeatedStringPieceFieldArray == nil) ||
      [self.RepeatedStringPieceFieldArray isEqualToArray:otherMessage.RepeatedStringPieceFieldArray]) &&
      ((self.RepeatedCordFieldArray == nil && otherMessage.RepeatedCordFieldArray == nil) ||
      [self.RepeatedCordFieldArray isEqualToArray:otherMessage.RepeatedCordFieldArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasPrimitiveField) {
    hashCode = hashCode * 31 + [@(self.PrimitiveField) hash];
  }
  if (self.hasStringField) {
    hashCode = hashCode * 31 + [self.StringField hash];
  }
  if (self.hasEnumField) {
    hashCode = hashCode * 31 + self.EnumField;
  }
  if (self.hasMessageField) {
    hashCode = hashCode * 31 + [self.MessageField hash];
  }
  if (self.hasStringPieceField) {
    hashCode = hashCode * 31 + [self.StringPieceField hash];
  }
  if (self.hasCordField) {
    hashCode = hashCode * 31 + [self.CordField hash];
  }
  listCount = self.RepeatedPrimitiveFieldArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.RepeatedPrimitiveFieldArray int32AtIndex:i];
  }
  for (NSString * element in self.RepeatedStringFieldArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSNumber* element in self.RepeatedEnumFieldArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  for (ForeignMessage* element in self.RepeatedMessageFieldArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.RepeatedStringPieceFieldArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (NSString * element in self.RepeatedCordFieldArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestCamelCaseFieldNames_Builder {
  TestCamelCaseFieldNames* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestCamelCaseFieldNames alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestCamelCaseFieldNames alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestCamelCaseFieldNames_Builder alloc] init] mergeFrom:_result];
}

- (TestCamelCaseFieldNames*)defaultMessageInstance {
  return [TestCamelCaseFieldNames defaultInstance];
}

- (TestCamelCaseFieldNames*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestCamelCaseFieldNames*)buildPartial {
  TestCamelCaseFieldNames* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestCamelCaseFieldNames*)other {
  if (other == [TestCamelCaseFieldNames defaultInstance]) {
    return self;
  }
  if (other.hasPrimitiveField) {
    [self setPrimitiveField:other.PrimitiveField];
  }
  if (other.hasStringField) {
    [self setStringField:other.StringField];
  }
  if (other.hasEnumField) {
    [self setEnumField:other.EnumField];
  }
  if (other.hasMessageField) {
    [self mergeMessageField:other.MessageField];
  }
  if (other.hasStringPieceField) {
    [self setStringPieceField:other.StringPieceField];
  }
  if (other.hasCordField) {
    [self setCordField:other.CordField];
  }
  if (other.RepeatedPrimitiveFieldArray.count > 0) {
    if (_result.RepeatedPrimitiveFieldArray == nil) {
      _result.RepeatedPrimitiveFieldArray = [other.RepeatedPrimitiveFieldArray copy];
    } else {
      [_result.RepeatedPrimitiveFieldArray appendArray:other.RepeatedPrimitiveFieldArray];
    }
  }
  if (other.RepeatedStringFieldArray.count > 0) {
    if (_result.RepeatedStringFieldArray == nil) {
      _result.RepeatedStringFieldArray = [[NSMutableArray alloc] initWithArray:other.RepeatedStringFieldArray];
    } else {
      [_result.RepeatedStringFieldArray addObjectsFromArray:other.RepeatedStringFieldArray];
    }
  }
  if (other.RepeatedEnumFieldArray.count > 0) {
    if (_result.RepeatedEnumFieldArray == nil) {
      _result.RepeatedEnumFieldArray = [[NSMutableArray alloc] initWithArray:other.RepeatedEnumFieldArray];
    } else {
      [_result.RepeatedEnumFieldArray addObjectsFromArray:other.RepeatedEnumFieldArray];
    }
  }
  if (other.RepeatedMessageFieldArray.count > 0) {
    if (_result.RepeatedMessageFieldArray == nil) {
      _result.RepeatedMessageFieldArray = [[NSMutableArray alloc] initWithArray:other.RepeatedMessageFieldArray];
    } else {
      [_result.RepeatedMessageFieldArray addObjectsFromArray:other.RepeatedMessageFieldArray];
    }
  }
  if (other.RepeatedStringPieceFieldArray.count > 0) {
    if (_result.RepeatedStringPieceFieldArray == nil) {
      _result.RepeatedStringPieceFieldArray = [[NSMutableArray alloc] initWithArray:other.RepeatedStringPieceFieldArray];
    } else {
      [_result.RepeatedStringPieceFieldArray addObjectsFromArray:other.RepeatedStringPieceFieldArray];
    }
  }
  if (other.RepeatedCordFieldArray.count > 0) {
    if (_result.RepeatedCordFieldArray == nil) {
      _result.RepeatedCordFieldArray = [[NSMutableArray alloc] initWithArray:other.RepeatedCordFieldArray];
    } else {
      [_result.RepeatedCordFieldArray addObjectsFromArray:other.RepeatedCordFieldArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPrimitiveField:[input readInt32]];
        break;
      }
      case 18: {
        [self setStringField:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setEnumField:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        if (self.hasMessageField) {
          [subBuilder mergeFrom:self.MessageField];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageField:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setStringPieceField:[input readString]];
        break;
      }
      case 50: {
        [self setCordField:[input readString]];
        break;
      }
      case 56: {
        [self addRepeatedPrimitiveField:[input readInt32]];
        break;
      }
      case 66: {
        [self addRepeatedStringField:[input readString]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addRepeatedEnumField:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 82: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedMessageField:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        [self addRepeatedStringPieceField:[input readString]];
        break;
      }
      case 98: {
        [self addRepeatedCordField:[input readString]];
        break;
      }
    }
  }
}
- (BOOL)hasPrimitiveField {
  return _result.hasPrimitiveField;
}
- (int32_t) PrimitiveField {
  return _result.PrimitiveField;
}
- (instancetype)setPrimitiveField:(int32_t)value {
  _result.hasPrimitiveField = YES;
  _result.PrimitiveField = value;
  return self;
}
- (instancetype)clearPrimitiveField {
  _result.hasPrimitiveField = NO;
  _result.PrimitiveField = 0;
  return self;
}
- (BOOL)hasStringField {
  return _result.hasStringField;
}
- (NSString *) StringField {
  return _result.StringField;
}
- (instancetype)setStringField:(NSString *)value {
  _result.hasStringField = YES;
  _result.StringField = value;
  return self;
}
- (instancetype)clearStringField {
  _result.hasStringField = NO;
  _result.StringField = @"";
  return self;
}
- (BOOL)hasEnumField {
  return _result.hasEnumField;
}
- (ForeignEnum)EnumField {
  return _result.EnumField;
}
- (TestCamelCaseFieldNames_Builder*)setEnumField:(ForeignEnum)value {
  _result.hasEnumField = YES;
  _result.EnumField = value;
  return self;
}
- (TestCamelCaseFieldNames_Builder*)clearEnumField {
  _result.hasEnumField = NO;
  _result.EnumField = ForeignEnumFOREIGNFOO;
  return self;
}
- (BOOL)hasMessageField {
  return _result.hasMessageField;
}
- (ForeignMessage*)MessageField {
  return _result.MessageField;
}
- (instancetype)setMessageField:(ForeignMessage*)value {
  _result.hasMessageField = YES;
  _result.MessageField = value;
  return self;
}
- (instancetype)setMessageFieldBuilder:(ForeignMessage_Builder*)builderForValue {
  return [self setMessageField:[builderForValue build]];
}
- (instancetype)mergeMessageField:(ForeignMessage*)value {
  if (_result.hasMessageField &&
      _result.MessageField != [ForeignMessage defaultInstance]) {
    _result.MessageField =
      [[[ForeignMessage builderWithPrototype:_result.MessageField] mergeFrom:value] buildPartial];
  } else {
    _result.MessageField = value;
  }
  _result.hasMessageField = YES;
  return self;
}
- (instancetype)clearMessageField {
  _result.hasMessageField = NO;
  _result.MessageField = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL)hasStringPieceField {
  return _result.hasStringPieceField;
}
- (NSString *) StringPieceField {
  return _result.StringPieceField;
}
- (instancetype)setStringPieceField:(NSString *)value {
  _result.hasStringPieceField = YES;
  _result.StringPieceField = value;
  return self;
}
- (instancetype)clearStringPieceField {
  _result.hasStringPieceField = NO;
  _result.StringPieceField = @"";
  return self;
}
- (BOOL)hasCordField {
  return _result.hasCordField;
}
- (NSString *) CordField {
  return _result.CordField;
}
- (instancetype)setCordField:(NSString *)value {
  _result.hasCordField = YES;
  _result.CordField = value;
  return self;
}
- (instancetype)clearCordField {
  _result.hasCordField = NO;
  _result.CordField = @"";
  return self;
}
- (PBAppendableArray *)RepeatedPrimitiveField {
  return _result.RepeatedPrimitiveFieldArray;
}
- (int32_t)RepeatedPrimitiveFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedPrimitiveFieldAtIndex:index];
}
- (instancetype)addRepeatedPrimitiveField:(int32_t)value {
  if (_result.RepeatedPrimitiveFieldArray == nil) {
    _result.RepeatedPrimitiveFieldArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.RepeatedPrimitiveFieldArray addInt32:value];
  return self;
}
- (instancetype)setRepeatedPrimitiveFieldArray:(NSArray *)array {
  _result.RepeatedPrimitiveFieldArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setRepeatedPrimitiveFieldValues:(const int32_t *)values count:(NSUInteger)count {
  _result.RepeatedPrimitiveFieldArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearRepeatedPrimitiveField {
  _result.RepeatedPrimitiveFieldArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedStringField {
  return _result.RepeatedStringFieldArray;
}
- (NSString *)RepeatedStringFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedStringFieldAtIndex:index];
}
- (instancetype)addRepeatedStringField:(NSString *)value {
  if (_result.RepeatedStringFieldArray == nil) {
    _result.RepeatedStringFieldArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedStringFieldArray addObject:value];
  return self;
}
- (instancetype)setRepeatedStringFieldArray:(NSArray *)array {
  _result.RepeatedStringFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedStringField {
  _result.RepeatedStringFieldArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedEnumField {
  return _result.RepeatedEnumFieldArray;
}
- (ForeignEnum)RepeatedEnumFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedEnumFieldAtIndex:index];
}
- (TestCamelCaseFieldNames_Builder *)addRepeatedEnumField:(ForeignEnum)value {
  if (_result.RepeatedEnumFieldArray == nil) {
    _result.RepeatedEnumFieldArray = [NSMutableArray array];
  }
  [_result.RepeatedEnumFieldArray addObject:@(value)];
  return self;
}
- (TestCamelCaseFieldNames_Builder *)setRepeatedEnumFieldArray:(NSArray *)array {
  _result.RepeatedEnumFieldArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestCamelCaseFieldNames_Builder *)clearRepeatedEnumField {
  _result.RepeatedEnumFieldArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedMessageField {
  return _result.RepeatedMessageFieldArray;
}
- (ForeignMessage*)RepeatedMessageFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedMessageFieldAtIndex:index];
}
- (instancetype)addRepeatedMessageField:(ForeignMessage*)value {
  if (_result.RepeatedMessageFieldArray == nil) {
    _result.RepeatedMessageFieldArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedMessageFieldArray addObject:value];
  return self;
}
- (instancetype)setRepeatedMessageFieldArray:(NSArray *)array {
  _result.RepeatedMessageFieldArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedMessageField {
  _result.RepeatedMessageFieldArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedStringPieceField {
  return _result.RepeatedStringPieceFieldArray;
}
- (NSString *)RepeatedStringPieceFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedStringPieceFieldAtIndex:index];
}
- (instancetype)addRepeatedStringPieceField:(NSString *)value {
  if (_result.RepeatedStringPieceFieldArray == nil) {
    _result.RepeatedStringPieceFieldArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedStringPieceFieldArray addObject:value];
  return self;
}
- (instancetype)setRepeatedStringPieceFieldArray:(NSArray *)array {
  _result.RepeatedStringPieceFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedStringPieceField {
  _result.RepeatedStringPieceFieldArray = nil;
  return self;
}
- (NSMutableArray *)RepeatedCordField {
  return _result.RepeatedCordFieldArray;
}
- (NSString *)RepeatedCordFieldAtIndex:(NSUInteger)index {
  return [_result RepeatedCordFieldAtIndex:index];
}
- (instancetype)addRepeatedCordField:(NSString *)value {
  if (_result.RepeatedCordFieldArray == nil) {
    _result.RepeatedCordFieldArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedCordFieldArray addObject:value];
  return self;
}
- (instancetype)setRepeatedCordFieldArray:(NSArray *)array {
  _result.RepeatedCordFieldArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedCordField {
  _result.RepeatedCordFieldArray = nil;
  return self;
}

@end


#pragma mark - TestFieldOrderings

@interface TestFieldOrderings ()

@property (strong) NSString * myString;
@property int64_t myInt;
@property Float32 myFloat;

@end

@implementation TestFieldOrderings {
  BOOL _hasMyFloat:1;
  BOOL _hasMyInt:1;
  BOOL _hasMyString:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _myString = @"";
    _myInt = 0L;
    _myFloat = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasMyString {
  return !!_hasMyString;
}
- (void)setHasMyString:(BOOL)value {
  _hasMyString = !!value;
}
- (BOOL)hasMyInt {
  return !!_hasMyInt;
}
- (void)setHasMyInt:(BOOL)value {
  _hasMyInt = !!value;
}
- (BOOL)hasMyFloat {
  return !!_hasMyFloat;
}
- (void)setHasMyFloat:(BOOL)value {
  _hasMyFloat = !!value;
}


- (BOOL)isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasMyInt) {
    [output writeInt64:1 value:self.myInt];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:2
                                        to:11];
  if (self.hasMyString) {
    [output writeString:11 value:self.myString];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:12
                                        to:101];
  if (self.hasMyFloat) {
    [output writeFloat:101 value:self.myFloat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyInt) {
    size_ += computeInt64Size(1, self.myInt);
  }
  if (self.hasMyString) {
    size_ += computeStringSize(11, self.myString);
  }
  if (self.hasMyFloat) {
    size_ += computeFloatSize(101, self.myFloat);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestFieldOrderings_Builder*)builder {
  return [[TestFieldOrderings_Builder alloc] init];
}
+ (TestFieldOrderings_Builder*)builderWithPrototype:(TestFieldOrderings*)prototype {
  return [[TestFieldOrderings builder] mergeFrom:prototype];
}
- (TestFieldOrderings_Builder*)builder {
  return [TestFieldOrderings builder];
}
- (TestFieldOrderings_Builder*)toBuilder {
  return [TestFieldOrderings builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasMyInt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myInt", @(self.myInt)];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:2
                                              to:11
                                      withIndent:indent];
  if (self.hasMyString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myString", self.myString];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:12
                                              to:101
                                      withIndent:indent];
  if (self.hasMyFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myFloat", @(self.myFloat)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestFieldOrderings class]]) {
    return NO;
  }
  TestFieldOrderings *otherMessage = other;
  return
      self.hasMyInt == otherMessage.hasMyInt &&
      (!self.hasMyInt || self.myInt == otherMessage.myInt) &&
      [self isEqualExtensionsInOther:otherMessage from:2 to:11] &&

      self.hasMyString == otherMessage.hasMyString &&
      (!self.hasMyString || [self.myString isEqual:otherMessage.myString]) &&
      [self isEqualExtensionsInOther:otherMessage from:12 to:101] &&

      self.hasMyFloat == otherMessage.hasMyFloat &&
      (!self.hasMyFloat || self.myFloat == otherMessage.myFloat) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasMyInt) {
    hashCode = hashCode * 31 + [@(self.myInt) hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:2 to:11];
  if (self.hasMyString) {
    hashCode = hashCode * 31 + [self.myString hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:12 to:101];
  if (self.hasMyFloat) {
    hashCode = hashCode * 31 + [@(self.myFloat) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestFieldOrderings_Builder {
  TestFieldOrderings* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestFieldOrderings alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestFieldOrderings alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestFieldOrderings_Builder alloc] init] mergeFrom:_result];
}

- (TestFieldOrderings*)defaultMessageInstance {
  return [TestFieldOrderings defaultInstance];
}

- (TestFieldOrderings*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestFieldOrderings*)buildPartial {
  TestFieldOrderings* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestFieldOrderings*)other {
  if (other == [TestFieldOrderings defaultInstance]) {
    return self;
  }
  if (other.hasMyString) {
    [self setMyString:other.myString];
  }
  if (other.hasMyInt) {
    [self setMyInt:other.myInt];
  }
  if (other.hasMyFloat) {
    [self setMyFloat:other.myFloat];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyInt:[input readInt64]];
        break;
      }
      case 90: {
        [self setMyString:[input readString]];
        break;
      }
      case 813: {
        [self setMyFloat:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL)hasMyString {
  return _result.hasMyString;
}
- (NSString *) myString {
  return _result.myString;
}
- (instancetype)setMyString:(NSString *)value {
  _result.hasMyString = YES;
  _result.myString = value;
  return self;
}
- (instancetype)clearMyString {
  _result.hasMyString = NO;
  _result.myString = @"";
  return self;
}
- (BOOL)hasMyInt {
  return _result.hasMyInt;
}
- (int64_t) myInt {
  return _result.myInt;
}
- (instancetype)setMyInt:(int64_t)value {
  _result.hasMyInt = YES;
  _result.myInt = value;
  return self;
}
- (instancetype)clearMyInt {
  _result.hasMyInt = NO;
  _result.myInt = 0L;
  return self;
}
- (BOOL)hasMyFloat {
  return _result.hasMyFloat;
}
- (Float32) myFloat {
  return _result.myFloat;
}
- (instancetype)setMyFloat:(Float32)value {
  _result.hasMyFloat = YES;
  _result.myFloat = value;
  return self;
}
- (instancetype)clearMyFloat {
  _result.hasMyFloat = NO;
  _result.myFloat = 0;
  return self;
}

@end


#pragma mark - TestExtremeDefaultValues

@interface TestExtremeDefaultValues ()

@property (strong) NSData * escapedBytes;
@property uint32_t largeUint32;
@property uint64_t largeUint64;
@property int32_t smallInt32;
@property int64_t smallInt64;
@property int32_t reallySmallInt32;
@property int64_t reallySmallInt64;
@property (strong) NSString * utf8String;
@property Float32 zeroFloat;
@property Float32 oneFloat;
@property Float32 smallFloat;
@property Float32 negativeOneFloat;
@property Float32 negativeFloat;
@property Float32 largeFloat;
@property Float32 smallNegativeFloat;
@property Float64 infDouble;
@property Float64 negInfDouble;
@property Float64 nanDouble;
@property Float32 infFloat;
@property Float32 negInfFloat;
@property Float32 nanFloat;
@property (strong) NSString * cppTrigraph;
@property (strong) NSString * stringWithZero;
@property (strong) NSData * bytesWithZero;
@property (strong) NSString * stringPieceWithZero;
@property (strong) NSString * cordWithZero;

@end

@implementation TestExtremeDefaultValues {
  BOOL _hasInfDouble:1;
  BOOL _hasNegInfDouble:1;
  BOOL _hasNanDouble:1;
  BOOL _hasZeroFloat:1;
  BOOL _hasOneFloat:1;
  BOOL _hasSmallFloat:1;
  BOOL _hasNegativeOneFloat:1;
  BOOL _hasNegativeFloat:1;
  BOOL _hasLargeFloat:1;
  BOOL _hasSmallNegativeFloat:1;
  BOOL _hasInfFloat:1;
  BOOL _hasNegInfFloat:1;
  BOOL _hasNanFloat:1;
  BOOL _hasSmallInt64:1;
  BOOL _hasReallySmallInt64:1;
  BOOL _hasLargeUint64:1;
  BOOL _hasSmallInt32:1;
  BOOL _hasReallySmallInt32:1;
  BOOL _hasUtf8String:1;
  BOOL _hasCppTrigraph:1;
  BOOL _hasStringWithZero:1;
  BOOL _hasStringPieceWithZero:1;
  BOOL _hasCordWithZero:1;
  BOOL _hasEscapedBytes:1;
  BOOL _hasBytesWithZero:1;
  BOOL _hasLargeUint32:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
    _largeUint32 = -1;
    _largeUint64 = -1L;
    _smallInt32 = -2147483647;
    _smallInt64 = -9223372036854775807L;
    _reallySmallInt32 = -2147483648;
    _reallySmallInt64 = -9223372036854775808L;
    _utf8String = [NSString stringWithUTF8String:"\341\210\264"];
    _zeroFloat = 0;
    _oneFloat = 1;
    _smallFloat = 1.5;
    _negativeOneFloat = -1;
    _negativeFloat = -1.5;
    _largeFloat = 2e+08;
    _smallNegativeFloat = -8e-28;
    _infDouble = HUGE_VAL;
    _negInfDouble = -HUGE_VAL;
    _nanDouble = NAN;
    _infFloat = HUGE_VALF;
    _negInfFloat = -HUGE_VALF;
    _nanFloat = NAN;
    _cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
    _stringWithZero = @"hel\000lo";
    _bytesWithZero = [NSData dataWithBytes:"wor\000ld" length:6];
    _stringPieceWithZero = @"ab\000c";
    _cordWithZero = @"12\0003";
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasEscapedBytes {
  return !!_hasEscapedBytes;
}
- (void)setHasEscapedBytes:(BOOL)value {
  _hasEscapedBytes = !!value;
}
- (BOOL)hasLargeUint32 {
  return !!_hasLargeUint32;
}
- (void)setHasLargeUint32:(BOOL)value {
  _hasLargeUint32 = !!value;
}
- (BOOL)hasLargeUint64 {
  return !!_hasLargeUint64;
}
- (void)setHasLargeUint64:(BOOL)value {
  _hasLargeUint64 = !!value;
}
- (BOOL)hasSmallInt32 {
  return !!_hasSmallInt32;
}
- (void)setHasSmallInt32:(BOOL)value {
  _hasSmallInt32 = !!value;
}
- (BOOL)hasSmallInt64 {
  return !!_hasSmallInt64;
}
- (void)setHasSmallInt64:(BOOL)value {
  _hasSmallInt64 = !!value;
}
- (BOOL)hasReallySmallInt32 {
  return !!_hasReallySmallInt32;
}
- (void)setHasReallySmallInt32:(BOOL)value {
  _hasReallySmallInt32 = !!value;
}
- (BOOL)hasReallySmallInt64 {
  return !!_hasReallySmallInt64;
}
- (void)setHasReallySmallInt64:(BOOL)value {
  _hasReallySmallInt64 = !!value;
}
- (BOOL)hasUtf8String {
  return !!_hasUtf8String;
}
- (void)setHasUtf8String:(BOOL)value {
  _hasUtf8String = !!value;
}
- (BOOL)hasZeroFloat {
  return !!_hasZeroFloat;
}
- (void)setHasZeroFloat:(BOOL)value {
  _hasZeroFloat = !!value;
}
- (BOOL)hasOneFloat {
  return !!_hasOneFloat;
}
- (void)setHasOneFloat:(BOOL)value {
  _hasOneFloat = !!value;
}
- (BOOL)hasSmallFloat {
  return !!_hasSmallFloat;
}
- (void)setHasSmallFloat:(BOOL)value {
  _hasSmallFloat = !!value;
}
- (BOOL)hasNegativeOneFloat {
  return !!_hasNegativeOneFloat;
}
- (void)setHasNegativeOneFloat:(BOOL)value {
  _hasNegativeOneFloat = !!value;
}
- (BOOL)hasNegativeFloat {
  return !!_hasNegativeFloat;
}
- (void)setHasNegativeFloat:(BOOL)value {
  _hasNegativeFloat = !!value;
}
- (BOOL)hasLargeFloat {
  return !!_hasLargeFloat;
}
- (void)setHasLargeFloat:(BOOL)value {
  _hasLargeFloat = !!value;
}
- (BOOL)hasSmallNegativeFloat {
  return !!_hasSmallNegativeFloat;
}
- (void)setHasSmallNegativeFloat:(BOOL)value {
  _hasSmallNegativeFloat = !!value;
}
- (BOOL)hasInfDouble {
  return !!_hasInfDouble;
}
- (void)setHasInfDouble:(BOOL)value {
  _hasInfDouble = !!value;
}
- (BOOL)hasNegInfDouble {
  return !!_hasNegInfDouble;
}
- (void)setHasNegInfDouble:(BOOL)value {
  _hasNegInfDouble = !!value;
}
- (BOOL)hasNanDouble {
  return !!_hasNanDouble;
}
- (void)setHasNanDouble:(BOOL)value {
  _hasNanDouble = !!value;
}
- (BOOL)hasInfFloat {
  return !!_hasInfFloat;
}
- (void)setHasInfFloat:(BOOL)value {
  _hasInfFloat = !!value;
}
- (BOOL)hasNegInfFloat {
  return !!_hasNegInfFloat;
}
- (void)setHasNegInfFloat:(BOOL)value {
  _hasNegInfFloat = !!value;
}
- (BOOL)hasNanFloat {
  return !!_hasNanFloat;
}
- (void)setHasNanFloat:(BOOL)value {
  _hasNanFloat = !!value;
}
- (BOOL)hasCppTrigraph {
  return !!_hasCppTrigraph;
}
- (void)setHasCppTrigraph:(BOOL)value {
  _hasCppTrigraph = !!value;
}
- (BOOL)hasStringWithZero {
  return !!_hasStringWithZero;
}
- (void)setHasStringWithZero:(BOOL)value {
  _hasStringWithZero = !!value;
}
- (BOOL)hasBytesWithZero {
  return !!_hasBytesWithZero;
}
- (void)setHasBytesWithZero:(BOOL)value {
  _hasBytesWithZero = !!value;
}
- (BOOL)hasStringPieceWithZero {
  return !!_hasStringPieceWithZero;
}
- (void)setHasStringPieceWithZero:(BOOL)value {
  _hasStringPieceWithZero = !!value;
}
- (BOOL)hasCordWithZero {
  return !!_hasCordWithZero;
}
- (void)setHasCordWithZero:(BOOL)value {
  _hasCordWithZero = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasEscapedBytes) {
    [output writeData:1 value:self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output writeUInt32:2 value:self.largeUint32];
  }
  if (self.hasLargeUint64) {
    [output writeUInt64:3 value:self.largeUint64];
  }
  if (self.hasSmallInt32) {
    [output writeInt32:4 value:self.smallInt32];
  }
  if (self.hasSmallInt64) {
    [output writeInt64:5 value:self.smallInt64];
  }
  if (self.hasUtf8String) {
    [output writeString:6 value:self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output writeFloat:7 value:self.zeroFloat];
  }
  if (self.hasOneFloat) {
    [output writeFloat:8 value:self.oneFloat];
  }
  if (self.hasSmallFloat) {
    [output writeFloat:9 value:self.smallFloat];
  }
  if (self.hasNegativeOneFloat) {
    [output writeFloat:10 value:self.negativeOneFloat];
  }
  if (self.hasNegativeFloat) {
    [output writeFloat:11 value:self.negativeFloat];
  }
  if (self.hasLargeFloat) {
    [output writeFloat:12 value:self.largeFloat];
  }
  if (self.hasSmallNegativeFloat) {
    [output writeFloat:13 value:self.smallNegativeFloat];
  }
  if (self.hasInfDouble) {
    [output writeDouble:14 value:self.infDouble];
  }
  if (self.hasNegInfDouble) {
    [output writeDouble:15 value:self.negInfDouble];
  }
  if (self.hasNanDouble) {
    [output writeDouble:16 value:self.nanDouble];
  }
  if (self.hasInfFloat) {
    [output writeFloat:17 value:self.infFloat];
  }
  if (self.hasNegInfFloat) {
    [output writeFloat:18 value:self.negInfFloat];
  }
  if (self.hasNanFloat) {
    [output writeFloat:19 value:self.nanFloat];
  }
  if (self.hasCppTrigraph) {
    [output writeString:20 value:self.cppTrigraph];
  }
  if (self.hasReallySmallInt32) {
    [output writeInt32:21 value:self.reallySmallInt32];
  }
  if (self.hasReallySmallInt64) {
    [output writeInt64:22 value:self.reallySmallInt64];
  }
  if (self.hasStringWithZero) {
    [output writeString:23 value:self.stringWithZero];
  }
  if (self.hasBytesWithZero) {
    [output writeData:24 value:self.bytesWithZero];
  }
  if (self.hasStringPieceWithZero) {
    [output writeString:25 value:self.stringPieceWithZero];
  }
  if (self.hasCordWithZero) {
    [output writeString:26 value:self.cordWithZero];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEscapedBytes) {
    size_ += computeDataSize(1, self.escapedBytes);
  }
  if (self.hasLargeUint32) {
    size_ += computeUInt32Size(2, self.largeUint32);
  }
  if (self.hasLargeUint64) {
    size_ += computeUInt64Size(3, self.largeUint64);
  }
  if (self.hasSmallInt32) {
    size_ += computeInt32Size(4, self.smallInt32);
  }
  if (self.hasSmallInt64) {
    size_ += computeInt64Size(5, self.smallInt64);
  }
  if (self.hasUtf8String) {
    size_ += computeStringSize(6, self.utf8String);
  }
  if (self.hasZeroFloat) {
    size_ += computeFloatSize(7, self.zeroFloat);
  }
  if (self.hasOneFloat) {
    size_ += computeFloatSize(8, self.oneFloat);
  }
  if (self.hasSmallFloat) {
    size_ += computeFloatSize(9, self.smallFloat);
  }
  if (self.hasNegativeOneFloat) {
    size_ += computeFloatSize(10, self.negativeOneFloat);
  }
  if (self.hasNegativeFloat) {
    size_ += computeFloatSize(11, self.negativeFloat);
  }
  if (self.hasLargeFloat) {
    size_ += computeFloatSize(12, self.largeFloat);
  }
  if (self.hasSmallNegativeFloat) {
    size_ += computeFloatSize(13, self.smallNegativeFloat);
  }
  if (self.hasInfDouble) {
    size_ += computeDoubleSize(14, self.infDouble);
  }
  if (self.hasNegInfDouble) {
    size_ += computeDoubleSize(15, self.negInfDouble);
  }
  if (self.hasNanDouble) {
    size_ += computeDoubleSize(16, self.nanDouble);
  }
  if (self.hasInfFloat) {
    size_ += computeFloatSize(17, self.infFloat);
  }
  if (self.hasNegInfFloat) {
    size_ += computeFloatSize(18, self.negInfFloat);
  }
  if (self.hasNanFloat) {
    size_ += computeFloatSize(19, self.nanFloat);
  }
  if (self.hasCppTrigraph) {
    size_ += computeStringSize(20, self.cppTrigraph);
  }
  if (self.hasReallySmallInt32) {
    size_ += computeInt32Size(21, self.reallySmallInt32);
  }
  if (self.hasReallySmallInt64) {
    size_ += computeInt64Size(22, self.reallySmallInt64);
  }
  if (self.hasStringWithZero) {
    size_ += computeStringSize(23, self.stringWithZero);
  }
  if (self.hasBytesWithZero) {
    size_ += computeDataSize(24, self.bytesWithZero);
  }
  if (self.hasStringPieceWithZero) {
    size_ += computeStringSize(25, self.stringPieceWithZero);
  }
  if (self.hasCordWithZero) {
    size_ += computeStringSize(26, self.cordWithZero);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestExtremeDefaultValues_Builder*)builder {
  return [[TestExtremeDefaultValues_Builder alloc] init];
}
+ (TestExtremeDefaultValues_Builder*)builderWithPrototype:(TestExtremeDefaultValues*)prototype {
  return [[TestExtremeDefaultValues builder] mergeFrom:prototype];
}
- (TestExtremeDefaultValues_Builder*)builder {
  return [TestExtremeDefaultValues builder];
}
- (TestExtremeDefaultValues_Builder*)toBuilder {
  return [TestExtremeDefaultValues builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasEscapedBytes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"escapedBytes", self.escapedBytes];
  }
  if (self.hasLargeUint32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint32", @(self.largeUint32)];
  }
  if (self.hasLargeUint64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeUint64", @(self.largeUint64)];
  }
  if (self.hasSmallInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt32", @(self.smallInt32)];
  }
  if (self.hasSmallInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallInt64", @(self.smallInt64)];
  }
  if (self.hasUtf8String) {
    [output appendFormat:@"%@%@: %@\n", indent, @"utf8String", self.utf8String];
  }
  if (self.hasZeroFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zeroFloat", @(self.zeroFloat)];
  }
  if (self.hasOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneFloat", @(self.oneFloat)];
  }
  if (self.hasSmallFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallFloat", @(self.smallFloat)];
  }
  if (self.hasNegativeOneFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeOneFloat", @(self.negativeOneFloat)];
  }
  if (self.hasNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negativeFloat", @(self.negativeFloat)];
  }
  if (self.hasLargeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeFloat", @(self.largeFloat)];
  }
  if (self.hasSmallNegativeFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallNegativeFloat", @(self.smallNegativeFloat)];
  }
  if (self.hasInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infDouble", @(self.infDouble)];
  }
  if (self.hasNegInfDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfDouble", @(self.negInfDouble)];
  }
  if (self.hasNanDouble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanDouble", @(self.nanDouble)];
  }
  if (self.hasInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"infFloat", @(self.infFloat)];
  }
  if (self.hasNegInfFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"negInfFloat", @(self.negInfFloat)];
  }
  if (self.hasNanFloat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanFloat", @(self.nanFloat)];
  }
  if (self.hasCppTrigraph) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cppTrigraph", self.cppTrigraph];
  }
  if (self.hasReallySmallInt32) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reallySmallInt32", @(self.reallySmallInt32)];
  }
  if (self.hasReallySmallInt64) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reallySmallInt64", @(self.reallySmallInt64)];
  }
  if (self.hasStringWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringWithZero", self.stringWithZero];
  }
  if (self.hasBytesWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesWithZero", self.bytesWithZero];
  }
  if (self.hasStringPieceWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringPieceWithZero", self.stringPieceWithZero];
  }
  if (self.hasCordWithZero) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cordWithZero", self.cordWithZero];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestExtremeDefaultValues class]]) {
    return NO;
  }
  TestExtremeDefaultValues *otherMessage = other;
  return
      self.hasEscapedBytes == otherMessage.hasEscapedBytes &&
      (!self.hasEscapedBytes || [self.escapedBytes isEqual:otherMessage.escapedBytes]) &&
      self.hasLargeUint32 == otherMessage.hasLargeUint32 &&
      (!self.hasLargeUint32 || self.largeUint32 == otherMessage.largeUint32) &&
      self.hasLargeUint64 == otherMessage.hasLargeUint64 &&
      (!self.hasLargeUint64 || self.largeUint64 == otherMessage.largeUint64) &&
      self.hasSmallInt32 == otherMessage.hasSmallInt32 &&
      (!self.hasSmallInt32 || self.smallInt32 == otherMessage.smallInt32) &&
      self.hasSmallInt64 == otherMessage.hasSmallInt64 &&
      (!self.hasSmallInt64 || self.smallInt64 == otherMessage.smallInt64) &&
      self.hasUtf8String == otherMessage.hasUtf8String &&
      (!self.hasUtf8String || [self.utf8String isEqual:otherMessage.utf8String]) &&
      self.hasZeroFloat == otherMessage.hasZeroFloat &&
      (!self.hasZeroFloat || self.zeroFloat == otherMessage.zeroFloat) &&
      self.hasOneFloat == otherMessage.hasOneFloat &&
      (!self.hasOneFloat || self.oneFloat == otherMessage.oneFloat) &&
      self.hasSmallFloat == otherMessage.hasSmallFloat &&
      (!self.hasSmallFloat || self.smallFloat == otherMessage.smallFloat) &&
      self.hasNegativeOneFloat == otherMessage.hasNegativeOneFloat &&
      (!self.hasNegativeOneFloat || self.negativeOneFloat == otherMessage.negativeOneFloat) &&
      self.hasNegativeFloat == otherMessage.hasNegativeFloat &&
      (!self.hasNegativeFloat || self.negativeFloat == otherMessage.negativeFloat) &&
      self.hasLargeFloat == otherMessage.hasLargeFloat &&
      (!self.hasLargeFloat || self.largeFloat == otherMessage.largeFloat) &&
      self.hasSmallNegativeFloat == otherMessage.hasSmallNegativeFloat &&
      (!self.hasSmallNegativeFloat || self.smallNegativeFloat == otherMessage.smallNegativeFloat) &&
      self.hasInfDouble == otherMessage.hasInfDouble &&
      (!self.hasInfDouble || self.infDouble == otherMessage.infDouble) &&
      self.hasNegInfDouble == otherMessage.hasNegInfDouble &&
      (!self.hasNegInfDouble || self.negInfDouble == otherMessage.negInfDouble) &&
      self.hasNanDouble == otherMessage.hasNanDouble &&
      (!self.hasNanDouble || self.nanDouble == otherMessage.nanDouble) &&
      self.hasInfFloat == otherMessage.hasInfFloat &&
      (!self.hasInfFloat || self.infFloat == otherMessage.infFloat) &&
      self.hasNegInfFloat == otherMessage.hasNegInfFloat &&
      (!self.hasNegInfFloat || self.negInfFloat == otherMessage.negInfFloat) &&
      self.hasNanFloat == otherMessage.hasNanFloat &&
      (!self.hasNanFloat || self.nanFloat == otherMessage.nanFloat) &&
      self.hasCppTrigraph == otherMessage.hasCppTrigraph &&
      (!self.hasCppTrigraph || [self.cppTrigraph isEqual:otherMessage.cppTrigraph]) &&
      self.hasReallySmallInt32 == otherMessage.hasReallySmallInt32 &&
      (!self.hasReallySmallInt32 || self.reallySmallInt32 == otherMessage.reallySmallInt32) &&
      self.hasReallySmallInt64 == otherMessage.hasReallySmallInt64 &&
      (!self.hasReallySmallInt64 || self.reallySmallInt64 == otherMessage.reallySmallInt64) &&
      self.hasStringWithZero == otherMessage.hasStringWithZero &&
      (!self.hasStringWithZero || [self.stringWithZero isEqual:otherMessage.stringWithZero]) &&
      self.hasBytesWithZero == otherMessage.hasBytesWithZero &&
      (!self.hasBytesWithZero || [self.bytesWithZero isEqual:otherMessage.bytesWithZero]) &&
      self.hasStringPieceWithZero == otherMessage.hasStringPieceWithZero &&
      (!self.hasStringPieceWithZero || [self.stringPieceWithZero isEqual:otherMessage.stringPieceWithZero]) &&
      self.hasCordWithZero == otherMessage.hasCordWithZero &&
      (!self.hasCordWithZero || [self.cordWithZero isEqual:otherMessage.cordWithZero]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasEscapedBytes) {
    hashCode = hashCode * 31 + [self.escapedBytes hash];
  }
  if (self.hasLargeUint32) {
    hashCode = hashCode * 31 + [@(self.largeUint32) hash];
  }
  if (self.hasLargeUint64) {
    hashCode = hashCode * 31 + [@(self.largeUint64) hash];
  }
  if (self.hasSmallInt32) {
    hashCode = hashCode * 31 + [@(self.smallInt32) hash];
  }
  if (self.hasSmallInt64) {
    hashCode = hashCode * 31 + [@(self.smallInt64) hash];
  }
  if (self.hasUtf8String) {
    hashCode = hashCode * 31 + [self.utf8String hash];
  }
  if (self.hasZeroFloat) {
    hashCode = hashCode * 31 + [@(self.zeroFloat) hash];
  }
  if (self.hasOneFloat) {
    hashCode = hashCode * 31 + [@(self.oneFloat) hash];
  }
  if (self.hasSmallFloat) {
    hashCode = hashCode * 31 + [@(self.smallFloat) hash];
  }
  if (self.hasNegativeOneFloat) {
    hashCode = hashCode * 31 + [@(self.negativeOneFloat) hash];
  }
  if (self.hasNegativeFloat) {
    hashCode = hashCode * 31 + [@(self.negativeFloat) hash];
  }
  if (self.hasLargeFloat) {
    hashCode = hashCode * 31 + [@(self.largeFloat) hash];
  }
  if (self.hasSmallNegativeFloat) {
    hashCode = hashCode * 31 + [@(self.smallNegativeFloat) hash];
  }
  if (self.hasInfDouble) {
    hashCode = hashCode * 31 + [@(self.infDouble) hash];
  }
  if (self.hasNegInfDouble) {
    hashCode = hashCode * 31 + [@(self.negInfDouble) hash];
  }
  if (self.hasNanDouble) {
    hashCode = hashCode * 31 + [@(self.nanDouble) hash];
  }
  if (self.hasInfFloat) {
    hashCode = hashCode * 31 + [@(self.infFloat) hash];
  }
  if (self.hasNegInfFloat) {
    hashCode = hashCode * 31 + [@(self.negInfFloat) hash];
  }
  if (self.hasNanFloat) {
    hashCode = hashCode * 31 + [@(self.nanFloat) hash];
  }
  if (self.hasCppTrigraph) {
    hashCode = hashCode * 31 + [self.cppTrigraph hash];
  }
  if (self.hasReallySmallInt32) {
    hashCode = hashCode * 31 + [@(self.reallySmallInt32) hash];
  }
  if (self.hasReallySmallInt64) {
    hashCode = hashCode * 31 + [@(self.reallySmallInt64) hash];
  }
  if (self.hasStringWithZero) {
    hashCode = hashCode * 31 + [self.stringWithZero hash];
  }
  if (self.hasBytesWithZero) {
    hashCode = hashCode * 31 + [self.bytesWithZero hash];
  }
  if (self.hasStringPieceWithZero) {
    hashCode = hashCode * 31 + [self.stringPieceWithZero hash];
  }
  if (self.hasCordWithZero) {
    hashCode = hashCode * 31 + [self.cordWithZero hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestExtremeDefaultValues_Builder {
  TestExtremeDefaultValues* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestExtremeDefaultValues alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestExtremeDefaultValues alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestExtremeDefaultValues_Builder alloc] init] mergeFrom:_result];
}

- (TestExtremeDefaultValues*)defaultMessageInstance {
  return [TestExtremeDefaultValues defaultInstance];
}

- (TestExtremeDefaultValues*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestExtremeDefaultValues*)buildPartial {
  TestExtremeDefaultValues* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestExtremeDefaultValues*)other {
  if (other == [TestExtremeDefaultValues defaultInstance]) {
    return self;
  }
  if (other.hasEscapedBytes) {
    [self setEscapedBytes:other.escapedBytes];
  }
  if (other.hasLargeUint32) {
    [self setLargeUint32:other.largeUint32];
  }
  if (other.hasLargeUint64) {
    [self setLargeUint64:other.largeUint64];
  }
  if (other.hasSmallInt32) {
    [self setSmallInt32:other.smallInt32];
  }
  if (other.hasSmallInt64) {
    [self setSmallInt64:other.smallInt64];
  }
  if (other.hasReallySmallInt32) {
    [self setReallySmallInt32:other.reallySmallInt32];
  }
  if (other.hasReallySmallInt64) {
    [self setReallySmallInt64:other.reallySmallInt64];
  }
  if (other.hasUtf8String) {
    [self setUtf8String:other.utf8String];
  }
  if (other.hasZeroFloat) {
    [self setZeroFloat:other.zeroFloat];
  }
  if (other.hasOneFloat) {
    [self setOneFloat:other.oneFloat];
  }
  if (other.hasSmallFloat) {
    [self setSmallFloat:other.smallFloat];
  }
  if (other.hasNegativeOneFloat) {
    [self setNegativeOneFloat:other.negativeOneFloat];
  }
  if (other.hasNegativeFloat) {
    [self setNegativeFloat:other.negativeFloat];
  }
  if (other.hasLargeFloat) {
    [self setLargeFloat:other.largeFloat];
  }
  if (other.hasSmallNegativeFloat) {
    [self setSmallNegativeFloat:other.smallNegativeFloat];
  }
  if (other.hasInfDouble) {
    [self setInfDouble:other.infDouble];
  }
  if (other.hasNegInfDouble) {
    [self setNegInfDouble:other.negInfDouble];
  }
  if (other.hasNanDouble) {
    [self setNanDouble:other.nanDouble];
  }
  if (other.hasInfFloat) {
    [self setInfFloat:other.infFloat];
  }
  if (other.hasNegInfFloat) {
    [self setNegInfFloat:other.negInfFloat];
  }
  if (other.hasNanFloat) {
    [self setNanFloat:other.nanFloat];
  }
  if (other.hasCppTrigraph) {
    [self setCppTrigraph:other.cppTrigraph];
  }
  if (other.hasStringWithZero) {
    [self setStringWithZero:other.stringWithZero];
  }
  if (other.hasBytesWithZero) {
    [self setBytesWithZero:other.bytesWithZero];
  }
  if (other.hasStringPieceWithZero) {
    [self setStringPieceWithZero:other.stringPieceWithZero];
  }
  if (other.hasCordWithZero) {
    [self setCordWithZero:other.cordWithZero];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEscapedBytes:[input readData]];
        break;
      }
      case 16: {
        [self setLargeUint32:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLargeUint64:[input readUInt64]];
        break;
      }
      case 32: {
        [self setSmallInt32:[input readInt32]];
        break;
      }
      case 40: {
        [self setSmallInt64:[input readInt64]];
        break;
      }
      case 50: {
        [self setUtf8String:[input readString]];
        break;
      }
      case 61: {
        [self setZeroFloat:[input readFloat]];
        break;
      }
      case 69: {
        [self setOneFloat:[input readFloat]];
        break;
      }
      case 77: {
        [self setSmallFloat:[input readFloat]];
        break;
      }
      case 85: {
        [self setNegativeOneFloat:[input readFloat]];
        break;
      }
      case 93: {
        [self setNegativeFloat:[input readFloat]];
        break;
      }
      case 101: {
        [self setLargeFloat:[input readFloat]];
        break;
      }
      case 109: {
        [self setSmallNegativeFloat:[input readFloat]];
        break;
      }
      case 113: {
        [self setInfDouble:[input readDouble]];
        break;
      }
      case 121: {
        [self setNegInfDouble:[input readDouble]];
        break;
      }
      case 129: {
        [self setNanDouble:[input readDouble]];
        break;
      }
      case 141: {
        [self setInfFloat:[input readFloat]];
        break;
      }
      case 149: {
        [self setNegInfFloat:[input readFloat]];
        break;
      }
      case 157: {
        [self setNanFloat:[input readFloat]];
        break;
      }
      case 162: {
        [self setCppTrigraph:[input readString]];
        break;
      }
      case 168: {
        [self setReallySmallInt32:[input readInt32]];
        break;
      }
      case 176: {
        [self setReallySmallInt64:[input readInt64]];
        break;
      }
      case 186: {
        [self setStringWithZero:[input readString]];
        break;
      }
      case 194: {
        [self setBytesWithZero:[input readData]];
        break;
      }
      case 202: {
        [self setStringPieceWithZero:[input readString]];
        break;
      }
      case 210: {
        [self setCordWithZero:[input readString]];
        break;
      }
    }
  }
}
- (BOOL)hasEscapedBytes {
  return _result.hasEscapedBytes;
}
- (NSData *) escapedBytes {
  return _result.escapedBytes;
}
- (instancetype)setEscapedBytes:(NSData *)value {
  _result.hasEscapedBytes = YES;
  _result.escapedBytes = value;
  return self;
}
- (instancetype)clearEscapedBytes {
  _result.hasEscapedBytes = NO;
  _result.escapedBytes = [NSData dataWithBytes:"\000\001\007\010\014\n\r\t\013\\\'\"\376" length:13];
  return self;
}
- (BOOL)hasLargeUint32 {
  return _result.hasLargeUint32;
}
- (uint32_t) largeUint32 {
  return _result.largeUint32;
}
- (instancetype)setLargeUint32:(uint32_t)value {
  _result.hasLargeUint32 = YES;
  _result.largeUint32 = value;
  return self;
}
- (instancetype)clearLargeUint32 {
  _result.hasLargeUint32 = NO;
  _result.largeUint32 = -1;
  return self;
}
- (BOOL)hasLargeUint64 {
  return _result.hasLargeUint64;
}
- (uint64_t) largeUint64 {
  return _result.largeUint64;
}
- (instancetype)setLargeUint64:(uint64_t)value {
  _result.hasLargeUint64 = YES;
  _result.largeUint64 = value;
  return self;
}
- (instancetype)clearLargeUint64 {
  _result.hasLargeUint64 = NO;
  _result.largeUint64 = -1L;
  return self;
}
- (BOOL)hasSmallInt32 {
  return _result.hasSmallInt32;
}
- (int32_t) smallInt32 {
  return _result.smallInt32;
}
- (instancetype)setSmallInt32:(int32_t)value {
  _result.hasSmallInt32 = YES;
  _result.smallInt32 = value;
  return self;
}
- (instancetype)clearSmallInt32 {
  _result.hasSmallInt32 = NO;
  _result.smallInt32 = -2147483647;
  return self;
}
- (BOOL)hasSmallInt64 {
  return _result.hasSmallInt64;
}
- (int64_t) smallInt64 {
  return _result.smallInt64;
}
- (instancetype)setSmallInt64:(int64_t)value {
  _result.hasSmallInt64 = YES;
  _result.smallInt64 = value;
  return self;
}
- (instancetype)clearSmallInt64 {
  _result.hasSmallInt64 = NO;
  _result.smallInt64 = -9223372036854775807L;
  return self;
}
- (BOOL)hasReallySmallInt32 {
  return _result.hasReallySmallInt32;
}
- (int32_t) reallySmallInt32 {
  return _result.reallySmallInt32;
}
- (instancetype)setReallySmallInt32:(int32_t)value {
  _result.hasReallySmallInt32 = YES;
  _result.reallySmallInt32 = value;
  return self;
}
- (instancetype)clearReallySmallInt32 {
  _result.hasReallySmallInt32 = NO;
  _result.reallySmallInt32 = -2147483648;
  return self;
}
- (BOOL)hasReallySmallInt64 {
  return _result.hasReallySmallInt64;
}
- (int64_t) reallySmallInt64 {
  return _result.reallySmallInt64;
}
- (instancetype)setReallySmallInt64:(int64_t)value {
  _result.hasReallySmallInt64 = YES;
  _result.reallySmallInt64 = value;
  return self;
}
- (instancetype)clearReallySmallInt64 {
  _result.hasReallySmallInt64 = NO;
  _result.reallySmallInt64 = -9223372036854775808L;
  return self;
}
- (BOOL)hasUtf8String {
  return _result.hasUtf8String;
}
- (NSString *) utf8String {
  return _result.utf8String;
}
- (instancetype)setUtf8String:(NSString *)value {
  _result.hasUtf8String = YES;
  _result.utf8String = value;
  return self;
}
- (instancetype)clearUtf8String {
  _result.hasUtf8String = NO;
  _result.utf8String = [NSString stringWithUTF8String:"\341\210\264"];
  return self;
}
- (BOOL)hasZeroFloat {
  return _result.hasZeroFloat;
}
- (Float32) zeroFloat {
  return _result.zeroFloat;
}
- (instancetype)setZeroFloat:(Float32)value {
  _result.hasZeroFloat = YES;
  _result.zeroFloat = value;
  return self;
}
- (instancetype)clearZeroFloat {
  _result.hasZeroFloat = NO;
  _result.zeroFloat = 0;
  return self;
}
- (BOOL)hasOneFloat {
  return _result.hasOneFloat;
}
- (Float32) oneFloat {
  return _result.oneFloat;
}
- (instancetype)setOneFloat:(Float32)value {
  _result.hasOneFloat = YES;
  _result.oneFloat = value;
  return self;
}
- (instancetype)clearOneFloat {
  _result.hasOneFloat = NO;
  _result.oneFloat = 1;
  return self;
}
- (BOOL)hasSmallFloat {
  return _result.hasSmallFloat;
}
- (Float32) smallFloat {
  return _result.smallFloat;
}
- (instancetype)setSmallFloat:(Float32)value {
  _result.hasSmallFloat = YES;
  _result.smallFloat = value;
  return self;
}
- (instancetype)clearSmallFloat {
  _result.hasSmallFloat = NO;
  _result.smallFloat = 1.5;
  return self;
}
- (BOOL)hasNegativeOneFloat {
  return _result.hasNegativeOneFloat;
}
- (Float32) negativeOneFloat {
  return _result.negativeOneFloat;
}
- (instancetype)setNegativeOneFloat:(Float32)value {
  _result.hasNegativeOneFloat = YES;
  _result.negativeOneFloat = value;
  return self;
}
- (instancetype)clearNegativeOneFloat {
  _result.hasNegativeOneFloat = NO;
  _result.negativeOneFloat = -1;
  return self;
}
- (BOOL)hasNegativeFloat {
  return _result.hasNegativeFloat;
}
- (Float32) negativeFloat {
  return _result.negativeFloat;
}
- (instancetype)setNegativeFloat:(Float32)value {
  _result.hasNegativeFloat = YES;
  _result.negativeFloat = value;
  return self;
}
- (instancetype)clearNegativeFloat {
  _result.hasNegativeFloat = NO;
  _result.negativeFloat = -1.5;
  return self;
}
- (BOOL)hasLargeFloat {
  return _result.hasLargeFloat;
}
- (Float32) largeFloat {
  return _result.largeFloat;
}
- (instancetype)setLargeFloat:(Float32)value {
  _result.hasLargeFloat = YES;
  _result.largeFloat = value;
  return self;
}
- (instancetype)clearLargeFloat {
  _result.hasLargeFloat = NO;
  _result.largeFloat = 2e+08;
  return self;
}
- (BOOL)hasSmallNegativeFloat {
  return _result.hasSmallNegativeFloat;
}
- (Float32) smallNegativeFloat {
  return _result.smallNegativeFloat;
}
- (instancetype)setSmallNegativeFloat:(Float32)value {
  _result.hasSmallNegativeFloat = YES;
  _result.smallNegativeFloat = value;
  return self;
}
- (instancetype)clearSmallNegativeFloat {
  _result.hasSmallNegativeFloat = NO;
  _result.smallNegativeFloat = -8e-28;
  return self;
}
- (BOOL)hasInfDouble {
  return _result.hasInfDouble;
}
- (Float64) infDouble {
  return _result.infDouble;
}
- (instancetype)setInfDouble:(Float64)value {
  _result.hasInfDouble = YES;
  _result.infDouble = value;
  return self;
}
- (instancetype)clearInfDouble {
  _result.hasInfDouble = NO;
  _result.infDouble = HUGE_VAL;
  return self;
}
- (BOOL)hasNegInfDouble {
  return _result.hasNegInfDouble;
}
- (Float64) negInfDouble {
  return _result.negInfDouble;
}
- (instancetype)setNegInfDouble:(Float64)value {
  _result.hasNegInfDouble = YES;
  _result.negInfDouble = value;
  return self;
}
- (instancetype)clearNegInfDouble {
  _result.hasNegInfDouble = NO;
  _result.negInfDouble = -HUGE_VAL;
  return self;
}
- (BOOL)hasNanDouble {
  return _result.hasNanDouble;
}
- (Float64) nanDouble {
  return _result.nanDouble;
}
- (instancetype)setNanDouble:(Float64)value {
  _result.hasNanDouble = YES;
  _result.nanDouble = value;
  return self;
}
- (instancetype)clearNanDouble {
  _result.hasNanDouble = NO;
  _result.nanDouble = NAN;
  return self;
}
- (BOOL)hasInfFloat {
  return _result.hasInfFloat;
}
- (Float32) infFloat {
  return _result.infFloat;
}
- (instancetype)setInfFloat:(Float32)value {
  _result.hasInfFloat = YES;
  _result.infFloat = value;
  return self;
}
- (instancetype)clearInfFloat {
  _result.hasInfFloat = NO;
  _result.infFloat = HUGE_VALF;
  return self;
}
- (BOOL)hasNegInfFloat {
  return _result.hasNegInfFloat;
}
- (Float32) negInfFloat {
  return _result.negInfFloat;
}
- (instancetype)setNegInfFloat:(Float32)value {
  _result.hasNegInfFloat = YES;
  _result.negInfFloat = value;
  return self;
}
- (instancetype)clearNegInfFloat {
  _result.hasNegInfFloat = NO;
  _result.negInfFloat = -HUGE_VALF;
  return self;
}
- (BOOL)hasNanFloat {
  return _result.hasNanFloat;
}
- (Float32) nanFloat {
  return _result.nanFloat;
}
- (instancetype)setNanFloat:(Float32)value {
  _result.hasNanFloat = YES;
  _result.nanFloat = value;
  return self;
}
- (instancetype)clearNanFloat {
  _result.hasNanFloat = NO;
  _result.nanFloat = NAN;
  return self;
}
- (BOOL)hasCppTrigraph {
  return _result.hasCppTrigraph;
}
- (NSString *) cppTrigraph {
  return _result.cppTrigraph;
}
- (instancetype)setCppTrigraph:(NSString *)value {
  _result.hasCppTrigraph = YES;
  _result.cppTrigraph = value;
  return self;
}
- (instancetype)clearCppTrigraph {
  _result.hasCppTrigraph = NO;
  _result.cppTrigraph = @"\? \? \?\? \?\? \?\?\? \?\?/ \?\?-";
  return self;
}
- (BOOL)hasStringWithZero {
  return _result.hasStringWithZero;
}
- (NSString *) stringWithZero {
  return _result.stringWithZero;
}
- (instancetype)setStringWithZero:(NSString *)value {
  _result.hasStringWithZero = YES;
  _result.stringWithZero = value;
  return self;
}
- (instancetype)clearStringWithZero {
  _result.hasStringWithZero = NO;
  _result.stringWithZero = @"hel\000lo";
  return self;
}
- (BOOL)hasBytesWithZero {
  return _result.hasBytesWithZero;
}
- (NSData *) bytesWithZero {
  return _result.bytesWithZero;
}
- (instancetype)setBytesWithZero:(NSData *)value {
  _result.hasBytesWithZero = YES;
  _result.bytesWithZero = value;
  return self;
}
- (instancetype)clearBytesWithZero {
  _result.hasBytesWithZero = NO;
  _result.bytesWithZero = [NSData dataWithBytes:"wor\000ld" length:6];
  return self;
}
- (BOOL)hasStringPieceWithZero {
  return _result.hasStringPieceWithZero;
}
- (NSString *) stringPieceWithZero {
  return _result.stringPieceWithZero;
}
- (instancetype)setStringPieceWithZero:(NSString *)value {
  _result.hasStringPieceWithZero = YES;
  _result.stringPieceWithZero = value;
  return self;
}
- (instancetype)clearStringPieceWithZero {
  _result.hasStringPieceWithZero = NO;
  _result.stringPieceWithZero = @"ab\000c";
  return self;
}
- (BOOL)hasCordWithZero {
  return _result.hasCordWithZero;
}
- (NSString *) cordWithZero {
  return _result.cordWithZero;
}
- (instancetype)setCordWithZero:(NSString *)value {
  _result.hasCordWithZero = YES;
  _result.cordWithZero = value;
  return self;
}
- (instancetype)clearCordWithZero {
  _result.hasCordWithZero = NO;
  _result.cordWithZero = @"12\0003";
  return self;
}

@end


#pragma mark - SparseEnumMessage

@interface SparseEnumMessage ()

@property TestSparseEnum sparseEnum;

@end

@implementation SparseEnumMessage {
  BOOL _hasSparseEnum:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _sparseEnum = TestSparseEnumSPARSEA;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasSparseEnum {
  return !!_hasSparseEnum;
}
- (void)setHasSparseEnum:(BOOL)value {
  _hasSparseEnum = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasSparseEnum) {
    [output writeEnum:1 value:self.sparseEnum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSparseEnum) {
    size_ += computeEnumSize(1, self.sparseEnum);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (SparseEnumMessage_Builder*)builder {
  return [[SparseEnumMessage_Builder alloc] init];
}
+ (SparseEnumMessage_Builder*)builderWithPrototype:(SparseEnumMessage*)prototype {
  return [[SparseEnumMessage builder] mergeFrom:prototype];
}
- (SparseEnumMessage_Builder*)builder {
  return [SparseEnumMessage builder];
}
- (SparseEnumMessage_Builder*)toBuilder {
  return [SparseEnumMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasSparseEnum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sparseEnum", @(self.sparseEnum)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SparseEnumMessage class]]) {
    return NO;
  }
  SparseEnumMessage *otherMessage = other;
  return
      self.hasSparseEnum == otherMessage.hasSparseEnum &&
      (!self.hasSparseEnum || self.sparseEnum == otherMessage.sparseEnum) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasSparseEnum) {
    hashCode = hashCode * 31 + self.sparseEnum;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation SparseEnumMessage_Builder {
  SparseEnumMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[SparseEnumMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[SparseEnumMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[SparseEnumMessage_Builder alloc] init] mergeFrom:_result];
}

- (SparseEnumMessage*)defaultMessageInstance {
  return [SparseEnumMessage defaultInstance];
}

- (SparseEnumMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SparseEnumMessage*)buildPartial {
  SparseEnumMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(SparseEnumMessage*)other {
  if (other == [SparseEnumMessage defaultInstance]) {
    return self;
  }
  if (other.hasSparseEnum) {
    [self setSparseEnum:other.sparseEnum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (TestSparseEnumIsValidValue(value)) {
          [self setSparseEnum:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL)hasSparseEnum {
  return _result.hasSparseEnum;
}
- (TestSparseEnum)sparseEnum {
  return _result.sparseEnum;
}
- (SparseEnumMessage_Builder*)setSparseEnum:(TestSparseEnum)value {
  _result.hasSparseEnum = YES;
  _result.sparseEnum = value;
  return self;
}
- (SparseEnumMessage_Builder*)clearSparseEnum {
  _result.hasSparseEnum = NO;
  _result.sparseEnum = TestSparseEnumSPARSEA;
  return self;
}

@end


#pragma mark - OneString

@interface OneString ()

@property (strong) NSString * data;

@end

@implementation OneString {
  BOOL _hasData:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _data = @"";
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasData {
  return !!_hasData;
}
- (void)setHasData:(BOOL)value {
  _hasData = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasData) {
    [output writeString:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeStringSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (OneString_Builder*)builder {
  return [[OneString_Builder alloc] init];
}
+ (OneString_Builder*)builderWithPrototype:(OneString*)prototype {
  return [[OneString builder] mergeFrom:prototype];
}
- (OneString_Builder*)builder {
  return [OneString builder];
}
- (OneString_Builder*)toBuilder {
  return [OneString builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneString class]]) {
    return NO;
  }
  OneString *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation OneString_Builder {
  OneString* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[OneString alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[OneString alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[OneString_Builder alloc] init] mergeFrom:_result];
}

- (OneString*)defaultMessageInstance {
  return [OneString defaultInstance];
}

- (OneString*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OneString*)buildPartial {
  OneString* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(OneString*)other {
  if (other == [OneString defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL)hasData {
  return _result.hasData;
}
- (NSString *) data {
  return _result.data;
}
- (instancetype)setData:(NSString *)value {
  _result.hasData = YES;
  _result.data = value;
  return self;
}
- (instancetype)clearData {
  _result.hasData = NO;
  _result.data = @"";
  return self;
}

@end


#pragma mark - MoreString

@interface MoreString ()

@property (strong) NSMutableArray * dataArray;

@end

@implementation MoreString {
  NSMutableArray *_dataArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic data;

- (NSArray *)data {
  return _dataArray;
}
- (NSString *)dataAtIndex:(NSUInteger)index {
  return _dataArray[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  for (NSString * value in self.dataArray) {
    [output writeString:1 value:value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.dataArray.count;
    for (NSString * element in self.dataArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (MoreString_Builder*)builder {
  return [[MoreString_Builder alloc] init];
}
+ (MoreString_Builder*)builderWithPrototype:(MoreString*)prototype {
  return [[MoreString builder] mergeFrom:prototype];
}
- (MoreString_Builder*)builder {
  return [MoreString builder];
}
- (MoreString_Builder*)toBuilder {
  return [MoreString builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  for (NSString * element in self.dataArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MoreString class]]) {
    return NO;
  }
  MoreString *otherMessage = other;
  return
      ((self.dataArray == nil && otherMessage.dataArray == nil) ||
      [self.dataArray isEqualToArray:otherMessage.dataArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  for (NSString * element in self.dataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation MoreString_Builder {
  MoreString* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[MoreString alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[MoreString alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[MoreString_Builder alloc] init] mergeFrom:_result];
}

- (MoreString*)defaultMessageInstance {
  return [MoreString defaultInstance];
}

- (MoreString*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MoreString*)buildPartial {
  MoreString* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(MoreString*)other {
  if (other == [MoreString defaultInstance]) {
    return self;
  }
  if (other.dataArray.count > 0) {
    if (_result.dataArray == nil) {
      _result.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [_result.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addData:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)data {
  return _result.dataArray;
}
- (NSString *)dataAtIndex:(NSUInteger)index {
  return [_result dataAtIndex:index];
}
- (instancetype)addData:(NSString *)value {
  if (_result.dataArray == nil) {
    _result.dataArray = [[NSMutableArray alloc]init];
  }
  [_result.dataArray addObject:value];
  return self;
}
- (instancetype)setDataArray:(NSArray *)array {
  _result.dataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearData {
  _result.dataArray = nil;
  return self;
}

@end


#pragma mark - OneBytes

@interface OneBytes ()

@property (strong) NSData * data;

@end

@implementation OneBytes {
  BOOL _hasData:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _data = [NSData data];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasData {
  return !!_hasData;
}
- (void)setHasData:(BOOL)value {
  _hasData = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasData) {
    [output writeData:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeDataSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (OneBytes_Builder*)builder {
  return [[OneBytes_Builder alloc] init];
}
+ (OneBytes_Builder*)builderWithPrototype:(OneBytes*)prototype {
  return [[OneBytes builder] mergeFrom:prototype];
}
- (OneBytes_Builder*)builder {
  return [OneBytes builder];
}
- (OneBytes_Builder*)toBuilder {
  return [OneBytes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[OneBytes class]]) {
    return NO;
  }
  OneBytes *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation OneBytes_Builder {
  OneBytes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[OneBytes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[OneBytes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[OneBytes_Builder alloc] init] mergeFrom:_result];
}

- (OneBytes*)defaultMessageInstance {
  return [OneBytes defaultInstance];
}

- (OneBytes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (OneBytes*)buildPartial {
  OneBytes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(OneBytes*)other {
  if (other == [OneBytes defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL)hasData {
  return _result.hasData;
}
- (NSData *) data {
  return _result.data;
}
- (instancetype)setData:(NSData *)value {
  _result.hasData = YES;
  _result.data = value;
  return self;
}
- (instancetype)clearData {
  _result.hasData = NO;
  _result.data = [NSData data];
  return self;
}

@end


#pragma mark - MoreBytes

@interface MoreBytes ()

@property (strong) NSMutableArray * dataArray;

@end

@implementation MoreBytes {
  NSMutableArray *_dataArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic data;

- (NSArray *)data {
  return _dataArray;
}
- (NSData *)dataAtIndex:(NSUInteger)index {
  return _dataArray[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  for (NSData * value in self.dataArray) {
    [output writeData:1 value:value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.dataArray.count;
    for (NSData * element in self.dataArray) {
      dataSize += computeDataSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (MoreBytes_Builder*)builder {
  return [[MoreBytes_Builder alloc] init];
}
+ (MoreBytes_Builder*)builderWithPrototype:(MoreBytes*)prototype {
  return [[MoreBytes builder] mergeFrom:prototype];
}
- (MoreBytes_Builder*)builder {
  return [MoreBytes builder];
}
- (MoreBytes_Builder*)toBuilder {
  return [MoreBytes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  for (NSData * element in self.dataArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MoreBytes class]]) {
    return NO;
  }
  MoreBytes *otherMessage = other;
  return
      ((self.dataArray == nil && otherMessage.dataArray == nil) ||
      [self.dataArray isEqualToArray:otherMessage.dataArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  for (NSData * element in self.dataArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation MoreBytes_Builder {
  MoreBytes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[MoreBytes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[MoreBytes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[MoreBytes_Builder alloc] init] mergeFrom:_result];
}

- (MoreBytes*)defaultMessageInstance {
  return [MoreBytes defaultInstance];
}

- (MoreBytes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MoreBytes*)buildPartial {
  MoreBytes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(MoreBytes*)other {
  if (other == [MoreBytes defaultInstance]) {
    return self;
  }
  if (other.dataArray.count > 0) {
    if (_result.dataArray == nil) {
      _result.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [_result.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addData:[input readData]];
        break;
      }
    }
  }
}
- (NSMutableArray *)data {
  return _result.dataArray;
}
- (NSData *)dataAtIndex:(NSUInteger)index {
  return [_result dataAtIndex:index];
}
- (instancetype)addData:(NSData *)value {
  if (_result.dataArray == nil) {
    _result.dataArray = [[NSMutableArray alloc]init];
  }
  [_result.dataArray addObject:value];
  return self;
}
- (instancetype)setDataArray:(NSArray *)array {
  _result.dataArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearData {
  _result.dataArray = nil;
  return self;
}

@end


#pragma mark - TestPackedTypes

@interface TestPackedTypes ()

@property (strong) PBAppendableArray * packedInt32Array;
@property (strong) PBAppendableArray * packedInt64Array;
@property (strong) PBAppendableArray * packedUint32Array;
@property (strong) PBAppendableArray * packedUint64Array;
@property (strong) PBAppendableArray * packedSint32Array;
@property (strong) PBAppendableArray * packedSint64Array;
@property (strong) PBAppendableArray * packedFixed32Array;
@property (strong) PBAppendableArray * packedFixed64Array;
@property (strong) PBAppendableArray * packedSfixed32Array;
@property (strong) PBAppendableArray * packedSfixed64Array;
@property (strong) PBAppendableArray * packedFloatArray;
@property (strong) PBAppendableArray * packedDoubleArray;
@property (strong) PBAppendableArray * packedBoolArray;
@property (strong) NSMutableArray *packedEnumArray;

@end

@implementation TestPackedTypes {
  PBAppendableArray *_packedBoolArray;
  int32_t _packedBoolCachedSerializedSize;
  PBAppendableArray *_packedDoubleArray;
  int32_t _packedDoubleCachedSerializedSize;
  PBAppendableArray *_packedFloatArray;
  int32_t _packedFloatCachedSerializedSize;
  PBAppendableArray *_packedInt64Array;
  int32_t _packedInt64CachedSerializedSize;
  PBAppendableArray *_packedUint64Array;
  int32_t _packedUint64CachedSerializedSize;
  PBAppendableArray *_packedInt32Array;
  int32_t _packedInt32CachedSerializedSize;
  PBAppendableArray *_packedFixed64Array;
  int32_t _packedFixed64CachedSerializedSize;
  PBAppendableArray *_packedFixed32Array;
  int32_t _packedFixed32CachedSerializedSize;
  PBAppendableArray *_packedUint32Array;
  int32_t _packedUint32CachedSerializedSize;
  NSMutableArray * _packedEnumArray;
  int32_t _packedEnumCachedSerializedSize;
  PBAppendableArray *_packedSfixed32Array;
  int32_t _packedSfixed32CachedSerializedSize;
  PBAppendableArray *_packedSfixed64Array;
  int32_t _packedSfixed64CachedSerializedSize;
  PBAppendableArray *_packedSint32Array;
  int32_t _packedSint32CachedSerializedSize;
  PBAppendableArray *_packedSint64Array;
  int32_t _packedSint64CachedSerializedSize;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic packedInt32;
@dynamic packedInt64;
@dynamic packedUint32;
@dynamic packedUint64;
@dynamic packedSint32;
@dynamic packedSint64;
@dynamic packedFixed32;
@dynamic packedFixed64;
@dynamic packedSfixed32;
@dynamic packedSfixed64;
@dynamic packedFloat;
@dynamic packedDouble;
@dynamic packedBool;
@dynamic packedEnum;

- (PBArray *)packedInt32 {
  return _packedInt32Array;
}
- (int32_t)packedInt32AtIndex:(NSUInteger)index {
  return [_packedInt32Array int32AtIndex:index];
}
- (PBArray *)packedInt64 {
  return _packedInt64Array;
}
- (int64_t)packedInt64AtIndex:(NSUInteger)index {
  return [_packedInt64Array int64AtIndex:index];
}
- (PBArray *)packedUint32 {
  return _packedUint32Array;
}
- (uint32_t)packedUint32AtIndex:(NSUInteger)index {
  return [_packedUint32Array uint32AtIndex:index];
}
- (PBArray *)packedUint64 {
  return _packedUint64Array;
}
- (uint64_t)packedUint64AtIndex:(NSUInteger)index {
  return [_packedUint64Array uint64AtIndex:index];
}
- (PBArray *)packedSint32 {
  return _packedSint32Array;
}
- (int32_t)packedSint32AtIndex:(NSUInteger)index {
  return [_packedSint32Array int32AtIndex:index];
}
- (PBArray *)packedSint64 {
  return _packedSint64Array;
}
- (int64_t)packedSint64AtIndex:(NSUInteger)index {
  return [_packedSint64Array int64AtIndex:index];
}
- (PBArray *)packedFixed32 {
  return _packedFixed32Array;
}
- (uint32_t)packedFixed32AtIndex:(NSUInteger)index {
  return [_packedFixed32Array uint32AtIndex:index];
}
- (PBArray *)packedFixed64 {
  return _packedFixed64Array;
}
- (uint64_t)packedFixed64AtIndex:(NSUInteger)index {
  return [_packedFixed64Array uint64AtIndex:index];
}
- (PBArray *)packedSfixed32 {
  return _packedSfixed32Array;
}
- (int32_t)packedSfixed32AtIndex:(NSUInteger)index {
  return [_packedSfixed32Array int32AtIndex:index];
}
- (PBArray *)packedSfixed64 {
  return _packedSfixed64Array;
}
- (int64_t)packedSfixed64AtIndex:(NSUInteger)index {
  return [_packedSfixed64Array int64AtIndex:index];
}
- (PBArray *)packedFloat {
  return _packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [_packedFloatArray floatAtIndex:index];
}
- (PBArray *)packedDouble {
  return _packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [_packedDoubleArray doubleAtIndex:index];
}
- (PBArray *)packedBool {
  return _packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [_packedBoolArray boolAtIndex:index];
}
- (NSArray *)packedEnum {
  return _packedEnumArray;
}
- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index {
  NSNumber *value = _packedEnumArray[index];
  return value.intValue;}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  const NSUInteger packedInt32ArrayCount = self.packedInt32Array.count;
  if (packedInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.packedInt32Array.data;
    [output writeRawVarint32:722];
    [output writeRawVarint32:_packedInt32CachedSerializedSize];
    for (NSUInteger i = 0; i < packedInt32ArrayCount; ++i) {
      [output writeInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedInt64ArrayCount = self.packedInt64Array.count;
  if (packedInt64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.packedInt64Array.data;
    [output writeRawVarint32:730];
    [output writeRawVarint32:_packedInt64CachedSerializedSize];
    for (NSUInteger i = 0; i < packedInt64ArrayCount; ++i) {
      [output writeInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedUint32ArrayCount = self.packedUint32Array.count;
  if (packedUint32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.packedUint32Array.data;
    [output writeRawVarint32:738];
    [output writeRawVarint32:_packedUint32CachedSerializedSize];
    for (NSUInteger i = 0; i < packedUint32ArrayCount; ++i) {
      [output writeUInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedUint64ArrayCount = self.packedUint64Array.count;
  if (packedUint64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.packedUint64Array.data;
    [output writeRawVarint32:746];
    [output writeRawVarint32:_packedUint64CachedSerializedSize];
    for (NSUInteger i = 0; i < packedUint64ArrayCount; ++i) {
      [output writeUInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedSint32ArrayCount = self.packedSint32Array.count;
  if (packedSint32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.packedSint32Array.data;
    [output writeRawVarint32:754];
    [output writeRawVarint32:_packedSint32CachedSerializedSize];
    for (NSUInteger i = 0; i < packedSint32ArrayCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  const NSUInteger packedSint64ArrayCount = self.packedSint64Array.count;
  if (packedSint64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.packedSint64Array.data;
    [output writeRawVarint32:762];
    [output writeRawVarint32:_packedSint64CachedSerializedSize];
    for (NSUInteger i = 0; i < packedSint64ArrayCount; ++i) {
      [output writeSInt64NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed32ArrayCount = self.packedFixed32Array.count;
  if (packedFixed32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.packedFixed32Array.data;
    [output writeRawVarint32:770];
    [output writeRawVarint32:_packedFixed32CachedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed32ArrayCount; ++i) {
      [output writeFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedFixed64ArrayCount = self.packedFixed64Array.count;
  if (packedFixed64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.packedFixed64Array.data;
    [output writeRawVarint32:778];
    [output writeRawVarint32:_packedFixed64CachedSerializedSize];
    for (NSUInteger i = 0; i < packedFixed64ArrayCount; ++i) {
      [output writeFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed32ArrayCount = self.packedSfixed32Array.count;
  if (packedSfixed32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.packedSfixed32Array.data;
    [output writeRawVarint32:786];
    [output writeRawVarint32:_packedSfixed32CachedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed32ArrayCount; ++i) {
      [output writeSFixed32NoTag:values[i]];
    }
  }
  const NSUInteger packedSfixed64ArrayCount = self.packedSfixed64Array.count;
  if (packedSfixed64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.packedSfixed64Array.data;
    [output writeRawVarint32:794];
    [output writeRawVarint32:_packedSfixed64CachedSerializedSize];
    for (NSUInteger i = 0; i < packedSfixed64ArrayCount; ++i) {
      [output writeSFixed64NoTag:values[i]];
    }
  }
  const NSUInteger packedFloatArrayCount = self.packedFloatArray.count;
  if (packedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.packedFloatArray.data;
    [output writeRawVarint32:802];
    [output writeRawVarint32:_packedFloatCachedSerializedSize];
    for (NSUInteger i = 0; i < packedFloatArrayCount; ++i) {
      [output writeFloatNoTag:values[i]];
    }
  }
  const NSUInteger packedDoubleArrayCount = self.packedDoubleArray.count;
  if (packedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.packedDoubleArray.data;
    [output writeRawVarint32:810];
    [output writeRawVarint32:_packedDoubleCachedSerializedSize];
    for (NSUInteger i = 0; i < packedDoubleArrayCount; ++i) {
      [output writeDoubleNoTag:values[i]];
    }
  }
  const NSUInteger packedBoolArrayCount = self.packedBoolArray.count;
  if (packedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.packedBoolArray.data;
    [output writeRawVarint32:818];
    [output writeRawVarint32:_packedBoolCachedSerializedSize];
    for (NSUInteger i = 0; i < packedBoolArrayCount; ++i) {
      [output writeBoolNoTag:values[i]];
    }
  }
  if (self.packedEnumArray.count > 0) {
    [output writeRawVarint32:826];
    [output writeRawVarint32:_packedEnumCachedSerializedSize];
  }
  for (NSNumber *element in self.packedEnumArray) {
    [output writeEnumNoTag:element.intValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedInt32Array.count;
    const int32_t *values = (const int32_t *)self.packedInt32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt32CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedInt64Array.count;
    const int64_t *values = (const int64_t *)self.packedInt64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedInt64CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedUint32Array.count;
    const uint32_t *values = (const uint32_t *)self.packedUint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint32CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedUint64Array.count;
    const uint64_t *values = (const uint64_t *)self.packedUint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedUint64CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedSint32Array.count;
    const int32_t *values = (const int32_t *)self.packedSint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint32CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedSint64Array.count;
    const int64_t *values = (const int64_t *)self.packedSint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSint64CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedFixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed32CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedFixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFixed64CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedSfixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed32CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedSfixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedSfixed64CachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedFloatArray.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedFloatCachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedDoubleArray.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedDoubleCachedSerializedSize = dataSize;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedBoolArray.count;
    dataSize += 1 * count_;
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedBoolCachedSerializedSize = dataSize;
  }
  _packedEnumCachedSerializedSize = size_;
  for (NSNumber *element in self.packedEnumArray) {
    size_ += computeEnumSizeNoTag(element.intValue);
  }
  _packedEnumCachedSerializedSize = size_ - _packedEnumCachedSerializedSize;
  if (self.packedEnumArray.count > 0) {
    size_ += 2;  // tag size
    size_ += computeRawVarint32Size(_packedEnumCachedSerializedSize);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestPackedTypes_Builder*)builder {
  return [[TestPackedTypes_Builder alloc] init];
}
+ (TestPackedTypes_Builder*)builderWithPrototype:(TestPackedTypes*)prototype {
  return [[TestPackedTypes builder] mergeFrom:prototype];
}
- (TestPackedTypes_Builder*)builder {
  return [TestPackedTypes builder];
}
- (TestPackedTypes_Builder*)toBuilder {
  return [TestPackedTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  listCount = self.packedInt32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt32", @([self.packedInt32Array int32AtIndex:i])];
  }
  listCount = self.packedInt64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedInt64", @([self.packedInt64Array int64AtIndex:i])];
  }
  listCount = self.packedUint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint32", @([self.packedUint32Array uint32AtIndex:i])];
  }
  listCount = self.packedUint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedUint64", @([self.packedUint64Array uint64AtIndex:i])];
  }
  listCount = self.packedSint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint32", @([self.packedSint32Array int32AtIndex:i])];
  }
  listCount = self.packedSint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSint64", @([self.packedSint64Array int64AtIndex:i])];
  }
  listCount = self.packedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed32", @([self.packedFixed32Array uint32AtIndex:i])];
  }
  listCount = self.packedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFixed64", @([self.packedFixed64Array uint64AtIndex:i])];
  }
  listCount = self.packedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed32", @([self.packedSfixed32Array int32AtIndex:i])];
  }
  listCount = self.packedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedSfixed64", @([self.packedSfixed64Array int64AtIndex:i])];
  }
  listCount = self.packedFloatArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedFloat", @([self.packedFloatArray floatAtIndex:i])];
  }
  listCount = self.packedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedDouble", @([self.packedDoubleArray doubleAtIndex:i])];
  }
  listCount = self.packedBoolArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedBool", @([self.packedBoolArray boolAtIndex:i])];
  }
  for (NSNumber* element in self.packedEnumArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packedEnum", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedTypes class]]) {
    return NO;
  }
  TestPackedTypes *otherMessage = other;
  return
      ((self.packedInt32Array == nil && otherMessage.packedInt32Array == nil) ||
      [self.packedInt32Array isEqualToArray:otherMessage.packedInt32Array]) &&
      ((self.packedInt64Array == nil && otherMessage.packedInt64Array == nil) ||
      [self.packedInt64Array isEqualToArray:otherMessage.packedInt64Array]) &&
      ((self.packedUint32Array == nil && otherMessage.packedUint32Array == nil) ||
      [self.packedUint32Array isEqualToArray:otherMessage.packedUint32Array]) &&
      ((self.packedUint64Array == nil && otherMessage.packedUint64Array == nil) ||
      [self.packedUint64Array isEqualToArray:otherMessage.packedUint64Array]) &&
      ((self.packedSint32Array == nil && otherMessage.packedSint32Array == nil) ||
      [self.packedSint32Array isEqualToArray:otherMessage.packedSint32Array]) &&
      ((self.packedSint64Array == nil && otherMessage.packedSint64Array == nil) ||
      [self.packedSint64Array isEqualToArray:otherMessage.packedSint64Array]) &&
      ((self.packedFixed32Array == nil && otherMessage.packedFixed32Array == nil) ||
      [self.packedFixed32Array isEqualToArray:otherMessage.packedFixed32Array]) &&
      ((self.packedFixed64Array == nil && otherMessage.packedFixed64Array == nil) ||
      [self.packedFixed64Array isEqualToArray:otherMessage.packedFixed64Array]) &&
      ((self.packedSfixed32Array == nil && otherMessage.packedSfixed32Array == nil) ||
      [self.packedSfixed32Array isEqualToArray:otherMessage.packedSfixed32Array]) &&
      ((self.packedSfixed64Array == nil && otherMessage.packedSfixed64Array == nil) ||
      [self.packedSfixed64Array isEqualToArray:otherMessage.packedSfixed64Array]) &&
      ((self.packedFloatArray == nil && otherMessage.packedFloatArray == nil) ||
      [self.packedFloatArray isEqualToArray:otherMessage.packedFloatArray]) &&
      ((self.packedDoubleArray == nil && otherMessage.packedDoubleArray == nil) ||
      [self.packedDoubleArray isEqualToArray:otherMessage.packedDoubleArray]) &&
      ((self.packedBoolArray == nil && otherMessage.packedBoolArray == nil) ||
      [self.packedBoolArray isEqualToArray:otherMessage.packedBoolArray]) &&
      ((self.packedEnumArray == nil && otherMessage.packedEnumArray == nil) ||
      [self.packedEnumArray isEqualToArray:otherMessage.packedEnumArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  listCount = self.packedInt32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedInt32Array int32AtIndex:i];
  }
  listCount = self.packedInt64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedInt64Array int64AtIndex:i];
  }
  listCount = self.packedUint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedUint32Array uint32AtIndex:i];
  }
  listCount = self.packedUint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedUint64Array uint64AtIndex:i];
  }
  listCount = self.packedSint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedSint32Array int32AtIndex:i];
  }
  listCount = self.packedSint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedSint64Array int64AtIndex:i];
  }
  listCount = self.packedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedFixed32Array uint32AtIndex:i];
  }
  listCount = self.packedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedFixed64Array uint64AtIndex:i];
  }
  listCount = self.packedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedSfixed32Array int32AtIndex:i];
  }
  listCount = self.packedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedSfixed64Array int64AtIndex:i];
  }
  listCount = self.packedFloatArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedFloatArray floatAtIndex:i];
  }
  listCount = self.packedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedDoubleArray doubleAtIndex:i];
  }
  listCount = self.packedBoolArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedBoolArray boolAtIndex:i];
  }
  for (NSNumber* element in self.packedEnumArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestPackedTypes_Builder {
  TestPackedTypes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestPackedTypes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestPackedTypes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestPackedTypes_Builder alloc] init] mergeFrom:_result];
}

- (TestPackedTypes*)defaultMessageInstance {
  return [TestPackedTypes defaultInstance];
}

- (TestPackedTypes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedTypes*)buildPartial {
  TestPackedTypes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestPackedTypes*)other {
  if (other == [TestPackedTypes defaultInstance]) {
    return self;
  }
  if (other.packedInt32Array.count > 0) {
    if (_result.packedInt32Array == nil) {
      _result.packedInt32Array = [other.packedInt32Array copy];
    } else {
      [_result.packedInt32Array appendArray:other.packedInt32Array];
    }
  }
  if (other.packedInt64Array.count > 0) {
    if (_result.packedInt64Array == nil) {
      _result.packedInt64Array = [other.packedInt64Array copy];
    } else {
      [_result.packedInt64Array appendArray:other.packedInt64Array];
    }
  }
  if (other.packedUint32Array.count > 0) {
    if (_result.packedUint32Array == nil) {
      _result.packedUint32Array = [other.packedUint32Array copy];
    } else {
      [_result.packedUint32Array appendArray:other.packedUint32Array];
    }
  }
  if (other.packedUint64Array.count > 0) {
    if (_result.packedUint64Array == nil) {
      _result.packedUint64Array = [other.packedUint64Array copy];
    } else {
      [_result.packedUint64Array appendArray:other.packedUint64Array];
    }
  }
  if (other.packedSint32Array.count > 0) {
    if (_result.packedSint32Array == nil) {
      _result.packedSint32Array = [other.packedSint32Array copy];
    } else {
      [_result.packedSint32Array appendArray:other.packedSint32Array];
    }
  }
  if (other.packedSint64Array.count > 0) {
    if (_result.packedSint64Array == nil) {
      _result.packedSint64Array = [other.packedSint64Array copy];
    } else {
      [_result.packedSint64Array appendArray:other.packedSint64Array];
    }
  }
  if (other.packedFixed32Array.count > 0) {
    if (_result.packedFixed32Array == nil) {
      _result.packedFixed32Array = [other.packedFixed32Array copy];
    } else {
      [_result.packedFixed32Array appendArray:other.packedFixed32Array];
    }
  }
  if (other.packedFixed64Array.count > 0) {
    if (_result.packedFixed64Array == nil) {
      _result.packedFixed64Array = [other.packedFixed64Array copy];
    } else {
      [_result.packedFixed64Array appendArray:other.packedFixed64Array];
    }
  }
  if (other.packedSfixed32Array.count > 0) {
    if (_result.packedSfixed32Array == nil) {
      _result.packedSfixed32Array = [other.packedSfixed32Array copy];
    } else {
      [_result.packedSfixed32Array appendArray:other.packedSfixed32Array];
    }
  }
  if (other.packedSfixed64Array.count > 0) {
    if (_result.packedSfixed64Array == nil) {
      _result.packedSfixed64Array = [other.packedSfixed64Array copy];
    } else {
      [_result.packedSfixed64Array appendArray:other.packedSfixed64Array];
    }
  }
  if (other.packedFloatArray.count > 0) {
    if (_result.packedFloatArray == nil) {
      _result.packedFloatArray = [other.packedFloatArray copy];
    } else {
      [_result.packedFloatArray appendArray:other.packedFloatArray];
    }
  }
  if (other.packedDoubleArray.count > 0) {
    if (_result.packedDoubleArray == nil) {
      _result.packedDoubleArray = [other.packedDoubleArray copy];
    } else {
      [_result.packedDoubleArray appendArray:other.packedDoubleArray];
    }
  }
  if (other.packedBoolArray.count > 0) {
    if (_result.packedBoolArray == nil) {
      _result.packedBoolArray = [other.packedBoolArray copy];
    } else {
      [_result.packedBoolArray appendArray:other.packedBoolArray];
    }
  }
  if (other.packedEnumArray.count > 0) {
    if (_result.packedEnumArray == nil) {
      _result.packedEnumArray = [[NSMutableArray alloc] initWithArray:other.packedEnumArray];
    } else {
      [_result.packedEnumArray addObjectsFromArray:other.packedEnumArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 722: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt32Array == nil) {
          _result.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt32Array addInt32:[input readInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 730: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedInt64Array == nil) {
          _result.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedInt64Array addInt64:[input readInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 738: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint32Array == nil) {
          _result.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint32Array addUint32:[input readUInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 746: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedUint64Array == nil) {
          _result.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedUint64Array addUint64:[input readUInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 754: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint32Array == nil) {
          _result.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint32Array addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
      case 762: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSint64Array == nil) {
          _result.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSint64Array addInt64:[input readSInt64]];
        }
        [input popLimit:limit];
        break;
      }
      case 770: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed32Array == nil) {
          _result.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed32Array addUint32:[input readFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 778: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFixed64Array == nil) {
          _result.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFixed64Array addUint64:[input readFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 786: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed32Array == nil) {
          _result.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed32Array addInt32:[input readSFixed32]];
        }
        [input popLimit:limit];
        break;
      }
      case 794: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedSfixed64Array == nil) {
          _result.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedSfixed64Array addInt64:[input readSFixed64]];
        }
        [input popLimit:limit];
        break;
      }
      case 802: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedFloatArray == nil) {
          _result.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedFloatArray addFloat:[input readFloat]];
        }
        [input popLimit:limit];
        break;
      }
      case 810: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedDoubleArray == nil) {
          _result.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedDoubleArray addDouble:[input readDouble]];
        }
        [input popLimit:limit];
        break;
      }
      case 818: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedBoolArray == nil) {
          _result.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedBoolArray addBool:[input readBool]];
        }
        [input popLimit:limit];
        break;
      }
      case 826: {
        int32_t length = [input readRawVarint32];
        int32_t oldLimit = [input pushLimit:length];
        while (input.bytesUntilLimit > 0) {
          int32_t value = [input readEnum];
          if (ForeignEnumIsValidValue(value)) {
            [self addPackedEnum:value];
          } else {
            [unknownFields mergeVarintField:103 value:value];
          }
        }
        [input popLimit:oldLimit];
        break;
      }
    }
  }
}
- (PBAppendableArray *)packedInt32 {
  return _result.packedInt32Array;
}
- (int32_t)packedInt32AtIndex:(NSUInteger)index {
  return [_result packedInt32AtIndex:index];
}
- (instancetype)addPackedInt32:(int32_t)value {
  if (_result.packedInt32Array == nil) {
    _result.packedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.packedInt32Array addInt32:value];
  return self;
}
- (instancetype)setPackedInt32Array:(NSArray *)array {
  _result.packedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setPackedInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.packedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearPackedInt32 {
  _result.packedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)packedInt64 {
  return _result.packedInt64Array;
}
- (int64_t)packedInt64AtIndex:(NSUInteger)index {
  return [_result packedInt64AtIndex:index];
}
- (instancetype)addPackedInt64:(int64_t)value {
  if (_result.packedInt64Array == nil) {
    _result.packedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.packedInt64Array addInt64:value];
  return self;
}
- (instancetype)setPackedInt64Array:(NSArray *)array {
  _result.packedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setPackedInt64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.packedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearPackedInt64 {
  _result.packedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint32 {
  return _result.packedUint32Array;
}
- (uint32_t)packedUint32AtIndex:(NSUInteger)index {
  return [_result packedUint32AtIndex:index];
}
- (instancetype)addPackedUint32:(uint32_t)value {
  if (_result.packedUint32Array == nil) {
    _result.packedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.packedUint32Array addUint32:value];
  return self;
}
- (instancetype)setPackedUint32Array:(NSArray *)array {
  _result.packedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setPackedUint32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.packedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearPackedUint32 {
  _result.packedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedUint64 {
  return _result.packedUint64Array;
}
- (uint64_t)packedUint64AtIndex:(NSUInteger)index {
  return [_result packedUint64AtIndex:index];
}
- (instancetype)addPackedUint64:(uint64_t)value {
  if (_result.packedUint64Array == nil) {
    _result.packedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.packedUint64Array addUint64:value];
  return self;
}
- (instancetype)setPackedUint64Array:(NSArray *)array {
  _result.packedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setPackedUint64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.packedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearPackedUint64 {
  _result.packedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint32 {
  return _result.packedSint32Array;
}
- (int32_t)packedSint32AtIndex:(NSUInteger)index {
  return [_result packedSint32AtIndex:index];
}
- (instancetype)addPackedSint32:(int32_t)value {
  if (_result.packedSint32Array == nil) {
    _result.packedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.packedSint32Array addInt32:value];
  return self;
}
- (instancetype)setPackedSint32Array:(NSArray *)array {
  _result.packedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setPackedSint32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.packedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearPackedSint32 {
  _result.packedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSint64 {
  return _result.packedSint64Array;
}
- (int64_t)packedSint64AtIndex:(NSUInteger)index {
  return [_result packedSint64AtIndex:index];
}
- (instancetype)addPackedSint64:(int64_t)value {
  if (_result.packedSint64Array == nil) {
    _result.packedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.packedSint64Array addInt64:value];
  return self;
}
- (instancetype)setPackedSint64Array:(NSArray *)array {
  _result.packedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setPackedSint64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.packedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearPackedSint64 {
  _result.packedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed32 {
  return _result.packedFixed32Array;
}
- (uint32_t)packedFixed32AtIndex:(NSUInteger)index {
  return [_result packedFixed32AtIndex:index];
}
- (instancetype)addPackedFixed32:(uint32_t)value {
  if (_result.packedFixed32Array == nil) {
    _result.packedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.packedFixed32Array addUint32:value];
  return self;
}
- (instancetype)setPackedFixed32Array:(NSArray *)array {
  _result.packedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setPackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.packedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearPackedFixed32 {
  _result.packedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedFixed64 {
  return _result.packedFixed64Array;
}
- (uint64_t)packedFixed64AtIndex:(NSUInteger)index {
  return [_result packedFixed64AtIndex:index];
}
- (instancetype)addPackedFixed64:(uint64_t)value {
  if (_result.packedFixed64Array == nil) {
    _result.packedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.packedFixed64Array addUint64:value];
  return self;
}
- (instancetype)setPackedFixed64Array:(NSArray *)array {
  _result.packedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setPackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.packedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearPackedFixed64 {
  _result.packedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed32 {
  return _result.packedSfixed32Array;
}
- (int32_t)packedSfixed32AtIndex:(NSUInteger)index {
  return [_result packedSfixed32AtIndex:index];
}
- (instancetype)addPackedSfixed32:(int32_t)value {
  if (_result.packedSfixed32Array == nil) {
    _result.packedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.packedSfixed32Array addInt32:value];
  return self;
}
- (instancetype)setPackedSfixed32Array:(NSArray *)array {
  _result.packedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setPackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.packedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearPackedSfixed32 {
  _result.packedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)packedSfixed64 {
  return _result.packedSfixed64Array;
}
- (int64_t)packedSfixed64AtIndex:(NSUInteger)index {
  return [_result packedSfixed64AtIndex:index];
}
- (instancetype)addPackedSfixed64:(int64_t)value {
  if (_result.packedSfixed64Array == nil) {
    _result.packedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.packedSfixed64Array addInt64:value];
  return self;
}
- (instancetype)setPackedSfixed64Array:(NSArray *)array {
  _result.packedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setPackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.packedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearPackedSfixed64 {
  _result.packedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)packedFloat {
  return _result.packedFloatArray;
}
- (Float32)packedFloatAtIndex:(NSUInteger)index {
  return [_result packedFloatAtIndex:index];
}
- (instancetype)addPackedFloat:(Float32)value {
  if (_result.packedFloatArray == nil) {
    _result.packedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_result.packedFloatArray addFloat:value];
  return self;
}
- (instancetype)setPackedFloatArray:(NSArray *)array {
  _result.packedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)setPackedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  _result.packedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)clearPackedFloat {
  _result.packedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)packedDouble {
  return _result.packedDoubleArray;
}
- (Float64)packedDoubleAtIndex:(NSUInteger)index {
  return [_result packedDoubleAtIndex:index];
}
- (instancetype)addPackedDouble:(Float64)value {
  if (_result.packedDoubleArray == nil) {
    _result.packedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_result.packedDoubleArray addDouble:value];
  return self;
}
- (instancetype)setPackedDoubleArray:(NSArray *)array {
  _result.packedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)setPackedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  _result.packedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)clearPackedDouble {
  _result.packedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)packedBool {
  return _result.packedBoolArray;
}
- (BOOL)packedBoolAtIndex:(NSUInteger)index {
  return [_result packedBoolAtIndex:index];
}
- (instancetype)addPackedBool:(BOOL)value {
  if (_result.packedBoolArray == nil) {
    _result.packedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_result.packedBoolArray addBool:value];
  return self;
}
- (instancetype)setPackedBoolArray:(NSArray *)array {
  _result.packedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)setPackedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  _result.packedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)clearPackedBool {
  _result.packedBoolArray = nil;
  return self;
}
- (NSMutableArray *)packedEnum {
  return _result.packedEnumArray;
}
- (ForeignEnum)packedEnumAtIndex:(NSUInteger)index {
  return [_result packedEnumAtIndex:index];
}
- (TestPackedTypes_Builder *)addPackedEnum:(ForeignEnum)value {
  if (_result.packedEnumArray == nil) {
    _result.packedEnumArray = [NSMutableArray array];
  }
  [_result.packedEnumArray addObject:@(value)];
  return self;
}
- (TestPackedTypes_Builder *)setPackedEnumArray:(NSArray *)array {
  _result.packedEnumArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestPackedTypes_Builder *)clearPackedEnum {
  _result.packedEnumArray = nil;
  return self;
}

@end


#pragma mark - TestUnpackedTypes

@interface TestUnpackedTypes ()

@property (strong) PBAppendableArray * unpackedInt32Array;
@property (strong) PBAppendableArray * unpackedInt64Array;
@property (strong) PBAppendableArray * unpackedUint32Array;
@property (strong) PBAppendableArray * unpackedUint64Array;
@property (strong) PBAppendableArray * unpackedSint32Array;
@property (strong) PBAppendableArray * unpackedSint64Array;
@property (strong) PBAppendableArray * unpackedFixed32Array;
@property (strong) PBAppendableArray * unpackedFixed64Array;
@property (strong) PBAppendableArray * unpackedSfixed32Array;
@property (strong) PBAppendableArray * unpackedSfixed64Array;
@property (strong) PBAppendableArray * unpackedFloatArray;
@property (strong) PBAppendableArray * unpackedDoubleArray;
@property (strong) PBAppendableArray * unpackedBoolArray;
@property (strong) NSMutableArray *unpackedEnumArray;

@end

@implementation TestUnpackedTypes {
  PBAppendableArray *_unpackedBoolArray;
  PBAppendableArray *_unpackedDoubleArray;
  PBAppendableArray *_unpackedFloatArray;
  PBAppendableArray *_unpackedInt64Array;
  PBAppendableArray *_unpackedUint64Array;
  PBAppendableArray *_unpackedInt32Array;
  PBAppendableArray *_unpackedFixed64Array;
  PBAppendableArray *_unpackedFixed32Array;
  PBAppendableArray *_unpackedUint32Array;
  NSMutableArray * _unpackedEnumArray;
  PBAppendableArray *_unpackedSfixed32Array;
  PBAppendableArray *_unpackedSfixed64Array;
  PBAppendableArray *_unpackedSint32Array;
  PBAppendableArray *_unpackedSint64Array;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic unpackedInt32;
@dynamic unpackedInt64;
@dynamic unpackedUint32;
@dynamic unpackedUint64;
@dynamic unpackedSint32;
@dynamic unpackedSint64;
@dynamic unpackedFixed32;
@dynamic unpackedFixed64;
@dynamic unpackedSfixed32;
@dynamic unpackedSfixed64;
@dynamic unpackedFloat;
@dynamic unpackedDouble;
@dynamic unpackedBool;
@dynamic unpackedEnum;

- (PBArray *)unpackedInt32 {
  return _unpackedInt32Array;
}
- (int32_t)unpackedInt32AtIndex:(NSUInteger)index {
  return [_unpackedInt32Array int32AtIndex:index];
}
- (PBArray *)unpackedInt64 {
  return _unpackedInt64Array;
}
- (int64_t)unpackedInt64AtIndex:(NSUInteger)index {
  return [_unpackedInt64Array int64AtIndex:index];
}
- (PBArray *)unpackedUint32 {
  return _unpackedUint32Array;
}
- (uint32_t)unpackedUint32AtIndex:(NSUInteger)index {
  return [_unpackedUint32Array uint32AtIndex:index];
}
- (PBArray *)unpackedUint64 {
  return _unpackedUint64Array;
}
- (uint64_t)unpackedUint64AtIndex:(NSUInteger)index {
  return [_unpackedUint64Array uint64AtIndex:index];
}
- (PBArray *)unpackedSint32 {
  return _unpackedSint32Array;
}
- (int32_t)unpackedSint32AtIndex:(NSUInteger)index {
  return [_unpackedSint32Array int32AtIndex:index];
}
- (PBArray *)unpackedSint64 {
  return _unpackedSint64Array;
}
- (int64_t)unpackedSint64AtIndex:(NSUInteger)index {
  return [_unpackedSint64Array int64AtIndex:index];
}
- (PBArray *)unpackedFixed32 {
  return _unpackedFixed32Array;
}
- (uint32_t)unpackedFixed32AtIndex:(NSUInteger)index {
  return [_unpackedFixed32Array uint32AtIndex:index];
}
- (PBArray *)unpackedFixed64 {
  return _unpackedFixed64Array;
}
- (uint64_t)unpackedFixed64AtIndex:(NSUInteger)index {
  return [_unpackedFixed64Array uint64AtIndex:index];
}
- (PBArray *)unpackedSfixed32 {
  return _unpackedSfixed32Array;
}
- (int32_t)unpackedSfixed32AtIndex:(NSUInteger)index {
  return [_unpackedSfixed32Array int32AtIndex:index];
}
- (PBArray *)unpackedSfixed64 {
  return _unpackedSfixed64Array;
}
- (int64_t)unpackedSfixed64AtIndex:(NSUInteger)index {
  return [_unpackedSfixed64Array int64AtIndex:index];
}
- (PBArray *)unpackedFloat {
  return _unpackedFloatArray;
}
- (Float32)unpackedFloatAtIndex:(NSUInteger)index {
  return [_unpackedFloatArray floatAtIndex:index];
}
- (PBArray *)unpackedDouble {
  return _unpackedDoubleArray;
}
- (Float64)unpackedDoubleAtIndex:(NSUInteger)index {
  return [_unpackedDoubleArray doubleAtIndex:index];
}
- (PBArray *)unpackedBool {
  return _unpackedBoolArray;
}
- (BOOL)unpackedBoolAtIndex:(NSUInteger)index {
  return [_unpackedBoolArray boolAtIndex:index];
}
- (NSArray *)unpackedEnum {
  return _unpackedEnumArray;
}
- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index {
  NSNumber *value = _unpackedEnumArray[index];
  return value.intValue;}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  const NSUInteger unpackedInt32ArrayCount = self.unpackedInt32Array.count;
  if (unpackedInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.unpackedInt32Array.data;
    for (NSUInteger i = 0; i < unpackedInt32ArrayCount; ++i) {
      [output writeInt32:90 value:values[i]];
    }
  }
  const NSUInteger unpackedInt64ArrayCount = self.unpackedInt64Array.count;
  if (unpackedInt64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.unpackedInt64Array.data;
    for (NSUInteger i = 0; i < unpackedInt64ArrayCount; ++i) {
      [output writeInt64:91 value:values[i]];
    }
  }
  const NSUInteger unpackedUint32ArrayCount = self.unpackedUint32Array.count;
  if (unpackedUint32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.unpackedUint32Array.data;
    for (NSUInteger i = 0; i < unpackedUint32ArrayCount; ++i) {
      [output writeUInt32:92 value:values[i]];
    }
  }
  const NSUInteger unpackedUint64ArrayCount = self.unpackedUint64Array.count;
  if (unpackedUint64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.unpackedUint64Array.data;
    for (NSUInteger i = 0; i < unpackedUint64ArrayCount; ++i) {
      [output writeUInt64:93 value:values[i]];
    }
  }
  const NSUInteger unpackedSint32ArrayCount = self.unpackedSint32Array.count;
  if (unpackedSint32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.unpackedSint32Array.data;
    for (NSUInteger i = 0; i < unpackedSint32ArrayCount; ++i) {
      [output writeSInt32:94 value:values[i]];
    }
  }
  const NSUInteger unpackedSint64ArrayCount = self.unpackedSint64Array.count;
  if (unpackedSint64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.unpackedSint64Array.data;
    for (NSUInteger i = 0; i < unpackedSint64ArrayCount; ++i) {
      [output writeSInt64:95 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed32ArrayCount = self.unpackedFixed32Array.count;
  if (unpackedFixed32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.unpackedFixed32Array.data;
    for (NSUInteger i = 0; i < unpackedFixed32ArrayCount; ++i) {
      [output writeFixed32:96 value:values[i]];
    }
  }
  const NSUInteger unpackedFixed64ArrayCount = self.unpackedFixed64Array.count;
  if (unpackedFixed64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.unpackedFixed64Array.data;
    for (NSUInteger i = 0; i < unpackedFixed64ArrayCount; ++i) {
      [output writeFixed64:97 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed32ArrayCount = self.unpackedSfixed32Array.count;
  if (unpackedSfixed32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.unpackedSfixed32Array.data;
    for (NSUInteger i = 0; i < unpackedSfixed32ArrayCount; ++i) {
      [output writeSFixed32:98 value:values[i]];
    }
  }
  const NSUInteger unpackedSfixed64ArrayCount = self.unpackedSfixed64Array.count;
  if (unpackedSfixed64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.unpackedSfixed64Array.data;
    for (NSUInteger i = 0; i < unpackedSfixed64ArrayCount; ++i) {
      [output writeSFixed64:99 value:values[i]];
    }
  }
  const NSUInteger unpackedFloatArrayCount = self.unpackedFloatArray.count;
  if (unpackedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.unpackedFloatArray.data;
    for (NSUInteger i = 0; i < unpackedFloatArrayCount; ++i) {
      [output writeFloat:100 value:values[i]];
    }
  }
  const NSUInteger unpackedDoubleArrayCount = self.unpackedDoubleArray.count;
  if (unpackedDoubleArrayCount > 0) {
    const Float64 *values = (const Float64 *)self.unpackedDoubleArray.data;
    for (NSUInteger i = 0; i < unpackedDoubleArrayCount; ++i) {
      [output writeDouble:101 value:values[i]];
    }
  }
  const NSUInteger unpackedBoolArrayCount = self.unpackedBoolArray.count;
  if (unpackedBoolArrayCount > 0) {
    const BOOL *values = (const BOOL *)self.unpackedBoolArray.data;
    for (NSUInteger i = 0; i < unpackedBoolArrayCount; ++i) {
      [output writeBool:102 value:values[i]];
    }
  }
  for (NSNumber *element in self.unpackedEnumArray) {
    [output writeEnum:103 value:element.intValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedInt32Array.count;
    const int32_t *values = (const int32_t *)self.unpackedInt32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedInt64Array.count;
    const int64_t *values = (const int64_t *)self.unpackedInt64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedUint32Array.count;
    const uint32_t *values = (const uint32_t *)self.unpackedUint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedUint64Array.count;
    const uint64_t *values = (const uint64_t *)self.unpackedUint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedSint32Array.count;
    const int32_t *values = (const int32_t *)self.unpackedSint32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedSint64Array.count;
    const int64_t *values = (const int64_t *)self.unpackedSint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedFixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedFixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedSfixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedSfixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedFloatArray.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedDoubleArray.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.unpackedBoolArray.count;
    dataSize += 1 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  for (NSNumber *element in self.unpackedEnumArray) {
    size_ += computeEnumSize(103, element.intValue);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestUnpackedTypes_Builder*)builder {
  return [[TestUnpackedTypes_Builder alloc] init];
}
+ (TestUnpackedTypes_Builder*)builderWithPrototype:(TestUnpackedTypes*)prototype {
  return [[TestUnpackedTypes builder] mergeFrom:prototype];
}
- (TestUnpackedTypes_Builder*)builder {
  return [TestUnpackedTypes builder];
}
- (TestUnpackedTypes_Builder*)toBuilder {
  return [TestUnpackedTypes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  listCount = self.unpackedInt32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt32", @([self.unpackedInt32Array int32AtIndex:i])];
  }
  listCount = self.unpackedInt64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedInt64", @([self.unpackedInt64Array int64AtIndex:i])];
  }
  listCount = self.unpackedUint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint32", @([self.unpackedUint32Array uint32AtIndex:i])];
  }
  listCount = self.unpackedUint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedUint64", @([self.unpackedUint64Array uint64AtIndex:i])];
  }
  listCount = self.unpackedSint32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint32", @([self.unpackedSint32Array int32AtIndex:i])];
  }
  listCount = self.unpackedSint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSint64", @([self.unpackedSint64Array int64AtIndex:i])];
  }
  listCount = self.unpackedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed32", @([self.unpackedFixed32Array uint32AtIndex:i])];
  }
  listCount = self.unpackedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFixed64", @([self.unpackedFixed64Array uint64AtIndex:i])];
  }
  listCount = self.unpackedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed32", @([self.unpackedSfixed32Array int32AtIndex:i])];
  }
  listCount = self.unpackedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedSfixed64", @([self.unpackedSfixed64Array int64AtIndex:i])];
  }
  listCount = self.unpackedFloatArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedFloat", @([self.unpackedFloatArray floatAtIndex:i])];
  }
  listCount = self.unpackedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedDouble", @([self.unpackedDoubleArray doubleAtIndex:i])];
  }
  listCount = self.unpackedBoolArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedBool", @([self.unpackedBoolArray boolAtIndex:i])];
  }
  for (NSNumber* element in self.unpackedEnumArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unpackedEnum", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestUnpackedTypes class]]) {
    return NO;
  }
  TestUnpackedTypes *otherMessage = other;
  return
      ((self.unpackedInt32Array == nil && otherMessage.unpackedInt32Array == nil) ||
      [self.unpackedInt32Array isEqualToArray:otherMessage.unpackedInt32Array]) &&
      ((self.unpackedInt64Array == nil && otherMessage.unpackedInt64Array == nil) ||
      [self.unpackedInt64Array isEqualToArray:otherMessage.unpackedInt64Array]) &&
      ((self.unpackedUint32Array == nil && otherMessage.unpackedUint32Array == nil) ||
      [self.unpackedUint32Array isEqualToArray:otherMessage.unpackedUint32Array]) &&
      ((self.unpackedUint64Array == nil && otherMessage.unpackedUint64Array == nil) ||
      [self.unpackedUint64Array isEqualToArray:otherMessage.unpackedUint64Array]) &&
      ((self.unpackedSint32Array == nil && otherMessage.unpackedSint32Array == nil) ||
      [self.unpackedSint32Array isEqualToArray:otherMessage.unpackedSint32Array]) &&
      ((self.unpackedSint64Array == nil && otherMessage.unpackedSint64Array == nil) ||
      [self.unpackedSint64Array isEqualToArray:otherMessage.unpackedSint64Array]) &&
      ((self.unpackedFixed32Array == nil && otherMessage.unpackedFixed32Array == nil) ||
      [self.unpackedFixed32Array isEqualToArray:otherMessage.unpackedFixed32Array]) &&
      ((self.unpackedFixed64Array == nil && otherMessage.unpackedFixed64Array == nil) ||
      [self.unpackedFixed64Array isEqualToArray:otherMessage.unpackedFixed64Array]) &&
      ((self.unpackedSfixed32Array == nil && otherMessage.unpackedSfixed32Array == nil) ||
      [self.unpackedSfixed32Array isEqualToArray:otherMessage.unpackedSfixed32Array]) &&
      ((self.unpackedSfixed64Array == nil && otherMessage.unpackedSfixed64Array == nil) ||
      [self.unpackedSfixed64Array isEqualToArray:otherMessage.unpackedSfixed64Array]) &&
      ((self.unpackedFloatArray == nil && otherMessage.unpackedFloatArray == nil) ||
      [self.unpackedFloatArray isEqualToArray:otherMessage.unpackedFloatArray]) &&
      ((self.unpackedDoubleArray == nil && otherMessage.unpackedDoubleArray == nil) ||
      [self.unpackedDoubleArray isEqualToArray:otherMessage.unpackedDoubleArray]) &&
      ((self.unpackedBoolArray == nil && otherMessage.unpackedBoolArray == nil) ||
      [self.unpackedBoolArray isEqualToArray:otherMessage.unpackedBoolArray]) &&
      ((self.unpackedEnumArray == nil && otherMessage.unpackedEnumArray == nil) ||
      [self.unpackedEnumArray isEqualToArray:otherMessage.unpackedEnumArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  listCount = self.unpackedInt32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedInt32Array int32AtIndex:i];
  }
  listCount = self.unpackedInt64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedInt64Array int64AtIndex:i];
  }
  listCount = self.unpackedUint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedUint32Array uint32AtIndex:i];
  }
  listCount = self.unpackedUint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedUint64Array uint64AtIndex:i];
  }
  listCount = self.unpackedSint32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedSint32Array int32AtIndex:i];
  }
  listCount = self.unpackedSint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedSint64Array int64AtIndex:i];
  }
  listCount = self.unpackedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedFixed32Array uint32AtIndex:i];
  }
  listCount = self.unpackedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedFixed64Array uint64AtIndex:i];
  }
  listCount = self.unpackedSfixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedSfixed32Array int32AtIndex:i];
  }
  listCount = self.unpackedSfixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedSfixed64Array int64AtIndex:i];
  }
  listCount = self.unpackedFloatArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedFloatArray floatAtIndex:i];
  }
  listCount = self.unpackedDoubleArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedDoubleArray doubleAtIndex:i];
  }
  listCount = self.unpackedBoolArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.unpackedBoolArray boolAtIndex:i];
  }
  for (NSNumber* element in self.unpackedEnumArray) {
    hashCode = hashCode * 31 + element.intValue;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestUnpackedTypes_Builder {
  TestUnpackedTypes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestUnpackedTypes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestUnpackedTypes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestUnpackedTypes_Builder alloc] init] mergeFrom:_result];
}

- (TestUnpackedTypes*)defaultMessageInstance {
  return [TestUnpackedTypes defaultInstance];
}

- (TestUnpackedTypes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestUnpackedTypes*)buildPartial {
  TestUnpackedTypes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestUnpackedTypes*)other {
  if (other == [TestUnpackedTypes defaultInstance]) {
    return self;
  }
  if (other.unpackedInt32Array.count > 0) {
    if (_result.unpackedInt32Array == nil) {
      _result.unpackedInt32Array = [other.unpackedInt32Array copy];
    } else {
      [_result.unpackedInt32Array appendArray:other.unpackedInt32Array];
    }
  }
  if (other.unpackedInt64Array.count > 0) {
    if (_result.unpackedInt64Array == nil) {
      _result.unpackedInt64Array = [other.unpackedInt64Array copy];
    } else {
      [_result.unpackedInt64Array appendArray:other.unpackedInt64Array];
    }
  }
  if (other.unpackedUint32Array.count > 0) {
    if (_result.unpackedUint32Array == nil) {
      _result.unpackedUint32Array = [other.unpackedUint32Array copy];
    } else {
      [_result.unpackedUint32Array appendArray:other.unpackedUint32Array];
    }
  }
  if (other.unpackedUint64Array.count > 0) {
    if (_result.unpackedUint64Array == nil) {
      _result.unpackedUint64Array = [other.unpackedUint64Array copy];
    } else {
      [_result.unpackedUint64Array appendArray:other.unpackedUint64Array];
    }
  }
  if (other.unpackedSint32Array.count > 0) {
    if (_result.unpackedSint32Array == nil) {
      _result.unpackedSint32Array = [other.unpackedSint32Array copy];
    } else {
      [_result.unpackedSint32Array appendArray:other.unpackedSint32Array];
    }
  }
  if (other.unpackedSint64Array.count > 0) {
    if (_result.unpackedSint64Array == nil) {
      _result.unpackedSint64Array = [other.unpackedSint64Array copy];
    } else {
      [_result.unpackedSint64Array appendArray:other.unpackedSint64Array];
    }
  }
  if (other.unpackedFixed32Array.count > 0) {
    if (_result.unpackedFixed32Array == nil) {
      _result.unpackedFixed32Array = [other.unpackedFixed32Array copy];
    } else {
      [_result.unpackedFixed32Array appendArray:other.unpackedFixed32Array];
    }
  }
  if (other.unpackedFixed64Array.count > 0) {
    if (_result.unpackedFixed64Array == nil) {
      _result.unpackedFixed64Array = [other.unpackedFixed64Array copy];
    } else {
      [_result.unpackedFixed64Array appendArray:other.unpackedFixed64Array];
    }
  }
  if (other.unpackedSfixed32Array.count > 0) {
    if (_result.unpackedSfixed32Array == nil) {
      _result.unpackedSfixed32Array = [other.unpackedSfixed32Array copy];
    } else {
      [_result.unpackedSfixed32Array appendArray:other.unpackedSfixed32Array];
    }
  }
  if (other.unpackedSfixed64Array.count > 0) {
    if (_result.unpackedSfixed64Array == nil) {
      _result.unpackedSfixed64Array = [other.unpackedSfixed64Array copy];
    } else {
      [_result.unpackedSfixed64Array appendArray:other.unpackedSfixed64Array];
    }
  }
  if (other.unpackedFloatArray.count > 0) {
    if (_result.unpackedFloatArray == nil) {
      _result.unpackedFloatArray = [other.unpackedFloatArray copy];
    } else {
      [_result.unpackedFloatArray appendArray:other.unpackedFloatArray];
    }
  }
  if (other.unpackedDoubleArray.count > 0) {
    if (_result.unpackedDoubleArray == nil) {
      _result.unpackedDoubleArray = [other.unpackedDoubleArray copy];
    } else {
      [_result.unpackedDoubleArray appendArray:other.unpackedDoubleArray];
    }
  }
  if (other.unpackedBoolArray.count > 0) {
    if (_result.unpackedBoolArray == nil) {
      _result.unpackedBoolArray = [other.unpackedBoolArray copy];
    } else {
      [_result.unpackedBoolArray appendArray:other.unpackedBoolArray];
    }
  }
  if (other.unpackedEnumArray.count > 0) {
    if (_result.unpackedEnumArray == nil) {
      _result.unpackedEnumArray = [[NSMutableArray alloc] initWithArray:other.unpackedEnumArray];
    } else {
      [_result.unpackedEnumArray addObjectsFromArray:other.unpackedEnumArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 720: {
        [self addUnpackedInt32:[input readInt32]];
        break;
      }
      case 728: {
        [self addUnpackedInt64:[input readInt64]];
        break;
      }
      case 736: {
        [self addUnpackedUint32:[input readUInt32]];
        break;
      }
      case 744: {
        [self addUnpackedUint64:[input readUInt64]];
        break;
      }
      case 752: {
        [self addUnpackedSint32:[input readSInt32]];
        break;
      }
      case 760: {
        [self addUnpackedSint64:[input readSInt64]];
        break;
      }
      case 773: {
        [self addUnpackedFixed32:[input readFixed32]];
        break;
      }
      case 777: {
        [self addUnpackedFixed64:[input readFixed64]];
        break;
      }
      case 789: {
        [self addUnpackedSfixed32:[input readSFixed32]];
        break;
      }
      case 793: {
        [self addUnpackedSfixed64:[input readSFixed64]];
        break;
      }
      case 805: {
        [self addUnpackedFloat:[input readFloat]];
        break;
      }
      case 809: {
        [self addUnpackedDouble:[input readDouble]];
        break;
      }
      case 816: {
        [self addUnpackedBool:[input readBool]];
        break;
      }
      case 824: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self addUnpackedEnum:value];
        } else {
          [unknownFields mergeVarintField:103 value:value];
        }
        break;
      }
    }
  }
}
- (PBAppendableArray *)unpackedInt32 {
  return _result.unpackedInt32Array;
}
- (int32_t)unpackedInt32AtIndex:(NSUInteger)index {
  return [_result unpackedInt32AtIndex:index];
}
- (instancetype)addUnpackedInt32:(int32_t)value {
  if (_result.unpackedInt32Array == nil) {
    _result.unpackedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.unpackedInt32Array addInt32:value];
  return self;
}
- (instancetype)setUnpackedInt32Array:(NSArray *)array {
  _result.unpackedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setUnpackedInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.unpackedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearUnpackedInt32 {
  _result.unpackedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedInt64 {
  return _result.unpackedInt64Array;
}
- (int64_t)unpackedInt64AtIndex:(NSUInteger)index {
  return [_result unpackedInt64AtIndex:index];
}
- (instancetype)addUnpackedInt64:(int64_t)value {
  if (_result.unpackedInt64Array == nil) {
    _result.unpackedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.unpackedInt64Array addInt64:value];
  return self;
}
- (instancetype)setUnpackedInt64Array:(NSArray *)array {
  _result.unpackedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setUnpackedInt64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.unpackedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearUnpackedInt64 {
  _result.unpackedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedUint32 {
  return _result.unpackedUint32Array;
}
- (uint32_t)unpackedUint32AtIndex:(NSUInteger)index {
  return [_result unpackedUint32AtIndex:index];
}
- (instancetype)addUnpackedUint32:(uint32_t)value {
  if (_result.unpackedUint32Array == nil) {
    _result.unpackedUint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.unpackedUint32Array addUint32:value];
  return self;
}
- (instancetype)setUnpackedUint32Array:(NSArray *)array {
  _result.unpackedUint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setUnpackedUint32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.unpackedUint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearUnpackedUint32 {
  _result.unpackedUint32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedUint64 {
  return _result.unpackedUint64Array;
}
- (uint64_t)unpackedUint64AtIndex:(NSUInteger)index {
  return [_result unpackedUint64AtIndex:index];
}
- (instancetype)addUnpackedUint64:(uint64_t)value {
  if (_result.unpackedUint64Array == nil) {
    _result.unpackedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.unpackedUint64Array addUint64:value];
  return self;
}
- (instancetype)setUnpackedUint64Array:(NSArray *)array {
  _result.unpackedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setUnpackedUint64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.unpackedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearUnpackedUint64 {
  _result.unpackedUint64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSint32 {
  return _result.unpackedSint32Array;
}
- (int32_t)unpackedSint32AtIndex:(NSUInteger)index {
  return [_result unpackedSint32AtIndex:index];
}
- (instancetype)addUnpackedSint32:(int32_t)value {
  if (_result.unpackedSint32Array == nil) {
    _result.unpackedSint32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.unpackedSint32Array addInt32:value];
  return self;
}
- (instancetype)setUnpackedSint32Array:(NSArray *)array {
  _result.unpackedSint32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setUnpackedSint32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.unpackedSint32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearUnpackedSint32 {
  _result.unpackedSint32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSint64 {
  return _result.unpackedSint64Array;
}
- (int64_t)unpackedSint64AtIndex:(NSUInteger)index {
  return [_result unpackedSint64AtIndex:index];
}
- (instancetype)addUnpackedSint64:(int64_t)value {
  if (_result.unpackedSint64Array == nil) {
    _result.unpackedSint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.unpackedSint64Array addInt64:value];
  return self;
}
- (instancetype)setUnpackedSint64Array:(NSArray *)array {
  _result.unpackedSint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setUnpackedSint64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.unpackedSint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearUnpackedSint64 {
  _result.unpackedSint64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFixed32 {
  return _result.unpackedFixed32Array;
}
- (uint32_t)unpackedFixed32AtIndex:(NSUInteger)index {
  return [_result unpackedFixed32AtIndex:index];
}
- (instancetype)addUnpackedFixed32:(uint32_t)value {
  if (_result.unpackedFixed32Array == nil) {
    _result.unpackedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.unpackedFixed32Array addUint32:value];
  return self;
}
- (instancetype)setUnpackedFixed32Array:(NSArray *)array {
  _result.unpackedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setUnpackedFixed32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.unpackedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearUnpackedFixed32 {
  _result.unpackedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFixed64 {
  return _result.unpackedFixed64Array;
}
- (uint64_t)unpackedFixed64AtIndex:(NSUInteger)index {
  return [_result unpackedFixed64AtIndex:index];
}
- (instancetype)addUnpackedFixed64:(uint64_t)value {
  if (_result.unpackedFixed64Array == nil) {
    _result.unpackedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.unpackedFixed64Array addUint64:value];
  return self;
}
- (instancetype)setUnpackedFixed64Array:(NSArray *)array {
  _result.unpackedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setUnpackedFixed64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.unpackedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearUnpackedFixed64 {
  _result.unpackedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSfixed32 {
  return _result.unpackedSfixed32Array;
}
- (int32_t)unpackedSfixed32AtIndex:(NSUInteger)index {
  return [_result unpackedSfixed32AtIndex:index];
}
- (instancetype)addUnpackedSfixed32:(int32_t)value {
  if (_result.unpackedSfixed32Array == nil) {
    _result.unpackedSfixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.unpackedSfixed32Array addInt32:value];
  return self;
}
- (instancetype)setUnpackedSfixed32Array:(NSArray *)array {
  _result.unpackedSfixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setUnpackedSfixed32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.unpackedSfixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearUnpackedSfixed32 {
  _result.unpackedSfixed32Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedSfixed64 {
  return _result.unpackedSfixed64Array;
}
- (int64_t)unpackedSfixed64AtIndex:(NSUInteger)index {
  return [_result unpackedSfixed64AtIndex:index];
}
- (instancetype)addUnpackedSfixed64:(int64_t)value {
  if (_result.unpackedSfixed64Array == nil) {
    _result.unpackedSfixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.unpackedSfixed64Array addInt64:value];
  return self;
}
- (instancetype)setUnpackedSfixed64Array:(NSArray *)array {
  _result.unpackedSfixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setUnpackedSfixed64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.unpackedSfixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearUnpackedSfixed64 {
  _result.unpackedSfixed64Array = nil;
  return self;
}
- (PBAppendableArray *)unpackedFloat {
  return _result.unpackedFloatArray;
}
- (Float32)unpackedFloatAtIndex:(NSUInteger)index {
  return [_result unpackedFloatAtIndex:index];
}
- (instancetype)addUnpackedFloat:(Float32)value {
  if (_result.unpackedFloatArray == nil) {
    _result.unpackedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_result.unpackedFloatArray addFloat:value];
  return self;
}
- (instancetype)setUnpackedFloatArray:(NSArray *)array {
  _result.unpackedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)setUnpackedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  _result.unpackedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)clearUnpackedFloat {
  _result.unpackedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)unpackedDouble {
  return _result.unpackedDoubleArray;
}
- (Float64)unpackedDoubleAtIndex:(NSUInteger)index {
  return [_result unpackedDoubleAtIndex:index];
}
- (instancetype)addUnpackedDouble:(Float64)value {
  if (_result.unpackedDoubleArray == nil) {
    _result.unpackedDoubleArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeDouble];
  }
  [_result.unpackedDoubleArray addDouble:value];
  return self;
}
- (instancetype)setUnpackedDoubleArray:(NSArray *)array {
  _result.unpackedDoubleArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)setUnpackedDoubleValues:(const Float64 *)values count:(NSUInteger)count {
  _result.unpackedDoubleArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeDouble];
  return self;
}
- (instancetype)clearUnpackedDouble {
  _result.unpackedDoubleArray = nil;
  return self;
}
- (PBAppendableArray *)unpackedBool {
  return _result.unpackedBoolArray;
}
- (BOOL)unpackedBoolAtIndex:(NSUInteger)index {
  return [_result unpackedBoolAtIndex:index];
}
- (instancetype)addUnpackedBool:(BOOL)value {
  if (_result.unpackedBoolArray == nil) {
    _result.unpackedBoolArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeBool];
  }
  [_result.unpackedBoolArray addBool:value];
  return self;
}
- (instancetype)setUnpackedBoolArray:(NSArray *)array {
  _result.unpackedBoolArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)setUnpackedBoolValues:(const BOOL *)values count:(NSUInteger)count {
  _result.unpackedBoolArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeBool];
  return self;
}
- (instancetype)clearUnpackedBool {
  _result.unpackedBoolArray = nil;
  return self;
}
- (NSMutableArray *)unpackedEnum {
  return _result.unpackedEnumArray;
}
- (ForeignEnum)unpackedEnumAtIndex:(NSUInteger)index {
  return [_result unpackedEnumAtIndex:index];
}
- (TestUnpackedTypes_Builder *)addUnpackedEnum:(ForeignEnum)value {
  if (_result.unpackedEnumArray == nil) {
    _result.unpackedEnumArray = [NSMutableArray array];
  }
  [_result.unpackedEnumArray addObject:@(value)];
  return self;
}
- (TestUnpackedTypes_Builder *)setUnpackedEnumArray:(NSArray *)array {
  _result.unpackedEnumArray = [NSMutableArray arrayWithArray:array];
  return self;
}
- (TestUnpackedTypes_Builder *)clearUnpackedEnum {
  _result.unpackedEnumArray = nil;
  return self;
}

@end


#pragma mark - TestPackedExtensions

@interface TestPackedExtensions ()


@end

@implementation TestPackedExtensions {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self writeExtensionsToCodedOutputStream:output
                                      from:1
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestPackedExtensions_Builder*)builder {
  return [[TestPackedExtensions_Builder alloc] init];
}
+ (TestPackedExtensions_Builder*)builderWithPrototype:(TestPackedExtensions*)prototype {
  return [[TestPackedExtensions builder] mergeFrom:prototype];
}
- (TestPackedExtensions_Builder*)builder {
  return [TestPackedExtensions builder];
}
- (TestPackedExtensions_Builder*)toBuilder {
  return [TestPackedExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestPackedExtensions class]]) {
    return NO;
  }
  TestPackedExtensions *otherMessage = other;
  return
      [self isEqualExtensionsInOther:otherMessage from:1 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestPackedExtensions_Builder {
  TestPackedExtensions* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestPackedExtensions alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestPackedExtensions alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestPackedExtensions_Builder alloc] init] mergeFrom:_result];
}

- (TestPackedExtensions*)defaultMessageInstance {
  return [TestPackedExtensions defaultInstance];
}

- (TestPackedExtensions*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestPackedExtensions*)buildPartial {
  TestPackedExtensions* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestPackedExtensions*)other {
  if (other == [TestPackedExtensions defaultInstance]) {
    return self;
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - TestDynamicExtensions

BOOL TestDynamicExtensions_DynamicEnumTypeIsValidValue(TestDynamicExtensions_DynamicEnumType value) {
  switch (value) {
    case TestDynamicExtensions_DynamicEnumTypeDYNAMICFOO:
    case TestDynamicExtensions_DynamicEnumTypeDYNAMICBAR:
    case TestDynamicExtensions_DynamicEnumTypeDYNAMICBAZ:
      return YES;
    default:
      return NO;
  }
}

@interface TestDynamicExtensions ()

@property uint32_t scalarExtension;
@property ForeignEnum enumExtension;
@property TestDynamicExtensions_DynamicEnumType dynamicEnumExtension;
@property (strong) ForeignMessage* messageExtension;
@property (strong) TestDynamicExtensions_DynamicMessageType* dynamicMessageExtension;
@property (strong) NSMutableArray * repeatedExtensionArray;
@property (strong) PBAppendableArray * packedExtensionArray;

@end

@implementation TestDynamicExtensions {
  BOOL _hasScalarExtension:1;
  BOOL _hasMessageExtension:1;
  BOOL _hasDynamicMessageExtension:1;
  BOOL _hasEnumExtension:1;
  BOOL _hasDynamicEnumExtension:1;
  NSMutableArray *_repeatedExtensionArray;
  PBAppendableArray *_packedExtensionArray;
  int32_t _packedExtensionCachedSerializedSize;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _scalarExtension = 0;
    _enumExtension = ForeignEnumFOREIGNFOO;
    _dynamicEnumExtension = TestDynamicExtensions_DynamicEnumTypeDYNAMICFOO;
    _messageExtension = [ForeignMessage defaultInstance];
    _dynamicMessageExtension = [TestDynamicExtensions_DynamicMessageType defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasScalarExtension {
  return !!_hasScalarExtension;
}
- (void)setHasScalarExtension:(BOOL)value {
  _hasScalarExtension = !!value;
}
- (BOOL)hasEnumExtension {
  return !!_hasEnumExtension;
}
- (void)setHasEnumExtension:(BOOL)value {
  _hasEnumExtension = !!value;
}
- (BOOL)hasDynamicEnumExtension {
  return !!_hasDynamicEnumExtension;
}
- (void)setHasDynamicEnumExtension:(BOOL)value {
  _hasDynamicEnumExtension = !!value;
}
- (BOOL)hasMessageExtension {
  return !!_hasMessageExtension;
}
- (void)setHasMessageExtension:(BOOL)value {
  _hasMessageExtension = !!value;
}

- (BOOL)hasDynamicMessageExtension {
  return !!_hasDynamicMessageExtension;
}
- (void)setHasDynamicMessageExtension:(BOOL)value {
  _hasDynamicMessageExtension = !!value;
}

@dynamic repeatedExtension;
@dynamic packedExtension;

- (NSArray *)repeatedExtension {
  return _repeatedExtensionArray;
}
- (NSString *)repeatedExtensionAtIndex:(NSUInteger)index {
  return _repeatedExtensionArray[index];
}
- (PBArray *)packedExtension {
  return _packedExtensionArray;
}
- (int32_t)packedExtensionAtIndex:(NSUInteger)index {
  return [_packedExtensionArray int32AtIndex:index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasScalarExtension) {
    [output writeFixed32:2000 value:self.scalarExtension];
  }
  if (self.hasEnumExtension) {
    [output writeEnum:2001 value:self.enumExtension];
  }
  if (self.hasDynamicEnumExtension) {
    [output writeEnum:2002 value:self.dynamicEnumExtension];
  }
  if (self.hasMessageExtension) {
    [output writeMessage:2003 value:self.messageExtension];
  }
  if (self.hasDynamicMessageExtension) {
    [output writeMessage:2004 value:self.dynamicMessageExtension];
  }
  for (NSString * value in self.repeatedExtensionArray) {
    [output writeString:2005 value:value];
  }
  const NSUInteger packedExtensionArrayCount = self.packedExtensionArray.count;
  if (packedExtensionArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.packedExtensionArray.data;
    [output writeRawVarint32:16050];
    [output writeRawVarint32:_packedExtensionCachedSerializedSize];
    for (NSUInteger i = 0; i < packedExtensionArrayCount; ++i) {
      [output writeSInt32NoTag:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasScalarExtension) {
    size_ += computeFixed32Size(2000, self.scalarExtension);
  }
  if (self.hasEnumExtension) {
    size_ += computeEnumSize(2001, self.enumExtension);
  }
  if (self.hasDynamicEnumExtension) {
    size_ += computeEnumSize(2002, self.dynamicEnumExtension);
  }
  if (self.hasMessageExtension) {
    size_ += computeMessageSize(2003, self.messageExtension);
  }
  if (self.hasDynamicMessageExtension) {
    size_ += computeMessageSize(2004, self.dynamicMessageExtension);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedExtensionArray.count;
    for (NSString * element in self.repeatedExtensionArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.packedExtensionArray.count;
    const int32_t *values = (const int32_t *)self.packedExtensionArray.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeSInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    if (count_ > 0) {
      size_ += 2;
      size_ += computeInt32SizeNoTag(dataSize);
    }
    _packedExtensionCachedSerializedSize = dataSize;
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDynamicExtensions_Builder*)builder {
  return [[TestDynamicExtensions_Builder alloc] init];
}
+ (TestDynamicExtensions_Builder*)builderWithPrototype:(TestDynamicExtensions*)prototype {
  return [[TestDynamicExtensions builder] mergeFrom:prototype];
}
- (TestDynamicExtensions_Builder*)builder {
  return [TestDynamicExtensions builder];
}
- (TestDynamicExtensions_Builder*)toBuilder {
  return [TestDynamicExtensions builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasScalarExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"scalarExtension", @(self.scalarExtension)];
  }
  if (self.hasEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enumExtension", @(self.enumExtension)];
  }
  if (self.hasDynamicEnumExtension) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicEnumExtension", @(self.dynamicEnumExtension)];
  }
  if (self.hasMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"messageExtension"];
    [self.messageExtension writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDynamicMessageExtension) {
    [output appendFormat:@"%@%@ {\n", indent, @"dynamicMessageExtension"];
    [self.dynamicMessageExtension writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (NSString * element in self.repeatedExtensionArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedExtension", element];
  }
  listCount = self.packedExtensionArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"packedExtension", @([self.packedExtensionArray int32AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensions class]]) {
    return NO;
  }
  TestDynamicExtensions *otherMessage = other;
  return
      self.hasScalarExtension == otherMessage.hasScalarExtension &&
      (!self.hasScalarExtension || self.scalarExtension == otherMessage.scalarExtension) &&
      self.hasEnumExtension == otherMessage.hasEnumExtension &&
      (!self.hasEnumExtension || self.enumExtension == otherMessage.enumExtension) &&
      self.hasDynamicEnumExtension == otherMessage.hasDynamicEnumExtension &&
      (!self.hasDynamicEnumExtension || self.dynamicEnumExtension == otherMessage.dynamicEnumExtension) &&
      self.hasMessageExtension == otherMessage.hasMessageExtension &&
      (!self.hasMessageExtension || [self.messageExtension isEqual:otherMessage.messageExtension]) &&
      self.hasDynamicMessageExtension == otherMessage.hasDynamicMessageExtension &&
      (!self.hasDynamicMessageExtension || [self.dynamicMessageExtension isEqual:otherMessage.dynamicMessageExtension]) &&
      ((self.repeatedExtensionArray == nil && otherMessage.repeatedExtensionArray == nil) ||
      [self.repeatedExtensionArray isEqualToArray:otherMessage.repeatedExtensionArray]) &&
      ((self.packedExtensionArray == nil && otherMessage.packedExtensionArray == nil) ||
      [self.packedExtensionArray isEqualToArray:otherMessage.packedExtensionArray]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasScalarExtension) {
    hashCode = hashCode * 31 + [@(self.scalarExtension) hash];
  }
  if (self.hasEnumExtension) {
    hashCode = hashCode * 31 + self.enumExtension;
  }
  if (self.hasDynamicEnumExtension) {
    hashCode = hashCode * 31 + self.dynamicEnumExtension;
  }
  if (self.hasMessageExtension) {
    hashCode = hashCode * 31 + [self.messageExtension hash];
  }
  if (self.hasDynamicMessageExtension) {
    hashCode = hashCode * 31 + [self.dynamicMessageExtension hash];
  }
  for (NSString * element in self.repeatedExtensionArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  listCount = self.packedExtensionArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.packedExtensionArray int32AtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDynamicExtensions_Builder {
  TestDynamicExtensions* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDynamicExtensions alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDynamicExtensions alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDynamicExtensions_Builder alloc] init] mergeFrom:_result];
}

- (TestDynamicExtensions*)defaultMessageInstance {
  return [TestDynamicExtensions defaultInstance];
}

- (TestDynamicExtensions*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDynamicExtensions*)buildPartial {
  TestDynamicExtensions* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDynamicExtensions*)other {
  if (other == [TestDynamicExtensions defaultInstance]) {
    return self;
  }
  if (other.hasScalarExtension) {
    [self setScalarExtension:other.scalarExtension];
  }
  if (other.hasEnumExtension) {
    [self setEnumExtension:other.enumExtension];
  }
  if (other.hasDynamicEnumExtension) {
    [self setDynamicEnumExtension:other.dynamicEnumExtension];
  }
  if (other.hasMessageExtension) {
    [self mergeMessageExtension:other.messageExtension];
  }
  if (other.hasDynamicMessageExtension) {
    [self mergeDynamicMessageExtension:other.dynamicMessageExtension];
  }
  if (other.repeatedExtensionArray.count > 0) {
    if (_result.repeatedExtensionArray == nil) {
      _result.repeatedExtensionArray = [[NSMutableArray alloc] initWithArray:other.repeatedExtensionArray];
    } else {
      [_result.repeatedExtensionArray addObjectsFromArray:other.repeatedExtensionArray];
    }
  }
  if (other.packedExtensionArray.count > 0) {
    if (_result.packedExtensionArray == nil) {
      _result.packedExtensionArray = [other.packedExtensionArray copy];
    } else {
      [_result.packedExtensionArray appendArray:other.packedExtensionArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16005: {
        [self setScalarExtension:[input readFixed32]];
        break;
      }
      case 16008: {
        int32_t value = [input readEnum];
        if (ForeignEnumIsValidValue(value)) {
          [self setEnumExtension:value];
        } else {
          [unknownFields mergeVarintField:2001 value:value];
        }
        break;
      }
      case 16016: {
        int32_t value = [input readEnum];
        if (TestDynamicExtensions_DynamicEnumTypeIsValidValue(value)) {
          [self setDynamicEnumExtension:value];
        } else {
          [unknownFields mergeVarintField:2002 value:value];
        }
        break;
      }
      case 16026: {
        ForeignMessage_Builder* subBuilder = [ForeignMessage builder];
        if (self.hasMessageExtension) {
          [subBuilder mergeFrom:self.messageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16034: {
        TestDynamicExtensions_DynamicMessageType_Builder* subBuilder = [TestDynamicExtensions_DynamicMessageType builder];
        if (self.hasDynamicMessageExtension) {
          [subBuilder mergeFrom:self.dynamicMessageExtension];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDynamicMessageExtension:[subBuilder buildPartial]];
        break;
      }
      case 16042: {
        [self addRepeatedExtension:[input readString]];
        break;
      }
      case 16050: {
        int32_t length = [input readRawVarint32];
        int32_t limit = [input pushLimit:length];
        if (_result.packedExtensionArray == nil) {
          _result.packedExtensionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
        }
        while (input.bytesUntilLimit > 0) {
          [_result.packedExtensionArray addInt32:[input readSInt32]];
        }
        [input popLimit:limit];
        break;
      }
    }
  }
}
- (BOOL)hasScalarExtension {
  return _result.hasScalarExtension;
}
- (uint32_t) scalarExtension {
  return _result.scalarExtension;
}
- (instancetype)setScalarExtension:(uint32_t)value {
  _result.hasScalarExtension = YES;
  _result.scalarExtension = value;
  return self;
}
- (instancetype)clearScalarExtension {
  _result.hasScalarExtension = NO;
  _result.scalarExtension = 0;
  return self;
}
- (BOOL)hasEnumExtension {
  return _result.hasEnumExtension;
}
- (ForeignEnum)enumExtension {
  return _result.enumExtension;
}
- (TestDynamicExtensions_Builder*)setEnumExtension:(ForeignEnum)value {
  _result.hasEnumExtension = YES;
  _result.enumExtension = value;
  return self;
}
- (TestDynamicExtensions_Builder*)clearEnumExtension {
  _result.hasEnumExtension = NO;
  _result.enumExtension = ForeignEnumFOREIGNFOO;
  return self;
}
- (BOOL)hasDynamicEnumExtension {
  return _result.hasDynamicEnumExtension;
}
- (TestDynamicExtensions_DynamicEnumType)dynamicEnumExtension {
  return _result.dynamicEnumExtension;
}
- (TestDynamicExtensions_Builder*)setDynamicEnumExtension:(TestDynamicExtensions_DynamicEnumType)value {
  _result.hasDynamicEnumExtension = YES;
  _result.dynamicEnumExtension = value;
  return self;
}
- (TestDynamicExtensions_Builder*)clearDynamicEnumExtension {
  _result.hasDynamicEnumExtension = NO;
  _result.dynamicEnumExtension = TestDynamicExtensions_DynamicEnumTypeDYNAMICFOO;
  return self;
}
- (BOOL)hasMessageExtension {
  return _result.hasMessageExtension;
}
- (ForeignMessage*)messageExtension {
  return _result.messageExtension;
}
- (instancetype)setMessageExtension:(ForeignMessage*)value {
  _result.hasMessageExtension = YES;
  _result.messageExtension = value;
  return self;
}
- (instancetype)setMessageExtensionBuilder:(ForeignMessage_Builder*)builderForValue {
  return [self setMessageExtension:[builderForValue build]];
}
- (instancetype)mergeMessageExtension:(ForeignMessage*)value {
  if (_result.hasMessageExtension &&
      _result.messageExtension != [ForeignMessage defaultInstance]) {
    _result.messageExtension =
      [[[ForeignMessage builderWithPrototype:_result.messageExtension] mergeFrom:value] buildPartial];
  } else {
    _result.messageExtension = value;
  }
  _result.hasMessageExtension = YES;
  return self;
}
- (instancetype)clearMessageExtension {
  _result.hasMessageExtension = NO;
  _result.messageExtension = [ForeignMessage defaultInstance];
  return self;
}
- (BOOL)hasDynamicMessageExtension {
  return _result.hasDynamicMessageExtension;
}
- (TestDynamicExtensions_DynamicMessageType*)dynamicMessageExtension {
  return _result.dynamicMessageExtension;
}
- (instancetype)setDynamicMessageExtension:(TestDynamicExtensions_DynamicMessageType*)value {
  _result.hasDynamicMessageExtension = YES;
  _result.dynamicMessageExtension = value;
  return self;
}
- (instancetype)setDynamicMessageExtensionBuilder:(TestDynamicExtensions_DynamicMessageType_Builder*)builderForValue {
  return [self setDynamicMessageExtension:[builderForValue build]];
}
- (instancetype)mergeDynamicMessageExtension:(TestDynamicExtensions_DynamicMessageType*)value {
  if (_result.hasDynamicMessageExtension &&
      _result.dynamicMessageExtension != [TestDynamicExtensions_DynamicMessageType defaultInstance]) {
    _result.dynamicMessageExtension =
      [[[TestDynamicExtensions_DynamicMessageType builderWithPrototype:_result.dynamicMessageExtension] mergeFrom:value] buildPartial];
  } else {
    _result.dynamicMessageExtension = value;
  }
  _result.hasDynamicMessageExtension = YES;
  return self;
}
- (instancetype)clearDynamicMessageExtension {
  _result.hasDynamicMessageExtension = NO;
  _result.dynamicMessageExtension = [TestDynamicExtensions_DynamicMessageType defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedExtension {
  return _result.repeatedExtensionArray;
}
- (NSString *)repeatedExtensionAtIndex:(NSUInteger)index {
  return [_result repeatedExtensionAtIndex:index];
}
- (instancetype)addRepeatedExtension:(NSString *)value {
  if (_result.repeatedExtensionArray == nil) {
    _result.repeatedExtensionArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedExtensionArray addObject:value];
  return self;
}
- (instancetype)setRepeatedExtensionArray:(NSArray *)array {
  _result.repeatedExtensionArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedExtension {
  _result.repeatedExtensionArray = nil;
  return self;
}
- (PBAppendableArray *)packedExtension {
  return _result.packedExtensionArray;
}
- (int32_t)packedExtensionAtIndex:(NSUInteger)index {
  return [_result packedExtensionAtIndex:index];
}
- (instancetype)addPackedExtension:(int32_t)value {
  if (_result.packedExtensionArray == nil) {
    _result.packedExtensionArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.packedExtensionArray addInt32:value];
  return self;
}
- (instancetype)setPackedExtensionArray:(NSArray *)array {
  _result.packedExtensionArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setPackedExtensionValues:(const int32_t *)values count:(NSUInteger)count {
  _result.packedExtensionArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearPackedExtension {
  _result.packedExtensionArray = nil;
  return self;
}

@end


#pragma mark - TestDynamicExtensions_DynamicMessageType

@interface TestDynamicExtensions_DynamicMessageType ()

@property int32_t dynamicField;

@end

@implementation TestDynamicExtensions_DynamicMessageType {
  BOOL _hasDynamicField:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _dynamicField = 0;
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasDynamicField {
  return !!_hasDynamicField;
}
- (void)setHasDynamicField:(BOOL)value {
  _hasDynamicField = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasDynamicField) {
    [output writeInt32:2100 value:self.dynamicField];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDynamicField) {
    size_ += computeInt32Size(2100, self.dynamicField);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestDynamicExtensions_DynamicMessageType_Builder*)builder {
  return [[TestDynamicExtensions_DynamicMessageType_Builder alloc] init];
}
+ (TestDynamicExtensions_DynamicMessageType_Builder*)builderWithPrototype:(TestDynamicExtensions_DynamicMessageType*)prototype {
  return [[TestDynamicExtensions_DynamicMessageType builder] mergeFrom:prototype];
}
- (TestDynamicExtensions_DynamicMessageType_Builder*)builder {
  return [TestDynamicExtensions_DynamicMessageType builder];
}
- (TestDynamicExtensions_DynamicMessageType_Builder*)toBuilder {
  return [TestDynamicExtensions_DynamicMessageType builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasDynamicField) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dynamicField", @(self.dynamicField)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestDynamicExtensions_DynamicMessageType class]]) {
    return NO;
  }
  TestDynamicExtensions_DynamicMessageType *otherMessage = other;
  return
      self.hasDynamicField == otherMessage.hasDynamicField &&
      (!self.hasDynamicField || self.dynamicField == otherMessage.dynamicField) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasDynamicField) {
    hashCode = hashCode * 31 + [@(self.dynamicField) hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestDynamicExtensions_DynamicMessageType_Builder {
  TestDynamicExtensions_DynamicMessageType* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestDynamicExtensions_DynamicMessageType alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestDynamicExtensions_DynamicMessageType alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestDynamicExtensions_DynamicMessageType_Builder alloc] init] mergeFrom:_result];
}

- (TestDynamicExtensions_DynamicMessageType*)defaultMessageInstance {
  return [TestDynamicExtensions_DynamicMessageType defaultInstance];
}

- (TestDynamicExtensions_DynamicMessageType*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestDynamicExtensions_DynamicMessageType*)buildPartial {
  TestDynamicExtensions_DynamicMessageType* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestDynamicExtensions_DynamicMessageType*)other {
  if (other == [TestDynamicExtensions_DynamicMessageType defaultInstance]) {
    return self;
  }
  if (other.hasDynamicField) {
    [self setDynamicField:other.dynamicField];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 16800: {
        [self setDynamicField:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL)hasDynamicField {
  return _result.hasDynamicField;
}
- (int32_t) dynamicField {
  return _result.dynamicField;
}
- (instancetype)setDynamicField:(int32_t)value {
  _result.hasDynamicField = YES;
  _result.dynamicField = value;
  return self;
}
- (instancetype)clearDynamicField {
  _result.hasDynamicField = NO;
  _result.dynamicField = 0;
  return self;
}

@end


#pragma mark - TestRepeatedScalarDifferentTagSizes

@interface TestRepeatedScalarDifferentTagSizes ()

@property (strong) PBAppendableArray * repeatedFixed32Array;
@property (strong) PBAppendableArray * repeatedInt32Array;
@property (strong) PBAppendableArray * repeatedFixed64Array;
@property (strong) PBAppendableArray * repeatedInt64Array;
@property (strong) PBAppendableArray * repeatedFloatArray;
@property (strong) PBAppendableArray * repeatedUint64Array;

@end

@implementation TestRepeatedScalarDifferentTagSizes {
  PBAppendableArray *_repeatedFloatArray;
  PBAppendableArray *_repeatedInt64Array;
  PBAppendableArray *_repeatedUint64Array;
  PBAppendableArray *_repeatedInt32Array;
  PBAppendableArray *_repeatedFixed64Array;
  PBAppendableArray *_repeatedFixed32Array;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic repeatedFixed32;
@dynamic repeatedInt32;
@dynamic repeatedFixed64;
@dynamic repeatedInt64;
@dynamic repeatedFloat;
@dynamic repeatedUint64;

- (PBArray *)repeatedFixed32 {
  return _repeatedFixed32Array;
}
- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index {
  return [_repeatedFixed32Array uint32AtIndex:index];
}
- (PBArray *)repeatedInt32 {
  return _repeatedInt32Array;
}
- (int32_t)repeatedInt32AtIndex:(NSUInteger)index {
  return [_repeatedInt32Array int32AtIndex:index];
}
- (PBArray *)repeatedFixed64 {
  return _repeatedFixed64Array;
}
- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index {
  return [_repeatedFixed64Array uint64AtIndex:index];
}
- (PBArray *)repeatedInt64 {
  return _repeatedInt64Array;
}
- (int64_t)repeatedInt64AtIndex:(NSUInteger)index {
  return [_repeatedInt64Array int64AtIndex:index];
}
- (PBArray *)repeatedFloat {
  return _repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [_repeatedFloatArray floatAtIndex:index];
}
- (PBArray *)repeatedUint64 {
  return _repeatedUint64Array;
}
- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index {
  return [_repeatedUint64Array uint64AtIndex:index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  const NSUInteger repeatedFixed32ArrayCount = self.repeatedFixed32Array.count;
  if (repeatedFixed32ArrayCount > 0) {
    const uint32_t *values = (const uint32_t *)self.repeatedFixed32Array.data;
    for (NSUInteger i = 0; i < repeatedFixed32ArrayCount; ++i) {
      [output writeFixed32:12 value:values[i]];
    }
  }
  const NSUInteger repeatedInt32ArrayCount = self.repeatedInt32Array.count;
  if (repeatedInt32ArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < repeatedInt32ArrayCount; ++i) {
      [output writeInt32:13 value:values[i]];
    }
  }
  const NSUInteger repeatedFixed64ArrayCount = self.repeatedFixed64Array.count;
  if (repeatedFixed64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedFixed64Array.data;
    for (NSUInteger i = 0; i < repeatedFixed64ArrayCount; ++i) {
      [output writeFixed64:2046 value:values[i]];
    }
  }
  const NSUInteger repeatedInt64ArrayCount = self.repeatedInt64Array.count;
  if (repeatedInt64ArrayCount > 0) {
    const int64_t *values = (const int64_t *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < repeatedInt64ArrayCount; ++i) {
      [output writeInt64:2047 value:values[i]];
    }
  }
  const NSUInteger repeatedFloatArrayCount = self.repeatedFloatArray.count;
  if (repeatedFloatArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.repeatedFloatArray.data;
    for (NSUInteger i = 0; i < repeatedFloatArrayCount; ++i) {
      [output writeFloat:262142 value:values[i]];
    }
  }
  const NSUInteger repeatedUint64ArrayCount = self.repeatedUint64Array.count;
  if (repeatedUint64ArrayCount > 0) {
    const uint64_t *values = (const uint64_t *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < repeatedUint64ArrayCount; ++i) {
      [output writeUInt64:262143 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFixed32Array.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 1 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedInt32Array.count;
    const int32_t *values = (const int32_t *)self.repeatedInt32Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFixed64Array.count;
    dataSize += 8 * count_;
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedInt64Array.count;
    const int64_t *values = (const int64_t *)self.repeatedInt64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 2 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedFloatArray.count;
    dataSize += 4 * count_;
    size_ += dataSize;
    size_ += 3 * count_;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count_ = self.repeatedUint64Array.count;
    const uint64_t *values = (const uint64_t *)self.repeatedUint64Array.data;
    for (NSUInteger i = 0; i < count_; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 3 * count_;
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestRepeatedScalarDifferentTagSizes_Builder*)builder {
  return [[TestRepeatedScalarDifferentTagSizes_Builder alloc] init];
}
+ (TestRepeatedScalarDifferentTagSizes_Builder*)builderWithPrototype:(TestRepeatedScalarDifferentTagSizes*)prototype {
  return [[TestRepeatedScalarDifferentTagSizes builder] mergeFrom:prototype];
}
- (TestRepeatedScalarDifferentTagSizes_Builder*)builder {
  return [TestRepeatedScalarDifferentTagSizes builder];
}
- (TestRepeatedScalarDifferentTagSizes_Builder*)toBuilder {
  return [TestRepeatedScalarDifferentTagSizes builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  listCount = self.repeatedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed32", @([self.repeatedFixed32Array uint32AtIndex:i])];
  }
  listCount = self.repeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt32", @([self.repeatedInt32Array int32AtIndex:i])];
  }
  listCount = self.repeatedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFixed64", @([self.repeatedFixed64Array uint64AtIndex:i])];
  }
  listCount = self.repeatedInt64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedInt64", @([self.repeatedInt64Array int64AtIndex:i])];
  }
  listCount = self.repeatedFloatArray.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedFloat", @([self.repeatedFloatArray floatAtIndex:i])];
  }
  listCount = self.repeatedUint64Array.count;
  for(int i=0; i < listCount; i++){
    [output appendFormat:@"%@%@: %@\n", indent, @"repeatedUint64", @([self.repeatedUint64Array uint64AtIndex:i])];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRepeatedScalarDifferentTagSizes class]]) {
    return NO;
  }
  TestRepeatedScalarDifferentTagSizes *otherMessage = other;
  return
      ((self.repeatedFixed32Array == nil && otherMessage.repeatedFixed32Array == nil) ||
      [self.repeatedFixed32Array isEqualToArray:otherMessage.repeatedFixed32Array]) &&
      ((self.repeatedInt32Array == nil && otherMessage.repeatedInt32Array == nil) ||
      [self.repeatedInt32Array isEqualToArray:otherMessage.repeatedInt32Array]) &&
      ((self.repeatedFixed64Array == nil && otherMessage.repeatedFixed64Array == nil) ||
      [self.repeatedFixed64Array isEqualToArray:otherMessage.repeatedFixed64Array]) &&
      ((self.repeatedInt64Array == nil && otherMessage.repeatedInt64Array == nil) ||
      [self.repeatedInt64Array isEqualToArray:otherMessage.repeatedInt64Array]) &&
      ((self.repeatedFloatArray == nil && otherMessage.repeatedFloatArray == nil) ||
      [self.repeatedFloatArray isEqualToArray:otherMessage.repeatedFloatArray]) &&
      ((self.repeatedUint64Array == nil && otherMessage.repeatedUint64Array == nil) ||
      [self.repeatedUint64Array isEqualToArray:otherMessage.repeatedUint64Array]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  listCount = self.repeatedFixed32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFixed32Array uint32AtIndex:i];
  }
  listCount = self.repeatedInt32Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedInt32Array int32AtIndex:i];
  }
  listCount = self.repeatedFixed64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFixed64Array uint64AtIndex:i];
  }
  listCount = self.repeatedInt64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedInt64Array int64AtIndex:i];
  }
  listCount = self.repeatedFloatArray.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedFloatArray floatAtIndex:i];
  }
  listCount = self.repeatedUint64Array.count;
  for(int i=0; i < listCount; i++){
    hashCode = hashCode * 31 + [self.repeatedUint64Array uint64AtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestRepeatedScalarDifferentTagSizes_Builder {
  TestRepeatedScalarDifferentTagSizes* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestRepeatedScalarDifferentTagSizes alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestRepeatedScalarDifferentTagSizes_Builder alloc] init] mergeFrom:_result];
}

- (TestRepeatedScalarDifferentTagSizes*)defaultMessageInstance {
  return [TestRepeatedScalarDifferentTagSizes defaultInstance];
}

- (TestRepeatedScalarDifferentTagSizes*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRepeatedScalarDifferentTagSizes*)buildPartial {
  TestRepeatedScalarDifferentTagSizes* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestRepeatedScalarDifferentTagSizes*)other {
  if (other == [TestRepeatedScalarDifferentTagSizes defaultInstance]) {
    return self;
  }
  if (other.repeatedFixed32Array.count > 0) {
    if (_result.repeatedFixed32Array == nil) {
      _result.repeatedFixed32Array = [other.repeatedFixed32Array copy];
    } else {
      [_result.repeatedFixed32Array appendArray:other.repeatedFixed32Array];
    }
  }
  if (other.repeatedInt32Array.count > 0) {
    if (_result.repeatedInt32Array == nil) {
      _result.repeatedInt32Array = [other.repeatedInt32Array copy];
    } else {
      [_result.repeatedInt32Array appendArray:other.repeatedInt32Array];
    }
  }
  if (other.repeatedFixed64Array.count > 0) {
    if (_result.repeatedFixed64Array == nil) {
      _result.repeatedFixed64Array = [other.repeatedFixed64Array copy];
    } else {
      [_result.repeatedFixed64Array appendArray:other.repeatedFixed64Array];
    }
  }
  if (other.repeatedInt64Array.count > 0) {
    if (_result.repeatedInt64Array == nil) {
      _result.repeatedInt64Array = [other.repeatedInt64Array copy];
    } else {
      [_result.repeatedInt64Array appendArray:other.repeatedInt64Array];
    }
  }
  if (other.repeatedFloatArray.count > 0) {
    if (_result.repeatedFloatArray == nil) {
      _result.repeatedFloatArray = [other.repeatedFloatArray copy];
    } else {
      [_result.repeatedFloatArray appendArray:other.repeatedFloatArray];
    }
  }
  if (other.repeatedUint64Array.count > 0) {
    if (_result.repeatedUint64Array == nil) {
      _result.repeatedUint64Array = [other.repeatedUint64Array copy];
    } else {
      [_result.repeatedUint64Array appendArray:other.repeatedUint64Array];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 101: {
        [self addRepeatedFixed32:[input readFixed32]];
        break;
      }
      case 104: {
        [self addRepeatedInt32:[input readInt32]];
        break;
      }
      case 16369: {
        [self addRepeatedFixed64:[input readFixed64]];
        break;
      }
      case 16376: {
        [self addRepeatedInt64:[input readInt64]];
        break;
      }
      case 2097141: {
        [self addRepeatedFloat:[input readFloat]];
        break;
      }
      case 2097144: {
        [self addRepeatedUint64:[input readUInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)repeatedFixed32 {
  return _result.repeatedFixed32Array;
}
- (uint32_t)repeatedFixed32AtIndex:(NSUInteger)index {
  return [_result repeatedFixed32AtIndex:index];
}
- (instancetype)addRepeatedFixed32:(uint32_t)value {
  if (_result.repeatedFixed32Array == nil) {
    _result.repeatedFixed32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [_result.repeatedFixed32Array addUint32:value];
  return self;
}
- (instancetype)setRepeatedFixed32Array:(NSArray *)array {
  _result.repeatedFixed32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)setRepeatedFixed32Values:(const uint32_t *)values count:(NSUInteger)count {
  _result.repeatedFixed32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (instancetype)clearRepeatedFixed32 {
  _result.repeatedFixed32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt32 {
  return _result.repeatedInt32Array;
}
- (int32_t)repeatedInt32AtIndex:(NSUInteger)index {
  return [_result repeatedInt32AtIndex:index];
}
- (instancetype)addRepeatedInt32:(int32_t)value {
  if (_result.repeatedInt32Array == nil) {
    _result.repeatedInt32Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [_result.repeatedInt32Array addInt32:value];
  return self;
}
- (instancetype)setRepeatedInt32Array:(NSArray *)array {
  _result.repeatedInt32Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)setRepeatedInt32Values:(const int32_t *)values count:(NSUInteger)count {
  _result.repeatedInt32Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (instancetype)clearRepeatedInt32 {
  _result.repeatedInt32Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFixed64 {
  return _result.repeatedFixed64Array;
}
- (uint64_t)repeatedFixed64AtIndex:(NSUInteger)index {
  return [_result repeatedFixed64AtIndex:index];
}
- (instancetype)addRepeatedFixed64:(uint64_t)value {
  if (_result.repeatedFixed64Array == nil) {
    _result.repeatedFixed64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.repeatedFixed64Array addUint64:value];
  return self;
}
- (instancetype)setRepeatedFixed64Array:(NSArray *)array {
  _result.repeatedFixed64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setRepeatedFixed64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.repeatedFixed64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearRepeatedFixed64 {
  _result.repeatedFixed64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedInt64 {
  return _result.repeatedInt64Array;
}
- (int64_t)repeatedInt64AtIndex:(NSUInteger)index {
  return [_result repeatedInt64AtIndex:index];
}
- (instancetype)addRepeatedInt64:(int64_t)value {
  if (_result.repeatedInt64Array == nil) {
    _result.repeatedInt64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [_result.repeatedInt64Array addInt64:value];
  return self;
}
- (instancetype)setRepeatedInt64Array:(NSArray *)array {
  _result.repeatedInt64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)setRepeatedInt64Values:(const int64_t *)values count:(NSUInteger)count {
  _result.repeatedInt64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (instancetype)clearRepeatedInt64 {
  _result.repeatedInt64Array = nil;
  return self;
}
- (PBAppendableArray *)repeatedFloat {
  return _result.repeatedFloatArray;
}
- (Float32)repeatedFloatAtIndex:(NSUInteger)index {
  return [_result repeatedFloatAtIndex:index];
}
- (instancetype)addRepeatedFloat:(Float32)value {
  if (_result.repeatedFloatArray == nil) {
    _result.repeatedFloatArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [_result.repeatedFloatArray addFloat:value];
  return self;
}
- (instancetype)setRepeatedFloatArray:(NSArray *)array {
  _result.repeatedFloatArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)setRepeatedFloatValues:(const Float32 *)values count:(NSUInteger)count {
  _result.repeatedFloatArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (instancetype)clearRepeatedFloat {
  _result.repeatedFloatArray = nil;
  return self;
}
- (PBAppendableArray *)repeatedUint64 {
  return _result.repeatedUint64Array;
}
- (uint64_t)repeatedUint64AtIndex:(NSUInteger)index {
  return [_result repeatedUint64AtIndex:index];
}
- (instancetype)addRepeatedUint64:(uint64_t)value {
  if (_result.repeatedUint64Array == nil) {
    _result.repeatedUint64Array = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [_result.repeatedUint64Array addUint64:value];
  return self;
}
- (instancetype)setRepeatedUint64Array:(NSArray *)array {
  _result.repeatedUint64Array = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)setRepeatedUint64Values:(const uint64_t *)values count:(NSUInteger)count {
  _result.repeatedUint64Array = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (instancetype)clearRepeatedUint64 {
  _result.repeatedUint64Array = nil;
  return self;
}

@end


#pragma mark - TestParsingMerge

@interface TestParsingMerge ()

@property (strong) TestAllTypes* requiredAllTypes;
@property (strong) TestAllTypes* optionalAllTypes;
@property (strong) NSMutableArray *repeatedAllTypesArray;
@property (strong) TestParsingMerge_OptionalGroup* OptionalGroup;
@property (strong) NSMutableArray *RepeatedGroupArray;

@end

@implementation TestParsingMerge {
  BOOL _hasOptionalGroup:1;
  BOOL _hasRequiredAllTypes:1;
  BOOL _hasOptionalAllTypes:1;
  NSMutableArray *_RepeatedGroupArray;
  NSMutableArray *_repeatedAllTypesArray;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _requiredAllTypes = [TestAllTypes defaultInstance];
    _optionalAllTypes = [TestAllTypes defaultInstance];
    _OptionalGroup = [TestParsingMerge_OptionalGroup defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasRequiredAllTypes {
  return !!_hasRequiredAllTypes;
}
- (void)setHasRequiredAllTypes:(BOOL)value {
  _hasRequiredAllTypes = !!value;
}

- (BOOL)hasOptionalAllTypes {
  return !!_hasOptionalAllTypes;
}
- (void)setHasOptionalAllTypes:(BOOL)value {
  _hasOptionalAllTypes = !!value;
}

@dynamic repeatedAllTypes;
- (BOOL)hasOptionalGroup {
  return !!_hasOptionalGroup;
}
- (void)setHasOptionalGroup:(BOOL)value {
  _hasOptionalGroup = !!value;
}

@dynamic RepeatedGroup;

+ (PBExtensionField *)optionalExt {
  return TestParsingMerge_optionalExt;
}
+ (PBExtensionField *)repeatedExt {
  return TestParsingMerge_repeatedExt;
}

- (NSArray *)repeatedAllTypes {
  return _repeatedAllTypesArray;
}
- (TestAllTypes*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return _repeatedAllTypesArray[index];
}
- (NSArray *)RepeatedGroup {
  return _RepeatedGroupArray;
}
- (TestParsingMerge_RepeatedGroup*)RepeatedGroupAtIndex:(NSUInteger)index {
  return _RepeatedGroupArray[index];
}

- (BOOL)isInitialized {
  if (!self.hasRequiredAllTypes) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasRequiredAllTypes) {
    [output writeMessage:1 value:self.requiredAllTypes];
  }
  if (self.hasOptionalAllTypes) {
    [output writeMessage:2 value:self.optionalAllTypes];
  }
  for (TestAllTypes *element in self.repeatedAllTypesArray) {
    [output writeMessage:3 value:element];
  }
  if (self.hasOptionalGroup) {
    [output writeGroup:10 value:self.OptionalGroup];
  }
  for (TestParsingMerge_RepeatedGroup *element in self.RepeatedGroupArray) {
    [output writeGroup:20 value:element];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:1000
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRequiredAllTypes) {
    size_ += computeMessageSize(1, self.requiredAllTypes);
  }
  if (self.hasOptionalAllTypes) {
    size_ += computeMessageSize(2, self.optionalAllTypes);
  }
  for (TestAllTypes *element in self.repeatedAllTypesArray) {
    size_ += computeMessageSize(3, element);
  }
  if (self.hasOptionalGroup) {
    size_ += computeGroupSize(10, self.OptionalGroup);
  }
  for (TestParsingMerge_RepeatedGroup *element in self.RepeatedGroupArray) {
    size_ += computeGroupSize(20, element);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_Builder*)builder {
  return [[TestParsingMerge_Builder alloc] init];
}
+ (TestParsingMerge_Builder*)builderWithPrototype:(TestParsingMerge*)prototype {
  return [[TestParsingMerge builder] mergeFrom:prototype];
}
- (TestParsingMerge_Builder*)builder {
  return [TestParsingMerge builder];
}
- (TestParsingMerge_Builder*)toBuilder {
  return [TestParsingMerge builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasRequiredAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"requiredAllTypes"];
    [self.requiredAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalAllTypes"];
    [self.optionalAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes* element in self.repeatedAllTypesArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedAllTypes"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOptionalGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"OptionalGroup"];
    [self.OptionalGroup writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestParsingMerge_RepeatedGroup* element in self.RepeatedGroupArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"RepeatedGroup"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:1000
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge class]]) {
    return NO;
  }
  TestParsingMerge *otherMessage = other;
  return
      self.hasRequiredAllTypes == otherMessage.hasRequiredAllTypes &&
      (!self.hasRequiredAllTypes || [self.requiredAllTypes isEqual:otherMessage.requiredAllTypes]) &&
      self.hasOptionalAllTypes == otherMessage.hasOptionalAllTypes &&
      (!self.hasOptionalAllTypes || [self.optionalAllTypes isEqual:otherMessage.optionalAllTypes]) &&
      ((self.repeatedAllTypesArray == nil && otherMessage.repeatedAllTypesArray == nil) ||
      [self.repeatedAllTypesArray isEqualToArray:otherMessage.repeatedAllTypesArray]) &&
      self.hasOptionalGroup == otherMessage.hasOptionalGroup &&
      (!self.hasOptionalGroup || [self.OptionalGroup isEqual:otherMessage.OptionalGroup]) &&
      ((self.RepeatedGroupArray == nil && otherMessage.RepeatedGroupArray == nil) ||
      [self.RepeatedGroupArray isEqualToArray:otherMessage.RepeatedGroupArray]) &&
      [self isEqualExtensionsInOther:otherMessage from:1000 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasRequiredAllTypes) {
    hashCode = hashCode * 31 + [self.requiredAllTypes hash];
  }
  if (self.hasOptionalAllTypes) {
    hashCode = hashCode * 31 + [self.optionalAllTypes hash];
  }
  for (TestAllTypes* element in self.repeatedAllTypesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasOptionalGroup) {
    hashCode = hashCode * 31 + [self.OptionalGroup hash];
  }
  for (TestParsingMerge_RepeatedGroup* element in self.RepeatedGroupArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:1000 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_Builder {
  TestParsingMerge* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge alloc] init];
  return self;
}

- (PBExtendableMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge*)defaultMessageInstance {
  return [TestParsingMerge defaultInstance];
}

- (TestParsingMerge*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge*)buildPartial {
  TestParsingMerge* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge*)other {
  if (other == [TestParsingMerge defaultInstance]) {
    return self;
  }
  if (other.hasRequiredAllTypes) {
    [self mergeRequiredAllTypes:other.requiredAllTypes];
  }
  if (other.hasOptionalAllTypes) {
    [self mergeOptionalAllTypes:other.optionalAllTypes];
  }
  if (other.repeatedAllTypesArray.count > 0) {
    if (_result.repeatedAllTypesArray == nil) {
      _result.repeatedAllTypesArray = [[NSMutableArray alloc] initWithArray:other.repeatedAllTypesArray];
    } else {
      [_result.repeatedAllTypesArray addObjectsFromArray:other.repeatedAllTypesArray];
    }
  }
  if (other.hasOptionalGroup) {
    [self mergeOptionalGroup:other.OptionalGroup];
  }
  if (other.RepeatedGroupArray.count > 0) {
    if (_result.RepeatedGroupArray == nil) {
      _result.RepeatedGroupArray = [[NSMutableArray alloc] initWithArray:other.RepeatedGroupArray];
    } else {
      [_result.RepeatedGroupArray addObjectsFromArray:other.RepeatedGroupArray];
    }
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasRequiredAllTypes) {
          [subBuilder mergeFrom:self.requiredAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequiredAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasOptionalAllTypes) {
          [subBuilder mergeFrom:self.optionalAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedAllTypes:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMerge_OptionalGroup_Builder* subBuilder = [TestParsingMerge_OptionalGroup builder];
        if (self.hasOptionalGroup) {
          [subBuilder mergeFrom:self.OptionalGroup];
        }
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroup:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMerge_RepeatedGroup_Builder* subBuilder = [TestParsingMerge_RepeatedGroup builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addRepeatedGroup:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasRequiredAllTypes {
  return _result.hasRequiredAllTypes;
}
- (TestAllTypes*)requiredAllTypes {
  return _result.requiredAllTypes;
}
- (instancetype)setRequiredAllTypes:(TestAllTypes*)value {
  _result.hasRequiredAllTypes = YES;
  _result.requiredAllTypes = value;
  return self;
}
- (instancetype)setRequiredAllTypesBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setRequiredAllTypes:[builderForValue build]];
}
- (instancetype)mergeRequiredAllTypes:(TestAllTypes*)value {
  if (_result.hasRequiredAllTypes &&
      _result.requiredAllTypes != [TestAllTypes defaultInstance]) {
    _result.requiredAllTypes =
      [[[TestAllTypes builderWithPrototype:_result.requiredAllTypes] mergeFrom:value] buildPartial];
  } else {
    _result.requiredAllTypes = value;
  }
  _result.hasRequiredAllTypes = YES;
  return self;
}
- (instancetype)clearRequiredAllTypes {
  _result.hasRequiredAllTypes = NO;
  _result.requiredAllTypes = [TestAllTypes defaultInstance];
  return self;
}
- (BOOL)hasOptionalAllTypes {
  return _result.hasOptionalAllTypes;
}
- (TestAllTypes*)optionalAllTypes {
  return _result.optionalAllTypes;
}
- (instancetype)setOptionalAllTypes:(TestAllTypes*)value {
  _result.hasOptionalAllTypes = YES;
  _result.optionalAllTypes = value;
  return self;
}
- (instancetype)setOptionalAllTypesBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setOptionalAllTypes:[builderForValue build]];
}
- (instancetype)mergeOptionalAllTypes:(TestAllTypes*)value {
  if (_result.hasOptionalAllTypes &&
      _result.optionalAllTypes != [TestAllTypes defaultInstance]) {
    _result.optionalAllTypes =
      [[[TestAllTypes builderWithPrototype:_result.optionalAllTypes] mergeFrom:value] buildPartial];
  } else {
    _result.optionalAllTypes = value;
  }
  _result.hasOptionalAllTypes = YES;
  return self;
}
- (instancetype)clearOptionalAllTypes {
  _result.hasOptionalAllTypes = NO;
  _result.optionalAllTypes = [TestAllTypes defaultInstance];
  return self;
}
- (NSMutableArray *)repeatedAllTypes {
  return _result.repeatedAllTypesArray;
}
- (TestAllTypes*)repeatedAllTypesAtIndex:(NSUInteger)index {
  return [_result repeatedAllTypesAtIndex:index];
}
- (instancetype)addRepeatedAllTypes:(TestAllTypes*)value {
  if (_result.repeatedAllTypesArray == nil) {
    _result.repeatedAllTypesArray = [[NSMutableArray alloc]init];
  }
  [_result.repeatedAllTypesArray addObject:value];
  return self;
}
- (instancetype)setRepeatedAllTypesArray:(NSArray *)array {
  _result.repeatedAllTypesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedAllTypes {
  _result.repeatedAllTypesArray = nil;
  return self;
}
- (BOOL)hasOptionalGroup {
  return _result.hasOptionalGroup;
}
- (TestParsingMerge_OptionalGroup*)OptionalGroup {
  return _result.OptionalGroup;
}
- (instancetype)setOptionalGroup:(TestParsingMerge_OptionalGroup*)value {
  _result.hasOptionalGroup = YES;
  _result.OptionalGroup = value;
  return self;
}
- (instancetype)setOptionalGroupBuilder:(TestParsingMerge_OptionalGroup_Builder*)builderForValue {
  return [self setOptionalGroup:[builderForValue build]];
}
- (instancetype)mergeOptionalGroup:(TestParsingMerge_OptionalGroup*)value {
  if (_result.hasOptionalGroup &&
      _result.OptionalGroup != [TestParsingMerge_OptionalGroup defaultInstance]) {
    _result.OptionalGroup =
      [[[TestParsingMerge_OptionalGroup builderWithPrototype:_result.OptionalGroup] mergeFrom:value] buildPartial];
  } else {
    _result.OptionalGroup = value;
  }
  _result.hasOptionalGroup = YES;
  return self;
}
- (instancetype)clearOptionalGroup {
  _result.hasOptionalGroup = NO;
  _result.OptionalGroup = [TestParsingMerge_OptionalGroup defaultInstance];
  return self;
}
- (NSMutableArray *)RepeatedGroup {
  return _result.RepeatedGroupArray;
}
- (TestParsingMerge_RepeatedGroup*)RepeatedGroupAtIndex:(NSUInteger)index {
  return [_result RepeatedGroupAtIndex:index];
}
- (instancetype)addRepeatedGroup:(TestParsingMerge_RepeatedGroup*)value {
  if (_result.RepeatedGroupArray == nil) {
    _result.RepeatedGroupArray = [[NSMutableArray alloc]init];
  }
  [_result.RepeatedGroupArray addObject:value];
  return self;
}
- (instancetype)setRepeatedGroupArray:(NSArray *)array {
  _result.RepeatedGroupArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearRepeatedGroup {
  _result.RepeatedGroupArray = nil;
  return self;
}

@end


#pragma mark - TestParsingMerge_RepeatedFieldsGenerator

@interface TestParsingMerge_RepeatedFieldsGenerator ()

@property (strong) NSMutableArray *field1Array;
@property (strong) NSMutableArray *field2Array;
@property (strong) NSMutableArray *field3Array;
@property (strong) NSMutableArray *Group1Array;
@property (strong) NSMutableArray *Group2Array;
@property (strong) NSMutableArray *ext1Array;
@property (strong) NSMutableArray *ext2Array;

@end

@implementation TestParsingMerge_RepeatedFieldsGenerator {
  NSMutableArray *_Group1Array;
  NSMutableArray *_Group2Array;
  NSMutableArray *_field1Array;
  NSMutableArray *_field2Array;
  NSMutableArray *_field3Array;
  NSMutableArray *_ext1Array;
  NSMutableArray *_ext2Array;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

@dynamic field1;
@dynamic field2;
@dynamic field3;
@dynamic Group1;
@dynamic Group2;
@dynamic ext1;
@dynamic ext2;

- (NSArray *)field1 {
  return _field1Array;
}
- (TestAllTypes*)field1AtIndex:(NSUInteger)index {
  return _field1Array[index];
}
- (NSArray *)field2 {
  return _field2Array;
}
- (TestAllTypes*)field2AtIndex:(NSUInteger)index {
  return _field2Array[index];
}
- (NSArray *)field3 {
  return _field3Array;
}
- (TestAllTypes*)field3AtIndex:(NSUInteger)index {
  return _field3Array[index];
}
- (NSArray *)Group1 {
  return _Group1Array;
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group1*)Group1AtIndex:(NSUInteger)index {
  return _Group1Array[index];
}
- (NSArray *)Group2 {
  return _Group2Array;
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group2*)Group2AtIndex:(NSUInteger)index {
  return _Group2Array[index];
}
- (NSArray *)ext1 {
  return _ext1Array;
}
- (TestAllTypes*)ext1AtIndex:(NSUInteger)index {
  return _ext1Array[index];
}
- (NSArray *)ext2 {
  return _ext2Array;
}
- (TestAllTypes*)ext2AtIndex:(NSUInteger)index {
  return _ext2Array[index];
}

- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  for (TestAllTypes *element in self.field1Array) {
    [output writeMessage:1 value:element];
  }
  for (TestAllTypes *element in self.field2Array) {
    [output writeMessage:2 value:element];
  }
  for (TestAllTypes *element in self.field3Array) {
    [output writeMessage:3 value:element];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group1 *element in self.Group1Array) {
    [output writeGroup:10 value:element];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group2 *element in self.Group2Array) {
    [output writeGroup:20 value:element];
  }
  for (TestAllTypes *element in self.ext1Array) {
    [output writeMessage:1000 value:element];
  }
  for (TestAllTypes *element in self.ext2Array) {
    [output writeMessage:1001 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (TestAllTypes *element in self.field1Array) {
    size_ += computeMessageSize(1, element);
  }
  for (TestAllTypes *element in self.field2Array) {
    size_ += computeMessageSize(2, element);
  }
  for (TestAllTypes *element in self.field3Array) {
    size_ += computeMessageSize(3, element);
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group1 *element in self.Group1Array) {
    size_ += computeGroupSize(10, element);
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group2 *element in self.Group2Array) {
    size_ += computeGroupSize(20, element);
  }
  for (TestAllTypes *element in self.ext1Array) {
    size_ += computeMessageSize(1000, element);
  }
  for (TestAllTypes *element in self.ext2Array) {
    size_ += computeMessageSize(1001, element);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_RepeatedFieldsGenerator_Builder*)builder {
  return [[TestParsingMerge_RepeatedFieldsGenerator_Builder alloc] init];
}
+ (TestParsingMerge_RepeatedFieldsGenerator_Builder*)builderWithPrototype:(TestParsingMerge_RepeatedFieldsGenerator*)prototype {
  return [[TestParsingMerge_RepeatedFieldsGenerator builder] mergeFrom:prototype];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Builder*)builder {
  return [TestParsingMerge_RepeatedFieldsGenerator builder];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Builder*)toBuilder {
  return [TestParsingMerge_RepeatedFieldsGenerator builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  for (TestAllTypes* element in self.field1Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes* element in self.field2Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"field2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes* element in self.field3Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"field3"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group1* element in self.Group1Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"Group1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group2* element in self.Group2Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"Group2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes* element in self.ext1Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext1"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (TestAllTypes* element in self.ext2Array) {
    [output appendFormat:@"%@%@ {\n", indent, @"ext2"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge_RepeatedFieldsGenerator class]]) {
    return NO;
  }
  TestParsingMerge_RepeatedFieldsGenerator *otherMessage = other;
  return
      ((self.field1Array == nil && otherMessage.field1Array == nil) ||
      [self.field1Array isEqualToArray:otherMessage.field1Array]) &&
      ((self.field2Array == nil && otherMessage.field2Array == nil) ||
      [self.field2Array isEqualToArray:otherMessage.field2Array]) &&
      ((self.field3Array == nil && otherMessage.field3Array == nil) ||
      [self.field3Array isEqualToArray:otherMessage.field3Array]) &&
      ((self.Group1Array == nil && otherMessage.Group1Array == nil) ||
      [self.Group1Array isEqualToArray:otherMessage.Group1Array]) &&
      ((self.Group2Array == nil && otherMessage.Group2Array == nil) ||
      [self.Group2Array isEqualToArray:otherMessage.Group2Array]) &&
      ((self.ext1Array == nil && otherMessage.ext1Array == nil) ||
      [self.ext1Array isEqualToArray:otherMessage.ext1Array]) &&
      ((self.ext2Array == nil && otherMessage.ext2Array == nil) ||
      [self.ext2Array isEqualToArray:otherMessage.ext2Array]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  for (TestAllTypes* element in self.field1Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes* element in self.field2Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes* element in self.field3Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group1* element in self.Group1Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestParsingMerge_RepeatedFieldsGenerator_Group2* element in self.Group2Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes* element in self.ext1Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (TestAllTypes* element in self.ext2Array) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_RepeatedFieldsGenerator_Builder {
  TestParsingMerge_RepeatedFieldsGenerator* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge_RepeatedFieldsGenerator alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge_RepeatedFieldsGenerator alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_RepeatedFieldsGenerator_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge_RepeatedFieldsGenerator*)defaultMessageInstance {
  return [TestParsingMerge_RepeatedFieldsGenerator defaultInstance];
}

- (TestParsingMerge_RepeatedFieldsGenerator*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge_RepeatedFieldsGenerator*)buildPartial {
  TestParsingMerge_RepeatedFieldsGenerator* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge_RepeatedFieldsGenerator*)other {
  if (other == [TestParsingMerge_RepeatedFieldsGenerator defaultInstance]) {
    return self;
  }
  if (other.field1Array.count > 0) {
    if (_result.field1Array == nil) {
      _result.field1Array = [[NSMutableArray alloc] initWithArray:other.field1Array];
    } else {
      [_result.field1Array addObjectsFromArray:other.field1Array];
    }
  }
  if (other.field2Array.count > 0) {
    if (_result.field2Array == nil) {
      _result.field2Array = [[NSMutableArray alloc] initWithArray:other.field2Array];
    } else {
      [_result.field2Array addObjectsFromArray:other.field2Array];
    }
  }
  if (other.field3Array.count > 0) {
    if (_result.field3Array == nil) {
      _result.field3Array = [[NSMutableArray alloc] initWithArray:other.field3Array];
    } else {
      [_result.field3Array addObjectsFromArray:other.field3Array];
    }
  }
  if (other.Group1Array.count > 0) {
    if (_result.Group1Array == nil) {
      _result.Group1Array = [[NSMutableArray alloc] initWithArray:other.Group1Array];
    } else {
      [_result.Group1Array addObjectsFromArray:other.Group1Array];
    }
  }
  if (other.Group2Array.count > 0) {
    if (_result.Group2Array == nil) {
      _result.Group2Array = [[NSMutableArray alloc] initWithArray:other.Group2Array];
    } else {
      [_result.Group2Array addObjectsFromArray:other.Group2Array];
    }
  }
  if (other.ext1Array.count > 0) {
    if (_result.ext1Array == nil) {
      _result.ext1Array = [[NSMutableArray alloc] initWithArray:other.ext1Array];
    } else {
      [_result.ext1Array addObjectsFromArray:other.ext1Array];
    }
  }
  if (other.ext2Array.count > 0) {
    if (_result.ext2Array == nil) {
      _result.ext2Array = [[NSMutableArray alloc] initWithArray:other.ext2Array];
    } else {
      [_result.ext2Array addObjectsFromArray:other.ext2Array];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField1:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField2:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addField3:[subBuilder buildPartial]];
        break;
      }
      case 83: {
        TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder* subBuilder = [TestParsingMerge_RepeatedFieldsGenerator_Group1 builder];
        [input readGroup:10 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup1:[subBuilder buildPartial]];
        break;
      }
      case 163: {
        TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder* subBuilder = [TestParsingMerge_RepeatedFieldsGenerator_Group2 builder];
        [input readGroup:20 builder:subBuilder extensionRegistry:extensionRegistry];
        [self addGroup2:[subBuilder buildPartial]];
        break;
      }
      case 8002: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt1:[subBuilder buildPartial]];
        break;
      }
      case 8010: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExt2:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)field1 {
  return _result.field1Array;
}
- (TestAllTypes*)field1AtIndex:(NSUInteger)index {
  return [_result field1AtIndex:index];
}
- (instancetype)addField1:(TestAllTypes*)value {
  if (_result.field1Array == nil) {
    _result.field1Array = [[NSMutableArray alloc]init];
  }
  [_result.field1Array addObject:value];
  return self;
}
- (instancetype)setField1Array:(NSArray *)array {
  _result.field1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearField1 {
  _result.field1Array = nil;
  return self;
}
- (NSMutableArray *)field2 {
  return _result.field2Array;
}
- (TestAllTypes*)field2AtIndex:(NSUInteger)index {
  return [_result field2AtIndex:index];
}
- (instancetype)addField2:(TestAllTypes*)value {
  if (_result.field2Array == nil) {
    _result.field2Array = [[NSMutableArray alloc]init];
  }
  [_result.field2Array addObject:value];
  return self;
}
- (instancetype)setField2Array:(NSArray *)array {
  _result.field2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearField2 {
  _result.field2Array = nil;
  return self;
}
- (NSMutableArray *)field3 {
  return _result.field3Array;
}
- (TestAllTypes*)field3AtIndex:(NSUInteger)index {
  return [_result field3AtIndex:index];
}
- (instancetype)addField3:(TestAllTypes*)value {
  if (_result.field3Array == nil) {
    _result.field3Array = [[NSMutableArray alloc]init];
  }
  [_result.field3Array addObject:value];
  return self;
}
- (instancetype)setField3Array:(NSArray *)array {
  _result.field3Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearField3 {
  _result.field3Array = nil;
  return self;
}
- (NSMutableArray *)Group1 {
  return _result.Group1Array;
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group1*)Group1AtIndex:(NSUInteger)index {
  return [_result Group1AtIndex:index];
}
- (instancetype)addGroup1:(TestParsingMerge_RepeatedFieldsGenerator_Group1*)value {
  if (_result.Group1Array == nil) {
    _result.Group1Array = [[NSMutableArray alloc]init];
  }
  [_result.Group1Array addObject:value];
  return self;
}
- (instancetype)setGroup1Array:(NSArray *)array {
  _result.Group1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearGroup1 {
  _result.Group1Array = nil;
  return self;
}
- (NSMutableArray *)Group2 {
  return _result.Group2Array;
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group2*)Group2AtIndex:(NSUInteger)index {
  return [_result Group2AtIndex:index];
}
- (instancetype)addGroup2:(TestParsingMerge_RepeatedFieldsGenerator_Group2*)value {
  if (_result.Group2Array == nil) {
    _result.Group2Array = [[NSMutableArray alloc]init];
  }
  [_result.Group2Array addObject:value];
  return self;
}
- (instancetype)setGroup2Array:(NSArray *)array {
  _result.Group2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearGroup2 {
  _result.Group2Array = nil;
  return self;
}
- (NSMutableArray *)ext1 {
  return _result.ext1Array;
}
- (TestAllTypes*)ext1AtIndex:(NSUInteger)index {
  return [_result ext1AtIndex:index];
}
- (instancetype)addExt1:(TestAllTypes*)value {
  if (_result.ext1Array == nil) {
    _result.ext1Array = [[NSMutableArray alloc]init];
  }
  [_result.ext1Array addObject:value];
  return self;
}
- (instancetype)setExt1Array:(NSArray *)array {
  _result.ext1Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearExt1 {
  _result.ext1Array = nil;
  return self;
}
- (NSMutableArray *)ext2 {
  return _result.ext2Array;
}
- (TestAllTypes*)ext2AtIndex:(NSUInteger)index {
  return [_result ext2AtIndex:index];
}
- (instancetype)addExt2:(TestAllTypes*)value {
  if (_result.ext2Array == nil) {
    _result.ext2Array = [[NSMutableArray alloc]init];
  }
  [_result.ext2Array addObject:value];
  return self;
}
- (instancetype)setExt2Array:(NSArray *)array {
  _result.ext2Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (instancetype)clearExt2 {
  _result.ext2Array = nil;
  return self;
}

@end


#pragma mark - TestParsingMerge_RepeatedFieldsGenerator_Group1

@interface TestParsingMerge_RepeatedFieldsGenerator_Group1 ()

@property (strong) TestAllTypes* field1;

@end

@implementation TestParsingMerge_RepeatedFieldsGenerator_Group1 {
  BOOL _hasField1:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _field1 = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasField1 {
  return !!_hasField1;
}
- (void)setHasField1:(BOOL)value {
  _hasField1 = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasField1) {
    [output writeMessage:11 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(11, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder*)builder {
  return [[TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder alloc] init];
}
+ (TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder*)builderWithPrototype:(TestParsingMerge_RepeatedFieldsGenerator_Group1*)prototype {
  return [[TestParsingMerge_RepeatedFieldsGenerator_Group1 builder] mergeFrom:prototype];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder*)builder {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group1 builder];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder*)toBuilder {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group1 builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge_RepeatedFieldsGenerator_Group1 class]]) {
    return NO;
  }
  TestParsingMerge_RepeatedFieldsGenerator_Group1 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder {
  TestParsingMerge_RepeatedFieldsGenerator_Group1* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge_RepeatedFieldsGenerator_Group1 alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge_RepeatedFieldsGenerator_Group1 alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_RepeatedFieldsGenerator_Group1_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge_RepeatedFieldsGenerator_Group1*)defaultMessageInstance {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group1 defaultInstance];
}

- (TestParsingMerge_RepeatedFieldsGenerator_Group1*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group1*)buildPartial {
  TestParsingMerge_RepeatedFieldsGenerator_Group1* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge_RepeatedFieldsGenerator_Group1*)other {
  if (other == [TestParsingMerge_RepeatedFieldsGenerator_Group1 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasField1 {
  return _result.hasField1;
}
- (TestAllTypes*)field1 {
  return _result.field1;
}
- (instancetype)setField1:(TestAllTypes*)value {
  _result.hasField1 = YES;
  _result.field1 = value;
  return self;
}
- (instancetype)setField1Builder:(TestAllTypes_Builder*)builderForValue {
  return [self setField1:[builderForValue build]];
}
- (instancetype)mergeField1:(TestAllTypes*)value {
  if (_result.hasField1 &&
      _result.field1 != [TestAllTypes defaultInstance]) {
    _result.field1 =
      [[[TestAllTypes builderWithPrototype:_result.field1] mergeFrom:value] buildPartial];
  } else {
    _result.field1 = value;
  }
  _result.hasField1 = YES;
  return self;
}
- (instancetype)clearField1 {
  _result.hasField1 = NO;
  _result.field1 = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestParsingMerge_RepeatedFieldsGenerator_Group2

@interface TestParsingMerge_RepeatedFieldsGenerator_Group2 ()

@property (strong) TestAllTypes* field1;

@end

@implementation TestParsingMerge_RepeatedFieldsGenerator_Group2 {
  BOOL _hasField1:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _field1 = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasField1 {
  return !!_hasField1;
}
- (void)setHasField1:(BOOL)value {
  _hasField1 = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasField1) {
    [output writeMessage:21 value:self.field1];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasField1) {
    size_ += computeMessageSize(21, self.field1);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder*)builder {
  return [[TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder alloc] init];
}
+ (TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder*)builderWithPrototype:(TestParsingMerge_RepeatedFieldsGenerator_Group2*)prototype {
  return [[TestParsingMerge_RepeatedFieldsGenerator_Group2 builder] mergeFrom:prototype];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder*)builder {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group2 builder];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder*)toBuilder {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group2 builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasField1) {
    [output appendFormat:@"%@%@ {\n", indent, @"field1"];
    [self.field1 writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge_RepeatedFieldsGenerator_Group2 class]]) {
    return NO;
  }
  TestParsingMerge_RepeatedFieldsGenerator_Group2 *otherMessage = other;
  return
      self.hasField1 == otherMessage.hasField1 &&
      (!self.hasField1 || [self.field1 isEqual:otherMessage.field1]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasField1) {
    hashCode = hashCode * 31 + [self.field1 hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder {
  TestParsingMerge_RepeatedFieldsGenerator_Group2* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge_RepeatedFieldsGenerator_Group2 alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge_RepeatedFieldsGenerator_Group2 alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_RepeatedFieldsGenerator_Group2_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge_RepeatedFieldsGenerator_Group2*)defaultMessageInstance {
  return [TestParsingMerge_RepeatedFieldsGenerator_Group2 defaultInstance];
}

- (TestParsingMerge_RepeatedFieldsGenerator_Group2*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge_RepeatedFieldsGenerator_Group2*)buildPartial {
  TestParsingMerge_RepeatedFieldsGenerator_Group2* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge_RepeatedFieldsGenerator_Group2*)other {
  if (other == [TestParsingMerge_RepeatedFieldsGenerator_Group2 defaultInstance]) {
    return self;
  }
  if (other.hasField1) {
    [self mergeField1:other.field1];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasField1) {
          [subBuilder mergeFrom:self.field1];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setField1:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasField1 {
  return _result.hasField1;
}
- (TestAllTypes*)field1 {
  return _result.field1;
}
- (instancetype)setField1:(TestAllTypes*)value {
  _result.hasField1 = YES;
  _result.field1 = value;
  return self;
}
- (instancetype)setField1Builder:(TestAllTypes_Builder*)builderForValue {
  return [self setField1:[builderForValue build]];
}
- (instancetype)mergeField1:(TestAllTypes*)value {
  if (_result.hasField1 &&
      _result.field1 != [TestAllTypes defaultInstance]) {
    _result.field1 =
      [[[TestAllTypes builderWithPrototype:_result.field1] mergeFrom:value] buildPartial];
  } else {
    _result.field1 = value;
  }
  _result.hasField1 = YES;
  return self;
}
- (instancetype)clearField1 {
  _result.hasField1 = NO;
  _result.field1 = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestParsingMerge_OptionalGroup

@interface TestParsingMerge_OptionalGroup ()

@property (strong) TestAllTypes* optionalGroupAllTypes;

@end

@implementation TestParsingMerge_OptionalGroup {
  BOOL _hasOptionalGroupAllTypes:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _optionalGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasOptionalGroupAllTypes {
  return !!_hasOptionalGroupAllTypes;
}
- (void)setHasOptionalGroupAllTypes:(BOOL)value {
  _hasOptionalGroupAllTypes = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasOptionalGroupAllTypes) {
    [output writeMessage:11 value:self.optionalGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOptionalGroupAllTypes) {
    size_ += computeMessageSize(11, self.optionalGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_OptionalGroup_Builder*)builder {
  return [[TestParsingMerge_OptionalGroup_Builder alloc] init];
}
+ (TestParsingMerge_OptionalGroup_Builder*)builderWithPrototype:(TestParsingMerge_OptionalGroup*)prototype {
  return [[TestParsingMerge_OptionalGroup builder] mergeFrom:prototype];
}
- (TestParsingMerge_OptionalGroup_Builder*)builder {
  return [TestParsingMerge_OptionalGroup builder];
}
- (TestParsingMerge_OptionalGroup_Builder*)toBuilder {
  return [TestParsingMerge_OptionalGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"optionalGroupAllTypes"];
    [self.optionalGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge_OptionalGroup class]]) {
    return NO;
  }
  TestParsingMerge_OptionalGroup *otherMessage = other;
  return
      self.hasOptionalGroupAllTypes == otherMessage.hasOptionalGroupAllTypes &&
      (!self.hasOptionalGroupAllTypes || [self.optionalGroupAllTypes isEqual:otherMessage.optionalGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasOptionalGroupAllTypes) {
    hashCode = hashCode * 31 + [self.optionalGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_OptionalGroup_Builder {
  TestParsingMerge_OptionalGroup* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge_OptionalGroup alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge_OptionalGroup alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_OptionalGroup_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge_OptionalGroup*)defaultMessageInstance {
  return [TestParsingMerge_OptionalGroup defaultInstance];
}

- (TestParsingMerge_OptionalGroup*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge_OptionalGroup*)buildPartial {
  TestParsingMerge_OptionalGroup* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge_OptionalGroup*)other {
  if (other == [TestParsingMerge_OptionalGroup defaultInstance]) {
    return self;
  }
  if (other.hasOptionalGroupAllTypes) {
    [self mergeOptionalGroupAllTypes:other.optionalGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 90: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasOptionalGroupAllTypes) {
          [subBuilder mergeFrom:self.optionalGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOptionalGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasOptionalGroupAllTypes {
  return _result.hasOptionalGroupAllTypes;
}
- (TestAllTypes*)optionalGroupAllTypes {
  return _result.optionalGroupAllTypes;
}
- (instancetype)setOptionalGroupAllTypes:(TestAllTypes*)value {
  _result.hasOptionalGroupAllTypes = YES;
  _result.optionalGroupAllTypes = value;
  return self;
}
- (instancetype)setOptionalGroupAllTypesBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setOptionalGroupAllTypes:[builderForValue build]];
}
- (instancetype)mergeOptionalGroupAllTypes:(TestAllTypes*)value {
  if (_result.hasOptionalGroupAllTypes &&
      _result.optionalGroupAllTypes != [TestAllTypes defaultInstance]) {
    _result.optionalGroupAllTypes =
      [[[TestAllTypes builderWithPrototype:_result.optionalGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    _result.optionalGroupAllTypes = value;
  }
  _result.hasOptionalGroupAllTypes = YES;
  return self;
}
- (instancetype)clearOptionalGroupAllTypes {
  _result.hasOptionalGroupAllTypes = NO;
  _result.optionalGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestParsingMerge_RepeatedGroup

@interface TestParsingMerge_RepeatedGroup ()

@property (strong) TestAllTypes* repeatedGroupAllTypes;

@end

@implementation TestParsingMerge_RepeatedGroup {
  BOOL _hasRepeatedGroupAllTypes:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _repeatedGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasRepeatedGroupAllTypes {
  return !!_hasRepeatedGroupAllTypes;
}
- (void)setHasRepeatedGroupAllTypes:(BOOL)value {
  _hasRepeatedGroupAllTypes = !!value;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasRepeatedGroupAllTypes) {
    [output writeMessage:21 value:self.repeatedGroupAllTypes];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRepeatedGroupAllTypes) {
    size_ += computeMessageSize(21, self.repeatedGroupAllTypes);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestParsingMerge_RepeatedGroup_Builder*)builder {
  return [[TestParsingMerge_RepeatedGroup_Builder alloc] init];
}
+ (TestParsingMerge_RepeatedGroup_Builder*)builderWithPrototype:(TestParsingMerge_RepeatedGroup*)prototype {
  return [[TestParsingMerge_RepeatedGroup builder] mergeFrom:prototype];
}
- (TestParsingMerge_RepeatedGroup_Builder*)builder {
  return [TestParsingMerge_RepeatedGroup builder];
}
- (TestParsingMerge_RepeatedGroup_Builder*)toBuilder {
  return [TestParsingMerge_RepeatedGroup builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasRepeatedGroupAllTypes) {
    [output appendFormat:@"%@%@ {\n", indent, @"repeatedGroupAllTypes"];
    [self.repeatedGroupAllTypes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestParsingMerge_RepeatedGroup class]]) {
    return NO;
  }
  TestParsingMerge_RepeatedGroup *otherMessage = other;
  return
      self.hasRepeatedGroupAllTypes == otherMessage.hasRepeatedGroupAllTypes &&
      (!self.hasRepeatedGroupAllTypes || [self.repeatedGroupAllTypes isEqual:otherMessage.repeatedGroupAllTypes]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasRepeatedGroupAllTypes) {
    hashCode = hashCode * 31 + [self.repeatedGroupAllTypes hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestParsingMerge_RepeatedGroup_Builder {
  TestParsingMerge_RepeatedGroup* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestParsingMerge_RepeatedGroup alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestParsingMerge_RepeatedGroup alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestParsingMerge_RepeatedGroup_Builder alloc] init] mergeFrom:_result];
}

- (TestParsingMerge_RepeatedGroup*)defaultMessageInstance {
  return [TestParsingMerge_RepeatedGroup defaultInstance];
}

- (TestParsingMerge_RepeatedGroup*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestParsingMerge_RepeatedGroup*)buildPartial {
  TestParsingMerge_RepeatedGroup* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestParsingMerge_RepeatedGroup*)other {
  if (other == [TestParsingMerge_RepeatedGroup defaultInstance]) {
    return self;
  }
  if (other.hasRepeatedGroupAllTypes) {
    [self mergeRepeatedGroupAllTypes:other.repeatedGroupAllTypes];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 170: {
        TestAllTypes_Builder* subBuilder = [TestAllTypes builder];
        if (self.hasRepeatedGroupAllTypes) {
          [subBuilder mergeFrom:self.repeatedGroupAllTypes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRepeatedGroupAllTypes:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL)hasRepeatedGroupAllTypes {
  return _result.hasRepeatedGroupAllTypes;
}
- (TestAllTypes*)repeatedGroupAllTypes {
  return _result.repeatedGroupAllTypes;
}
- (instancetype)setRepeatedGroupAllTypes:(TestAllTypes*)value {
  _result.hasRepeatedGroupAllTypes = YES;
  _result.repeatedGroupAllTypes = value;
  return self;
}
- (instancetype)setRepeatedGroupAllTypesBuilder:(TestAllTypes_Builder*)builderForValue {
  return [self setRepeatedGroupAllTypes:[builderForValue build]];
}
- (instancetype)mergeRepeatedGroupAllTypes:(TestAllTypes*)value {
  if (_result.hasRepeatedGroupAllTypes &&
      _result.repeatedGroupAllTypes != [TestAllTypes defaultInstance]) {
    _result.repeatedGroupAllTypes =
      [[[TestAllTypes builderWithPrototype:_result.repeatedGroupAllTypes] mergeFrom:value] buildPartial];
  } else {
    _result.repeatedGroupAllTypes = value;
  }
  _result.hasRepeatedGroupAllTypes = YES;
  return self;
}
- (instancetype)clearRepeatedGroupAllTypes {
  _result.hasRepeatedGroupAllTypes = NO;
  _result.repeatedGroupAllTypes = [TestAllTypes defaultInstance];
  return self;
}

@end


#pragma mark - TestCommentInjectionMessage

@interface TestCommentInjectionMessage ()

@property (strong) NSString * a;

@end

@implementation TestCommentInjectionMessage {
  BOOL _hasA:1;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
    _a = @"*/ <- Neither should this.";
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}

- (BOOL)hasA {
  return !!_hasA;
}
- (void)setHasA:(BOOL)value {
  _hasA = !!value;
}


- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  if (self.hasA) {
    [output writeString:1 value:self.a];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasA) {
    size_ += computeStringSize(1, self.a);
  }
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (TestCommentInjectionMessage_Builder*)builder {
  return [[TestCommentInjectionMessage_Builder alloc] init];
}
+ (TestCommentInjectionMessage_Builder*)builderWithPrototype:(TestCommentInjectionMessage*)prototype {
  return [[TestCommentInjectionMessage builder] mergeFrom:prototype];
}
- (TestCommentInjectionMessage_Builder*)builder {
  return [TestCommentInjectionMessage builder];
}
- (TestCommentInjectionMessage_Builder*)toBuilder {
  return [TestCommentInjectionMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    [output appendFormat:@"%@%@: %@\n", indent, @"a", self.a];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestCommentInjectionMessage class]]) {
    return NO;
  }
  TestCommentInjectionMessage *otherMessage = other;
  return
      self.hasA == otherMessage.hasA &&
      (!self.hasA || [self.a isEqual:otherMessage.a]) &&
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  if (self.hasA) {
    hashCode = hashCode * 31 + [self.a hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation TestCommentInjectionMessage_Builder {
  TestCommentInjectionMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[TestCommentInjectionMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[TestCommentInjectionMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[TestCommentInjectionMessage_Builder alloc] init] mergeFrom:_result];
}

- (TestCommentInjectionMessage*)defaultMessageInstance {
  return [TestCommentInjectionMessage defaultInstance];
}

- (TestCommentInjectionMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestCommentInjectionMessage*)buildPartial {
  TestCommentInjectionMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(TestCommentInjectionMessage*)other {
  if (other == [TestCommentInjectionMessage defaultInstance]) {
    return self;
  }
  if (other.hasA) {
    [self setA:other.a];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setA:[input readString]];
        break;
      }
    }
  }
}
- (BOOL)hasA {
  return _result.hasA;
}
- (NSString *) a {
  return _result.a;
}
- (instancetype)setA:(NSString *)value {
  _result.hasA = YES;
  _result.a = value;
  return self;
}
- (instancetype)clearA {
  _result.hasA = NO;
  _result.a = @"*/ <- Neither should this.";
  return self;
}

@end


#pragma mark - FooRequest

@interface FooRequest ()


@end

@implementation FooRequest {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (FooRequest_Builder*)builder {
  return [[FooRequest_Builder alloc] init];
}
+ (FooRequest_Builder*)builderWithPrototype:(FooRequest*)prototype {
  return [[FooRequest builder] mergeFrom:prototype];
}
- (FooRequest_Builder*)builder {
  return [FooRequest builder];
}
- (FooRequest_Builder*)toBuilder {
  return [FooRequest builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooRequest class]]) {
    return NO;
  }
  FooRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation FooRequest_Builder {
  FooRequest* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[FooRequest alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[FooRequest alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[FooRequest_Builder alloc] init] mergeFrom:_result];
}

- (FooRequest*)defaultMessageInstance {
  return [FooRequest defaultInstance];
}

- (FooRequest*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooRequest*)buildPartial {
  FooRequest* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(FooRequest*)other {
  if (other == [FooRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - FooResponse

@interface FooResponse ()


@end

@implementation FooResponse {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (FooResponse_Builder*)builder {
  return [[FooResponse_Builder alloc] init];
}
+ (FooResponse_Builder*)builderWithPrototype:(FooResponse*)prototype {
  return [[FooResponse builder] mergeFrom:prototype];
}
- (FooResponse_Builder*)builder {
  return [FooResponse builder];
}
- (FooResponse_Builder*)toBuilder {
  return [FooResponse builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooResponse class]]) {
    return NO;
  }
  FooResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation FooResponse_Builder {
  FooResponse* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[FooResponse alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[FooResponse alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[FooResponse_Builder alloc] init] mergeFrom:_result];
}

- (FooResponse*)defaultMessageInstance {
  return [FooResponse defaultInstance];
}

- (FooResponse*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooResponse*)buildPartial {
  FooResponse* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(FooResponse*)other {
  if (other == [FooResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - FooClientMessage

@interface FooClientMessage ()


@end

@implementation FooClientMessage {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (FooClientMessage_Builder*)builder {
  return [[FooClientMessage_Builder alloc] init];
}
+ (FooClientMessage_Builder*)builderWithPrototype:(FooClientMessage*)prototype {
  return [[FooClientMessage builder] mergeFrom:prototype];
}
- (FooClientMessage_Builder*)builder {
  return [FooClientMessage builder];
}
- (FooClientMessage_Builder*)toBuilder {
  return [FooClientMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooClientMessage class]]) {
    return NO;
  }
  FooClientMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation FooClientMessage_Builder {
  FooClientMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[FooClientMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[FooClientMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[FooClientMessage_Builder alloc] init] mergeFrom:_result];
}

- (FooClientMessage*)defaultMessageInstance {
  return [FooClientMessage defaultInstance];
}

- (FooClientMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooClientMessage*)buildPartial {
  FooClientMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(FooClientMessage*)other {
  if (other == [FooClientMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - FooServerMessage

@interface FooServerMessage ()


@end

@implementation FooServerMessage {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (FooServerMessage_Builder*)builder {
  return [[FooServerMessage_Builder alloc] init];
}
+ (FooServerMessage_Builder*)builderWithPrototype:(FooServerMessage*)prototype {
  return [[FooServerMessage builder] mergeFrom:prototype];
}
- (FooServerMessage_Builder*)builder {
  return [FooServerMessage builder];
}
- (FooServerMessage_Builder*)toBuilder {
  return [FooServerMessage builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FooServerMessage class]]) {
    return NO;
  }
  FooServerMessage *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation FooServerMessage_Builder {
  FooServerMessage* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[FooServerMessage alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[FooServerMessage alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[FooServerMessage_Builder alloc] init] mergeFrom:_result];
}

- (FooServerMessage*)defaultMessageInstance {
  return [FooServerMessage defaultInstance];
}

- (FooServerMessage*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FooServerMessage*)buildPartial {
  FooServerMessage* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(FooServerMessage*)other {
  if (other == [FooServerMessage defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - BarRequest

@interface BarRequest ()


@end

@implementation BarRequest {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (BarRequest_Builder*)builder {
  return [[BarRequest_Builder alloc] init];
}
+ (BarRequest_Builder*)builderWithPrototype:(BarRequest*)prototype {
  return [[BarRequest builder] mergeFrom:prototype];
}
- (BarRequest_Builder*)builder {
  return [BarRequest builder];
}
- (BarRequest_Builder*)toBuilder {
  return [BarRequest builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarRequest class]]) {
    return NO;
  }
  BarRequest *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation BarRequest_Builder {
  BarRequest* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[BarRequest alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[BarRequest alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[BarRequest_Builder alloc] init] mergeFrom:_result];
}

- (BarRequest*)defaultMessageInstance {
  return [BarRequest defaultInstance];
}

- (BarRequest*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BarRequest*)buildPartial {
  BarRequest* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(BarRequest*)other {
  if (other == [BarRequest defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


#pragma mark - BarResponse

@interface BarResponse ()


@end

@implementation BarResponse {
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  return self;
}

+ (instancetype)defaultInstance {
  static id _sharedObject = nil;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    _sharedObject = [[self alloc] init];
  });
  return _sharedObject;
}



- (BOOL)isInitialized {
  return YES;
}

- (void)writeToCodedOutputStream:(PBCodedOutputStream*)output {
  [self.unknownFields writeToCodedOutputStream:output];
}

- (int32_t)serializedSize {
  int32_t size_ = _cachedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  _cachedSerializedSize = size_;
  return size_;
}


+ (BarResponse_Builder*)builder {
  return [[BarResponse_Builder alloc] init];
}
+ (BarResponse_Builder*)builderWithPrototype:(BarResponse*)prototype {
  return [[BarResponse builder] mergeFrom:prototype];
}
- (BarResponse_Builder*)builder {
  return [BarResponse builder];
}
- (BarResponse_Builder*)toBuilder {
  return [BarResponse builderWithPrototype:self];
}

- (void)writeDescriptionTo:(NSMutableString*)output withIndent:(NSString*)indent {
  NSUInteger listCount; listCount = 0;
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BarResponse class]]) {
    return NO;
  }
  BarResponse *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields ||
       (self.unknownFields != nil &&
       [self.unknownFields isEqual:otherMessage.unknownFields]));
}

- (NSUInteger)hash {
  NSUInteger hashCode; hashCode = 7;
  NSUInteger listCount; listCount = 0;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}

@end


@implementation BarResponse_Builder {
  BarResponse* _result;
}

- (instancetype)init {
  self = [super init];
  if (self == nil) {
    return nil;
  }
  _result = [[BarResponse alloc] init];
  return self;
}

- (PBGeneratedMessage*)internalGetResult {
  return _result;
}
- (instancetype)clear {
  _result = [[BarResponse alloc] init];
  return self;
}
- (instancetype)clone {
  return [[[BarResponse_Builder alloc] init] mergeFrom:_result];
}

- (BarResponse*)defaultMessageInstance {
  return [BarResponse defaultInstance];
}

- (BarResponse*)build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BarResponse*)buildPartial {
  BarResponse* partial = _result;
  _result = nil;
  return partial;
}

- (instancetype)mergeFrom:(BarResponse*)other {
  if (other == [BarResponse defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}

- (instancetype)mergeFromCodedInputStream:(PBCodedInputStream*)input
                        extensionRegistry:(PBExtensionRegistry*)extensionRegistry
{
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input
                       unknownFields:unknownFields
                   extensionRegistry:extensionRegistry
                                 tag:tag])
        {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}

@end


// @@protoc_insertion_point(global_scope)
